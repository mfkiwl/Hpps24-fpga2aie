-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity setup_joint_aie is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    s_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_0_TVALID : OUT STD_LOGIC;
    s_0_TREADY : IN STD_LOGIC;
    s_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_1_TVALID : OUT STD_LOGIC;
    s_1_TREADY : IN STD_LOGIC;
    s_2_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_2_TVALID : OUT STD_LOGIC;
    s_2_TREADY : IN STD_LOGIC;
    s_3_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_3_TVALID : OUT STD_LOGIC;
    s_3_TREADY : IN STD_LOGIC;
    s_4_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_4_TVALID : OUT STD_LOGIC;
    s_4_TREADY : IN STD_LOGIC;
    s_5_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_5_TVALID : OUT STD_LOGIC;
    s_5_TREADY : IN STD_LOGIC;
    s_6_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_6_TVALID : OUT STD_LOGIC;
    s_6_TREADY : IN STD_LOGIC;
    s_7_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_7_TVALID : OUT STD_LOGIC;
    s_7_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of setup_joint_aie is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "setup_joint_aie_setup_joint_aie,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsvd1760-2MP-e-S,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=8275,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5925,HLS_SYN_LUT=7171,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_size : STD_LOGIC_VECTOR (31 downto 0);
    signal histogram_rows : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal s_1_TDATA_blk_n : STD_LOGIC;
    signal s_2_TDATA_blk_n : STD_LOGIC;
    signal s_3_TDATA_blk_n : STD_LOGIC;
    signal s_4_TDATA_blk_n : STD_LOGIC;
    signal s_5_TDATA_blk_n : STD_LOGIC;
    signal s_6_TDATA_blk_n : STD_LOGIC;
    signal s_7_TDATA_blk_n : STD_LOGIC;
    signal histogram_rows_read_reg_191 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_start : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_done : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_idle : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_ready : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TREADY : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_ext_blocking_n : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_str_blocking_n : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_int_blocking_n : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_s_0_U_apdone_blk : STD_LOGIC;
    signal regslice_both_s_1_U_apdone_blk : STD_LOGIC;
    signal regslice_both_s_2_U_apdone_blk : STD_LOGIC;
    signal regslice_both_s_3_U_apdone_blk : STD_LOGIC;
    signal regslice_both_s_4_U_apdone_blk : STD_LOGIC;
    signal regslice_both_s_5_U_apdone_blk : STD_LOGIC;
    signal regslice_both_s_6_U_apdone_blk : STD_LOGIC;
    signal regslice_both_s_7_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;
    signal s_0_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_0_TVALID_int_regslice : STD_LOGIC;
    signal s_0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_0_U_vld_out : STD_LOGIC;
    signal s_1_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_1_TVALID_int_regslice : STD_LOGIC;
    signal s_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_1_U_vld_out : STD_LOGIC;
    signal s_2_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_2_TVALID_int_regslice : STD_LOGIC;
    signal s_2_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_2_U_vld_out : STD_LOGIC;
    signal s_3_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_3_TVALID_int_regslice : STD_LOGIC;
    signal s_3_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_3_U_vld_out : STD_LOGIC;
    signal s_4_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_4_TVALID_int_regslice : STD_LOGIC;
    signal s_4_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_4_U_vld_out : STD_LOGIC;
    signal s_5_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_5_TVALID_int_regslice : STD_LOGIC;
    signal s_5_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_5_U_vld_out : STD_LOGIC;
    signal s_6_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_6_TVALID_int_regslice : STD_LOGIC;
    signal s_6_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_6_U_vld_out : STD_LOGIC;
    signal s_7_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal s_7_TVALID_int_regslice : STD_LOGIC;
    signal s_7_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_7_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component setup_joint_aie_setup_joint_aie_Pipeline_VITIS_LOOP_68_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_0_TREADY : IN STD_LOGIC;
        s_1_TREADY : IN STD_LOGIC;
        s_2_TREADY : IN STD_LOGIC;
        s_3_TREADY : IN STD_LOGIC;
        s_4_TREADY : IN STD_LOGIC;
        s_5_TREADY : IN STD_LOGIC;
        s_6_TREADY : IN STD_LOGIC;
        s_7_TREADY : IN STD_LOGIC;
        histogram_rows : IN STD_LOGIC_VECTOR (63 downto 0);
        s_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_0_TVALID : OUT STD_LOGIC;
        s_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_1_TVALID : OUT STD_LOGIC;
        s_2_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_2_TVALID : OUT STD_LOGIC;
        s_3_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_3_TVALID : OUT STD_LOGIC;
        s_4_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_4_TVALID : OUT STD_LOGIC;
        s_5_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_5_TVALID : OUT STD_LOGIC;
        s_6_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_6_TVALID : OUT STD_LOGIC;
        s_7_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_7_TVALID : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component setup_joint_aie_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        image_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        histogram_rows : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component setup_joint_aie_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component setup_joint_aie_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156 : component setup_joint_aie_setup_joint_aie_Pipeline_VITIS_LOOP_68_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_start,
        ap_done => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_done,
        ap_idle => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_idle,
        ap_ready => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_ready,
        m_axi_gmem0_AWVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => ap_const_logic_0,
        m_axi_gmem0_RID => ap_const_lv1_0,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => ap_const_lv1_0,
        m_axi_gmem0_RRESP => ap_const_lv2_0,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        s_0_TREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TREADY,
        s_1_TREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TREADY,
        s_2_TREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TREADY,
        s_3_TREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TREADY,
        s_4_TREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TREADY,
        s_5_TREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TREADY,
        s_6_TREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TREADY,
        s_7_TREADY => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TREADY,
        histogram_rows => histogram_rows_read_reg_191,
        s_0_TDATA => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TDATA,
        s_0_TVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TVALID,
        s_1_TDATA => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TDATA,
        s_1_TVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TVALID,
        s_2_TDATA => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TDATA,
        s_2_TVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TVALID,
        s_3_TDATA => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TDATA,
        s_3_TVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TVALID,
        s_4_TDATA => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TDATA,
        s_4_TVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TVALID,
        s_5_TDATA => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TDATA,
        s_5_TVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TVALID,
        s_6_TDATA => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TDATA,
        s_6_TVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TVALID,
        s_7_TDATA => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TDATA,
        s_7_TVALID => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TVALID,
        ap_ext_blocking_n => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_ext_blocking_n,
        ap_str_blocking_n => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_str_blocking_n,
        ap_int_blocking_n => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_int_blocking_n);

    control_s_axi_U : component setup_joint_aie_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        image_size => image_size,
        histogram_rows => histogram_rows,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component setup_joint_aie_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 256,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARADDR,
        I_ARLEN => grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv256_lc_1,
        I_WSTRB => ap_const_lv32_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0);

    regslice_both_s_0_U : component setup_joint_aie_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_0_TDATA_int_regslice,
        vld_in => s_0_TVALID_int_regslice,
        ack_in => s_0_TREADY_int_regslice,
        data_out => s_0_TDATA,
        vld_out => regslice_both_s_0_U_vld_out,
        ack_out => s_0_TREADY,
        apdone_blk => regslice_both_s_0_U_apdone_blk);

    regslice_both_s_1_U : component setup_joint_aie_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_1_TDATA_int_regslice,
        vld_in => s_1_TVALID_int_regslice,
        ack_in => s_1_TREADY_int_regslice,
        data_out => s_1_TDATA,
        vld_out => regslice_both_s_1_U_vld_out,
        ack_out => s_1_TREADY,
        apdone_blk => regslice_both_s_1_U_apdone_blk);

    regslice_both_s_2_U : component setup_joint_aie_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_2_TDATA_int_regslice,
        vld_in => s_2_TVALID_int_regslice,
        ack_in => s_2_TREADY_int_regslice,
        data_out => s_2_TDATA,
        vld_out => regslice_both_s_2_U_vld_out,
        ack_out => s_2_TREADY,
        apdone_blk => regslice_both_s_2_U_apdone_blk);

    regslice_both_s_3_U : component setup_joint_aie_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_3_TDATA_int_regslice,
        vld_in => s_3_TVALID_int_regslice,
        ack_in => s_3_TREADY_int_regslice,
        data_out => s_3_TDATA,
        vld_out => regslice_both_s_3_U_vld_out,
        ack_out => s_3_TREADY,
        apdone_blk => regslice_both_s_3_U_apdone_blk);

    regslice_both_s_4_U : component setup_joint_aie_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_4_TDATA_int_regslice,
        vld_in => s_4_TVALID_int_regslice,
        ack_in => s_4_TREADY_int_regslice,
        data_out => s_4_TDATA,
        vld_out => regslice_both_s_4_U_vld_out,
        ack_out => s_4_TREADY,
        apdone_blk => regslice_both_s_4_U_apdone_blk);

    regslice_both_s_5_U : component setup_joint_aie_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_5_TDATA_int_regslice,
        vld_in => s_5_TVALID_int_regslice,
        ack_in => s_5_TREADY_int_regslice,
        data_out => s_5_TDATA,
        vld_out => regslice_both_s_5_U_vld_out,
        ack_out => s_5_TREADY,
        apdone_blk => regslice_both_s_5_U_apdone_blk);

    regslice_both_s_6_U : component setup_joint_aie_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_6_TDATA_int_regslice,
        vld_in => s_6_TVALID_int_regslice,
        ack_in => s_6_TREADY_int_regslice,
        data_out => s_6_TDATA,
        vld_out => regslice_both_s_6_U_vld_out,
        ack_out => s_6_TREADY,
        apdone_blk => regslice_both_s_6_U_apdone_blk);

    regslice_both_s_7_U : component setup_joint_aie_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_7_TDATA_int_regslice,
        vld_in => s_7_TVALID_int_regslice,
        ack_in => s_7_TREADY_int_regslice,
        data_out => s_7_TDATA,
        vld_out => regslice_both_s_7_U_vld_out,
        ack_out => s_7_TREADY,
        apdone_blk => regslice_both_s_7_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((regslice_both_s_7_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_6_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_5_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_4_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_3_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_0_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_ready = ap_const_logic_1)) then 
                    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_int_blocking_n_reg <= ap_int_blocking_n;
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_str_blocking_n_reg <= ap_str_blocking_n;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                histogram_rows_read_reg_191 <= histogram_rows;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_done, ap_CS_fsm_state4, ap_block_state1_io, ap_block_state2_io, ap_CS_fsm_state5, regslice_both_s_0_U_apdone_blk, regslice_both_s_1_U_apdone_blk, regslice_both_s_2_U_apdone_blk, regslice_both_s_3_U_apdone_blk, regslice_both_s_4_U_apdone_blk, regslice_both_s_5_U_apdone_blk, regslice_both_s_6_U_apdone_blk, regslice_both_s_7_U_apdone_blk, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((regslice_both_s_7_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_6_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_5_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_4_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_3_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_0_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, ap_block_state1_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if (((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if (((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_done)
    begin
        if ((grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(regslice_both_s_0_U_apdone_blk, regslice_both_s_1_U_apdone_blk, regslice_both_s_2_U_apdone_blk, regslice_both_s_3_U_apdone_blk, regslice_both_s_4_U_apdone_blk, regslice_both_s_5_U_apdone_blk, regslice_both_s_6_U_apdone_blk, regslice_both_s_7_U_apdone_blk)
    begin
        if (((regslice_both_s_7_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_6_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_5_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_4_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_3_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_0_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
                ap_block_state1 <= ((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_io_assign_proc : process(s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
                ap_block_state1_io <= ((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
                ap_block_state2 <= ((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
                ap_block_state2_io <= ((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(regslice_both_s_0_U_apdone_blk, regslice_both_s_1_U_apdone_blk, regslice_both_s_2_U_apdone_blk, regslice_both_s_3_U_apdone_blk, regslice_both_s_4_U_apdone_blk, regslice_both_s_5_U_apdone_blk, regslice_both_s_6_U_apdone_blk, regslice_both_s_7_U_apdone_blk)
    begin
                ap_block_state5 <= ((regslice_both_s_7_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_6_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_5_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_4_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_3_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_0_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, regslice_both_s_0_U_apdone_blk, regslice_both_s_1_U_apdone_blk, regslice_both_s_2_U_apdone_blk, regslice_both_s_3_U_apdone_blk, regslice_both_s_4_U_apdone_blk, regslice_both_s_5_U_apdone_blk, regslice_both_s_6_U_apdone_blk, regslice_both_s_7_U_apdone_blk)
    begin
        if ((not(((regslice_both_s_7_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_6_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_5_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_4_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_3_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_0_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_const_logic_1);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1)) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_const_logic_1);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_int_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1)) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_s_0_U_apdone_blk, regslice_both_s_1_U_apdone_blk, regslice_both_s_2_U_apdone_blk, regslice_both_s_3_U_apdone_blk, regslice_both_s_4_U_apdone_blk, regslice_both_s_5_U_apdone_blk, regslice_both_s_6_U_apdone_blk, regslice_both_s_7_U_apdone_blk)
    begin
        if ((not(((regslice_both_s_7_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_6_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_5_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_4_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_3_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_2_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_s_0_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_cur_n <= (s_7_TDATA_blk_n and s_6_TDATA_blk_n and s_5_TDATA_blk_n and s_4_TDATA_blk_n and s_3_TDATA_blk_n and s_2_TDATA_blk_n and s_1_TDATA_blk_n and s_0_TDATA_blk_n);
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_str_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1)) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_ext_blocking_n)
    begin
        if ((grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_int_blocking_n)
    begin
        if ((grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_str_blocking_n)
    begin
        if ((grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state4 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;

    event_done <= ap_done;

    gmem0_ARVALID_assign_proc : process(grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem0_ARVALID <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_ARVALID;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_RREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem0_RREADY <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_m_axi_gmem0_RREADY;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_start <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_ap_start_reg;
    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TREADY <= (s_0_TREADY_int_regslice and ap_CS_fsm_state4);
    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TREADY <= (s_1_TREADY_int_regslice and ap_CS_fsm_state4);
    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TREADY <= (s_2_TREADY_int_regslice and ap_CS_fsm_state4);
    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TREADY <= (s_3_TREADY_int_regslice and ap_CS_fsm_state4);
    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TREADY <= (s_4_TREADY_int_regslice and ap_CS_fsm_state4);
    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TREADY <= (s_5_TREADY_int_regslice and ap_CS_fsm_state4);
    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TREADY <= (s_6_TREADY_int_regslice and ap_CS_fsm_state4);
    grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TREADY <= (s_7_TREADY_int_regslice and ap_CS_fsm_state4);

    s_0_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, s_0_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            s_0_TDATA_blk_n <= s_0_TREADY_int_regslice;
        else 
            s_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_0_TDATA_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_size, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TDATA, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TVALID, ap_CS_fsm_state4, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_0_TDATA_int_regslice <= image_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TVALID = ap_const_logic_1))) then 
            s_0_TDATA_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TDATA;
        else 
            s_0_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_0_TVALID <= regslice_both_s_0_U_vld_out;

    s_0_TVALID_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TVALID, ap_CS_fsm_state4, ap_block_state1_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_0_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_0_TVALID_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_0_TVALID;
        else 
            s_0_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_1_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, s_1_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            s_1_TDATA_blk_n <= s_1_TREADY_int_regslice;
        else 
            s_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_1_TDATA_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_size, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TDATA, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TVALID, ap_CS_fsm_state4, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_1_TDATA_int_regslice <= image_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TVALID = ap_const_logic_1))) then 
            s_1_TDATA_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TDATA;
        else 
            s_1_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_1_TVALID <= regslice_both_s_1_U_vld_out;

    s_1_TVALID_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TVALID, ap_CS_fsm_state4, ap_block_state1_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_1_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_1_TVALID_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_1_TVALID;
        else 
            s_1_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_2_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, s_2_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            s_2_TDATA_blk_n <= s_2_TREADY_int_regslice;
        else 
            s_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_2_TDATA_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_size, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TDATA, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TVALID, ap_CS_fsm_state4, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_2_TDATA_int_regslice <= image_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TVALID = ap_const_logic_1))) then 
            s_2_TDATA_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TDATA;
        else 
            s_2_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_2_TVALID <= regslice_both_s_2_U_vld_out;

    s_2_TVALID_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TVALID, ap_CS_fsm_state4, ap_block_state1_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_2_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_2_TVALID_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_2_TVALID;
        else 
            s_2_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_3_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, s_3_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            s_3_TDATA_blk_n <= s_3_TREADY_int_regslice;
        else 
            s_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_3_TDATA_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_size, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TDATA, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TVALID, ap_CS_fsm_state4, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_3_TDATA_int_regslice <= image_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TVALID = ap_const_logic_1))) then 
            s_3_TDATA_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TDATA;
        else 
            s_3_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_3_TVALID <= regslice_both_s_3_U_vld_out;

    s_3_TVALID_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TVALID, ap_CS_fsm_state4, ap_block_state1_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_3_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_3_TVALID_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_3_TVALID;
        else 
            s_3_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_4_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, s_4_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            s_4_TDATA_blk_n <= s_4_TREADY_int_regslice;
        else 
            s_4_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_4_TDATA_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_size, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TDATA, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TVALID, ap_CS_fsm_state4, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_4_TDATA_int_regslice <= image_size;
        elsif (((grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            s_4_TDATA_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TDATA;
        else 
            s_4_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_4_TVALID <= regslice_both_s_4_U_vld_out;

    s_4_TVALID_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TVALID, ap_CS_fsm_state4, ap_block_state1_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_4_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_4_TVALID_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_4_TVALID;
        else 
            s_4_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_5_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, s_5_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            s_5_TDATA_blk_n <= s_5_TREADY_int_regslice;
        else 
            s_5_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_5_TDATA_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_size, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TDATA, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TVALID, ap_CS_fsm_state4, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_5_TDATA_int_regslice <= image_size;
        elsif (((grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            s_5_TDATA_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TDATA;
        else 
            s_5_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_5_TVALID <= regslice_both_s_5_U_vld_out;

    s_5_TVALID_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TVALID, ap_CS_fsm_state4, ap_block_state1_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_5_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_5_TVALID_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_5_TVALID;
        else 
            s_5_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_6_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, s_6_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            s_6_TDATA_blk_n <= s_6_TREADY_int_regslice;
        else 
            s_6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_6_TDATA_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_size, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TDATA, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TVALID, ap_CS_fsm_state4, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_6_TDATA_int_regslice <= image_size;
        elsif (((grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            s_6_TDATA_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TDATA;
        else 
            s_6_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_6_TVALID <= regslice_both_s_6_U_vld_out;

    s_6_TVALID_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TVALID, ap_CS_fsm_state4, ap_block_state1_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_6_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_6_TVALID_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_6_TVALID;
        else 
            s_6_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    s_7_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, s_7_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            s_7_TDATA_blk_n <= s_7_TREADY_int_regslice;
        else 
            s_7_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_7_TDATA_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_size, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TDATA, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TVALID, ap_CS_fsm_state4, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_7_TDATA_int_regslice <= image_size;
        elsif (((grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            s_7_TDATA_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TDATA;
        else 
            s_7_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_7_TVALID <= regslice_both_s_7_U_vld_out;

    s_7_TVALID_int_regslice_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TVALID, ap_CS_fsm_state4, ap_block_state1_io, s_0_TREADY_int_regslice, s_1_TREADY_int_regslice, s_2_TREADY_int_regslice, s_3_TREADY_int_regslice, s_4_TREADY_int_regslice, s_5_TREADY_int_regslice, s_6_TREADY_int_regslice, s_7_TREADY_int_regslice)
    begin
        if ((not(((s_7_TREADY_int_regslice = ap_const_logic_0) or (s_6_TREADY_int_regslice = ap_const_logic_0) or (s_5_TREADY_int_regslice = ap_const_logic_0) or (s_4_TREADY_int_regslice = ap_const_logic_0) or (s_3_TREADY_int_regslice = ap_const_logic_0) or (s_2_TREADY_int_regslice = ap_const_logic_0) or (s_1_TREADY_int_regslice = ap_const_logic_0) or (s_0_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_7_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_7_TVALID_int_regslice <= grp_setup_joint_aie_Pipeline_VITIS_LOOP_68_1_fu_156_s_7_TVALID;
        else 
            s_7_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_1) and (ap_ext_blocking_n = ap_const_logic_0))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_1) and (ap_int_blocking_n = ap_const_logic_0))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_1) and (ap_str_blocking_n = ap_const_logic_0))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

end behav;
