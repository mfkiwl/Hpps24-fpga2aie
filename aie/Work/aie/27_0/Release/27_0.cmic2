
// File generated by darts version R-2021.03#6beb14dd34#220609, Fri May 31 12:54:33 2024
// Copyright 2014-2021 Synopsys, Inc. All rights reserved.
// darts -v -I/home/xilinx/software/Vitis/2022.2/aietools/data/versal_prod/lib -d -h -I/home/xilinx/software/Vitis/2022.2/aietools/include -I../common -I/home/users/francesco.santambrogio/Downloads/Hpps24-fpga2aie/aie/. -I/home/users/francesco.santambrogio/Downloads/Hpps24-fpga2aie/aie/./src -I/home/users/francesco.santambrogio/Downloads/Hpps24-fpga2aie/aie/../common -I/home/users/francesco.santambrogio/Downloads/Hpps24-fpga2aie/aie/src -Isrc -I/home/xilinx/software/Vitis/2022.2/aietools/data/versal_prod/lib/runtime_cxx/libcxx-lite/include -I/home/xilinx/software/Vitis/2022.2/aietools/data/versal_prod/lib/runtime_cxx/libs/libcxx-9.0.0/include-lite -I/home/xilinx/software/Vitis/2022.2/aietools/data/versal_prod/lib/runtime/include -D__AIENGINE__ -D__AIEARCH__=10 -DDEPLOYMENT_ELF=1 -DAIE_OPTION_SCALAR_FLOAT_ON_VECTOR -D__tct_tgt__=220608 -L +Ihex +nanno +u ../Release/27_0 me

// Release: ipp R-2021.03-TGT-220608
.label __AIE_ARCH_MODEL_VERSION__10022200__inlined__1__me_basic___main_init_
.label _main_init
.function _main_init _main_init
.src_ref 0 "me_basic.c" 87 first
.src_ref 0 "me_basic.c" 94 4 first
.function_start
	     0      "00001011" // 	NOP;                                                                                                MOV.u20 sp, #196640 /* MW 4 */
	     1      "00000010" // /* MW 3 */
	     2      "01100100" // /* MW 2 */
	     3      "01001100" // /* MW 1 */
.src_ref 0 "me_basic.c" 88 first
	     4      "00000011" // 	NOP;                                                                  MOV.s12 r12, #0 /* MW 4 */
	     5      "11000000" // /* MW 3 */
	     6      "00000011" // /* MW 2 */
	     7      "01000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 89 first
	     8      "00100001" // 	MOV mc0, r12 /* MW 2 */
	     9      "11001010" // /* MW 1 */
.src_ref 0 "me_basic.c" 90 first
	    10      "01100001" // 	MOV mc1, r12 /* MW 2 */
	    11      "11001010" // /* MW 1 */
	    12      "11110111" // 	                                        NOP;                                                        MOV.u20 p6, #200736;          NOP /* MW 8 */
	    13      "00000111" // /* MW 7 */
	    14      "00000010" // /* MW 6 */
	    15      "10111001" // /* MW 5 */
	    16      "01001100" // /* MW 4 */
	    17      "00000000" // /* MW 3 */
	    18      "00000000" // /* MW 2 */
	    19      "10000000" // /* MW 1 */
	    20      "11110111" // 	                                        NOP;                                                        J #112;                       NOP /* MW 8 */
	    21      "00000111" // /* MW 7 */
	    22      "00000111" // /* MW 6 */
	    23      "00000000" // /* MW 5 */
	    24      "10100000" // /* MW 4 */
	    25      "00000000" // /* MW 3 */
	    26      "00000000" // /* MW 2 */
	    27      "10000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 69 41
.delay_slot
	    28      "11110111" // 	                                        NOP;                                                        MOV.u20 r11, #200736;         NOP /* MW 8 */
	    29      "00000111" // /* MW 7 */
	    30      "00000010" // /* MW 6 */
	    31      "11101101" // /* MW 5 */
	    32      "01001100" // /* MW 4 */
	    33      "00000000" // /* MW 3 */
	    34      "00000000" // /* MW 2 */
	    35      "10000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 104 11
.delay_slot
	    36      "11110101" // 	MOV p7, p0 /* MW 2 */
	    37      "10100010" // /* MW 1 */
.src_ref 0 "me_basic.c" 96 6
.src_ref 0 "me_basic.c" 97 6
.src_ref 0 "me_basic.c" 104 11
.delay_slot
	    38      "01110111" // 	NOP;                                                                  MOV.s12 r12, #0;              MOV r10, r6 /* MW 8 */
	    39      "01111000" // /* MW 7 */
	    40      "00000000" // /* MW 6 */
	    41      "10001000" // /* MW 5 */
	    42      "01101110" // /* MW 4 */
	    43      "00000111" // /* MW 3 */
	    44      "00000000" // /* MW 2 */
	    45      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 96 6 first
.delay_slot
	    46      "00100001" // 	MOV md0, r12 /* MW 2 */
	    47      "11001011" // /* MW 1 */
.src_ref 0 "me_basic.c" 97 6 first
.delay_slot
	    48      "00000010" // 	NOP;                NOP;                NOP;                          NOP;                          MOV md1, r12;                 NOP;                                    NOP /* MW 16 */
	    49      "00000000" // /* MW 15 */
	    50      "00000000" // /* MW 14 */
	    51      "00000000" // /* MW 13 */
	    52      "00000000" // /* MW 12 */
	    53      "00000000" // /* MW 11 */
	    54      "01000000" // /* MW 10 */
	    55      "11001011" // /* MW 9 */
	    56      "00000010" // /* MW 8 */
	    57      "00000000" // /* MW 7 */
	    58      "00000000" // /* MW 6 */
	    59      "00000000" // /* MW 5 */
	    60      "00000000" // /* MW 4 */
	    61      "00000000" // /* MW 3 */
	    62      "00000000" // /* MW 2 */
	    63      "00000000" // /* MW 1 */
.label TGT_F_main_init_64
.src_ref 0 "me_basic.c" 70 13 first
.loop_nesting 1
	    64      "00110111" // 	LDA cb0, [p6], #-4;                     NOP;                          NOP /* MW 8 */
	    65      "00000000" // /* MW 7 */
	    66      "00000000" // /* MW 6 */
	    67      "00000000" // /* MW 5 */
	    68      "00000000" // /* MW 4 */
	    69      "10000000" // /* MW 3 */
	    70      "10111111" // /* MW 2 */
	    71      "01000000" // /* MW 1 */
	    72      "00000001" // 	NOP /* MW 2 */
	    73      "00000000" // /* MW 1 */
	    74      "00000001" // 	NOP /* MW 2 */
	    75      "00000000" // /* MW 1 */
	    76      "00000001" // 	NOP /* MW 2 */
	    77      "00000000" // /* MW 1 */
	    78      "00000001" // 	NOP /* MW 2 */
	    79      "00000000" // /* MW 1 */
	    80      "00000001" // 	NOP /* MW 2 */
	    81      "00000000" // /* MW 1 */
	    82      "00000001" // 	NOP /* MW 2 */
	    83      "00000000" // /* MW 1 */
	    84      "00000001" // 	NOP /* MW 2 */
	    85      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 70 16
.no_stack_arguments
	    86      "01000001" // 	JAL cb0 /* MW 2 */
	    87      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	    88      "00000001" // 	NOP /* MW 2 */
	    89      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	    90      "00000001" // 	NOP /* MW 2 */
	    91      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	    92      "00000001" // 	NOP /* MW 2 */
	    93      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	    94      "00000001" // 	NOP /* MW 2 */
	    95      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	    96      "00000010" // 	NOP;                NOP;                NOP;                          NOP;                          NOP;                          NOP;                                    NOP /* MW 16 */
	    97      "00000000" // /* MW 15 */
	    98      "00000000" // /* MW 14 */
	    99      "00000000" // /* MW 13 */
	   100      "00000000" // /* MW 12 */
	   101      "00000000" // /* MW 11 */
	   102      "00000000" // /* MW 10 */
	   103      "00000000" // /* MW 9 */
	   104      "00000000" // /* MW 8 */
	   105      "00000000" // /* MW 7 */
	   106      "00000000" // /* MW 6 */
	   107      "00000000" // /* MW 5 */
	   108      "00000000" // /* MW 4 */
	   109      "00000000" // /* MW 3 */
	   110      "00000000" // /* MW 2 */
	   111      "00000000" // /* MW 1 */
.label __ll1__main_init
.return_address
	   112      "00110111" // 	PADDA [p6], #4;                         NOP;                          NOP /* MW 8 */
	   113      "00000000" // /* MW 7 */
	   114      "00000000" // /* MW 6 */
	   115      "00000000" // /* MW 5 */
	   116      "00000000" // /* MW 4 */
	   117      "10000000" // /* MW 3 */
	   118      "10100011" // /* MW 2 */
	   119      "00001000" // /* MW 1 */
	   120      "00000001" // 	NOP /* MW 2 */
	   121      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 69 41
	   122      "11000101" // 	MOV r12, p6 /* MW 2 */
	   123      "10111011" // /* MW 1 */
.src_ref 0 "me_basic.c" 69 41 first
	   124      "00000011" // 	NOP;                                                                  NE r12, r12, r11 /* MW 4 */
	   125      "11000000" // /* MW 3 */
	   126      "10111100" // /* MW 2 */
	   127      "00111001" // /* MW 1 */
.src_ref 0 "me_basic.c" 69 8
	   128      "11110111" // 	                                        NOP;                                                        BNEZ r12,#64;                 NOP /* MW 8 */
	   129      "00000111" // /* MW 7 */
	   130      "00000100" // /* MW 6 */
	   131      "10000000" // /* MW 5 */
	   132      "10010001" // /* MW 4 */
	   133      "00000000" // /* MW 3 */
	   134      "00000000" // /* MW 2 */
	   135      "10000000" // /* MW 1 */
.delay_slot
	   136      "00000011" // 	NOP;                                    PADDS [p6], #-4 /* MW 4 */
	   137      "11110000" // /* MW 3 */
	   138      "00010111" // /* MW 2 */
	   139      "10100000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   140      "00000001" // 	NOP /* MW 2 */
	   141      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   142      "00000001" // 	NOP /* MW 2 */
	   143      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   144      "00000001" // 	NOP /* MW 2 */
	   145      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   146      "00000001" // 	NOP /* MW 2 */
	   147      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 104 11 first
.no_stack_arguments
.loop_nesting 0
	   148      "11110111" // 	                                        NOP;                                                        JAL #272;                     NOP /* MW 8 */
	   149      "00000111" // /* MW 7 */
	   150      "00010001" // /* MW 6 */
	   151      "00100000" // /* MW 5 */
	   152      "10100000" // /* MW 4 */
	   153      "00000000" // /* MW 3 */
	   154      "00000000" // /* MW 2 */
	   155      "10000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 104 11
.delay_slot
	   156      "01100101" // 	MOV r6, r10 /* MW 2 */
	   157      "11101011" // /* MW 1 */
.src_ref 0 "me_basic.c" 104 11
.delay_slot
	   158      "10000101" // 	MOV p0, p7 /* MW 2 */
	   159      "10111110" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   160      "00000001" // 	NOP /* MW 2 */
	   161      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   162      "00000001" // 	NOP /* MW 2 */
	   163      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   164      "00011111" // 	NOP;                NOP;                NOP;                          NOP;                          NOP /* MW 12 */
	   165      "00000000" // /* MW 11 */
	   166      "00000000" // /* MW 10 */
	   167      "00000000" // /* MW 9 */
	   168      "00000000" // /* MW 8 */
	   169      "00000000" // /* MW 7 */
	   170      "00000000" // /* MW 6 */
	   171      "00000000" // /* MW 5 */
	   172      "00000000" // /* MW 4 */
	   173      "00000000" // /* MW 3 */
	   174      "00000000" // /* MW 2 */
	   175      "00000000" // /* MW 1 */
.src_ref 1 "stdlib.h" 76 4 first
.return_address
.no_stack_arguments
	   176      "11110111" // 	                                        NOP;                                                        JAL #2640;                    NOP /* MW 8 */
	   177      "00000111" // /* MW 7 */
	   178      "10100101" // /* MW 6 */
	   179      "00100000" // /* MW 5 */
	   180      "10100000" // /* MW 4 */
	   181      "00000000" // /* MW 3 */
	   182      "00000000" // /* MW 2 */
	   183      "10000000" // /* MW 1 */
.src_ref 1 "stdlib.h" 76 4
.delay_slot
	   184      "11110111" // 	                                        NOP;                                                        MOV.u20 p0, #0;               NOP /* MW 8 */
	   185      "00000111" // /* MW 7 */
	   186      "00000000" // /* MW 6 */
	   187      "10100000" // /* MW 5 */
	   188      "01000000" // /* MW 4 */
	   189      "00000000" // /* MW 3 */
	   190      "00000000" // /* MW 2 */
	   191      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   192      "00000001" // 	NOP /* MW 2 */
	   193      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   194      "00000001" // 	NOP /* MW 2 */
	   195      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   196      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	   197      "00000000" // /* MW 3 */
	   198      "00000000" // /* MW 2 */
	   199      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   200      "00110111" // 	NOP;                                    NOP;                          NOP /* MW 8 */
	   201      "00000000" // /* MW 7 */
	   202      "00000000" // /* MW 6 */
	   203      "00000000" // /* MW 5 */
	   204      "00000000" // /* MW 4 */
	   205      "00000000" // /* MW 3 */
	   206      "00000000" // /* MW 2 */
	   207      "00000000" // /* MW 1 */
.return_address
.swstall chess_separator_scheduler
	   208      "00000001" // 	NOP /* MW 2 */
	   209      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   210      "00000001" // 	NOP /* MW 2 */
	   211      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   212      "00000001" // 	NOP /* MW 2 */
	   213      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   214      "00000001" // 	NOP /* MW 2 */
	   215      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   216      "00000001" // 	NOP /* MW 2 */
	   217      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   218      "00000001" // 	NOP /* MW 2 */
	   219      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   220      "00000001" // 	NOP /* MW 2 */
	   221      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   222      "00000001" // 	NOP /* MW 2 */
	   223      "00000000" // /* MW 1 */
.src_ref 1 "stdlib.h" 61 4 first
	   224      "00000011" // 	NOP;                                                                  EVENT #2 /* MW 4 */
	   225      "00100000" // /* MW 3 */
	   226      "00000000" // /* MW 2 */
	   227      "00000100" // /* MW 1 */
.swstall chess_separator_scheduler
	   228      "00000001" // 	NOP /* MW 2 */
	   229      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   230      "00000001" // 	NOP /* MW 2 */
	   231      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   232      "00000001" // 	NOP /* MW 2 */
	   233      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   234      "00000001" // 	NOP /* MW 2 */
	   235      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	   236      "00000001" // 	NOP /* MW 2 */
	   237      "00000000" // /* MW 1 */
.src_ref 1 "stdlib.h" 62 4 first
.swstall for_chess_exit
.exit
	   238      "00000001" // 	NOP /* MW 2 */
	   239      "00000000" // /* MW 1 */
.label TGT_F_main_init_240
.src_ref 1 "stdlib.h" 63 4 first
.loop_nesting 1
	   240      "11110111" // 	                                        NOP;                                                        J #240;                       NOP /* MW 8 */
	   241      "00000111" // /* MW 7 */
	   242      "00001111" // /* MW 6 */
	   243      "00000000" // /* MW 5 */
	   244      "10100000" // /* MW 4 */
	   245      "00000000" // /* MW 3 */
	   246      "00000000" // /* MW 2 */
	   247      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   248      "00000001" // 	NOP /* MW 2 */
	   249      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   250      "00000001" // 	NOP /* MW 2 */
	   251      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   252      "00000001" // 	NOP /* MW 2 */
	   253      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   254      "00000001" // 	NOP /* MW 2 */
	   255      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   256      "00000001" // 	NOP /* MW 2 */
.label _main_init__end
	   257      "00000000" // /* MW 1 */
.label _main___func_begin0
.label _main
.function main
.src_ref 2 "27_0.cc" 26
.src_ref 2 "27_0.cc" 26 first
.function_start
	   272      "00011111" // 	MOV.s10 r6, #24;    MOV.s9 r13, #127;   NOP;                          MOV.s12 m0, #448;             MOV p0, p7 /* MW 12 */
	   273      "11111010" // /* MW 11 */
	   274      "00000110" // /* MW 10 */
	   275      "00001000" // /* MW 9 */
	   276      "00011100" // /* MW 8 */
	   277      "00000001" // /* MW 7 */
	   278      "00000000" // /* MW 6 */
	   279      "11100000" // /* MW 5 */
	   280      "11001111" // /* MW 4 */
	   281      "00011101" // /* MW 3 */
	   282      "00000110" // /* MW 2 */
	   283      "00111110" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 2 "27_0.cc" 26
.src_ref 2 "27_0.cc" 27 17
	   284      "01011111" // 	PADDA [sp], m0;     MOV.s9 r12, #0;     NOP;                          MOV.s12 r13, #1;              VSHL0.32 xa, r13 /* MW 12 */
	   285      "11010000" // /* MW 11 */
	   286      "01101001" // /* MW 10 */
	   287      "00011111" // /* MW 9 */
	   288      "00000000" // /* MW 8 */
	   289      "00000001" // /* MW 7 */
	   290      "00000000" // /* MW 6 */
	   291      "00000000" // /* MW 5 */
	   292      "11000000" // /* MW 4 */
	   293      "00011100" // /* MW 3 */
	   294      "10010000" // /* MW 2 */
	   295      "00001000" // /* MW 1 */
.src_ref 4 "stream_utils.h" 122 15
.src_ref 4 "stream_utils.h" 122 15
.src_ref 2 "27_0.cc" 27 17
	   296      "00111111" // 	MOV.s10 r7, #0;     NOP;                                              ADD.NRM s1, r6, #0;           MOV.u20 p7, #196608;          NOP /* MW 12 */
	   297      "00000000" // /* MW 11 */
	   298      "11000000" // /* MW 10 */
	   299      "11001011" // /* MW 9 */
	   300      "00000100" // /* MW 8 */
	   301      "11000010" // /* MW 7 */
	   302      "00000000" // /* MW 6 */
	   303      "00000101" // /* MW 5 */
	   304      "00000000" // /* MW 4 */
	   305      "00000000" // /* MW 3 */
	   306      "00000000" // /* MW 2 */
	   307      "00111111" // /* MW 1 */
.src_ref 4 "stream_utils.h" 122 15
.src_ref 4 "stream_utils.h" 122 15
.src_ref 2 "27_0.cc" 27 17 first
	   308      "11110111" // 	                                        ST r12, [p7], #4;             ADD.NRM s3, r13, #0;          MOV md0[8], r7[0] /* MW 8 */
	   309      "11011000" // /* MW 7 */
	   310      "00100011" // /* MW 6 */
	   311      "10100111" // /* MW 5 */
	   312      "00000001" // /* MW 4 */
	   313      "11110101" // /* MW 3 */
	   314      "00101000" // /* MW 2 */
	   315      "01011111" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
	   316      "11110111" // 	                                        ST p6, [sp, #-40];            ADD.NRM s2, r12, #0;          MOV r12, s3 /* MW 8 */
	   317      "10111000" // /* MW 7 */
	   318      "00010001" // /* MW 6 */
	   319      "10000101" // /* MW 5 */
	   320      "00000001" // /* MW 4 */
	   321      "01100101" // /* MW 3 */
	   322      "10111111" // /* MW 2 */
	   323      "01011011" // /* MW 1 */
	   324      "11110111" // 	                                        ST r12, [sp, #-52];           NOP;                          MOV r12, s1 /* MW 8 */
	   325      "10111000" // /* MW 7 */
	   326      "00010000" // /* MW 6 */
	   327      "00000001" // /* MW 5 */
	   328      "00000000" // /* MW 4 */
	   329      "00110000" // /* MW 3 */
	   330      "00111111" // /* MW 2 */
	   331      "01011111" // /* MW 1 */
.src_ref 2 "27_0.cc" 27 17
	   332      "11110111" // 	                                        VST wr0, [sp, #-128];                                       MOV.u20 p6, #200992;          NOP /* MW 8 */
	   333      "00000111" // /* MW 7 */
	   334      "00010010" // /* MW 6 */
	   335      "10111001" // /* MW 5 */
	   336      "01001100" // /* MW 4 */
	   337      "11100000" // /* MW 3 */
	   338      "00011111" // /* MW 2 */
	   339      "10111010" // /* MW 1 */
.src_ref 2 "27_0.cc" 27 17 first
.noswbrkpt
	   340      "00111111" // 	VLDA wr0, [p6];     NOP;                ST r10, [sp, #-48];                                         MOV.u20 ch0, #638976;         NOP /* MW 12 */
	   341      "00000000" // /* MW 11 */
	   342      "00000000" // /* MW 10 */
	   343      "01110000" // /* MW 9 */
	   344      "00000110" // /* MW 8 */
	   345      "11110100" // /* MW 7 */
	   346      "11101011" // /* MW 6 */
	   347      "00010101" // /* MW 5 */
	   348      "00000000" // /* MW 4 */
	   349      "10000000" // /* MW 3 */
	   350      "11010001" // /* MW 2 */
	   351      "00000010" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	   352      "11110111" // 	                                        ST r12, [sp, #-56];                                         MOV.u20 ch6, #114688;         NOP /* MW 8 */
	   353      "00000111" // /* MW 7 */
	   354      "00000000" // /* MW 6 */
	   355      "00011000" // /* MW 5 */
	   356      "01000111" // /* MW 4 */
	   357      "10010000" // /* MW 3 */
	   358      "10011111" // /* MW 2 */
	   359      "10101111" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	   360      "11110111" // 	                                        VST wr1, [sp, #-160];                                       MOV.u20 ch5, #0;              NOP /* MW 8 */
	   361      "00000111" // /* MW 7 */
	   362      "00000000" // /* MW 6 */
	   363      "00010100" // /* MW 5 */
	   364      "01000000" // /* MW 4 */
	   365      "11011000" // /* MW 3 */
	   366      "01011111" // /* MW 2 */
	   367      "10111010" // /* MW 1 */
	   368      "11110111" // 	                                        ST r11, [sp, #-44];                                         MOV.u20 ch4, #0;              NOP /* MW 8 */
	   369      "00000111" // /* MW 7 */
	   370      "00000000" // /* MW 6 */
	   371      "00010000" // /* MW 5 */
	   372      "01000000" // /* MW 4 */
	   373      "10101000" // /* MW 3 */
	   374      "01111111" // /* MW 2 */
	   375      "10101111" // /* MW 1 */
	   376      "11110111" // 	                                        ST lr, [sp, #-12];                                          MOV.u20 ch2, #834200;         NOP /* MW 8 */
	   377      "10000111" // /* MW 7 */
	   378      "10101001" // /* MW 6 */
	   379      "00001011" // /* MW 5 */
	   380      "01110010" // /* MW 4 */
	   381      "11101000" // /* MW 3 */
	   382      "00011111" // /* MW 2 */
	   383      "10101001" // /* MW 1 */
	   384      "11110111" // 	                                        ST r4, [sp, #-32];                                          MOV.u20 ch7, #274960;         NOP /* MW 8 */
	   385      "00000111" // /* MW 7 */
	   386      "00100001" // /* MW 6 */
	   387      "00011111" // /* MW 5 */
	   388      "01010000" // /* MW 4 */
	   389      "11000000" // /* MW 3 */
	   390      "10011111" // /* MW 2 */
	   391      "10101110" // /* MW 1 */
	   392      "11110111" // 	                                        ST p0, [sp, #-36];                                          MOV.u20 r6, #0;               NOP /* MW 8 */
	   393      "00000111" // /* MW 7 */
	   394      "00000000" // /* MW 6 */
	   395      "11011000" // /* MW 5 */
	   396      "01000000" // /* MW 4 */
	   397      "10111000" // /* MW 3 */
	   398      "00011111" // /* MW 2 */
	   399      "10101101" // /* MW 1 */
	   400      "11110111" // 	                                        VST wr0, [sp, #-96];                                        MOVT.s12 ch0, #1;             NOP /* MW 8 */
	   401      "00010111" // /* MW 7 */
	   402      "00000000" // /* MW 6 */
	   403      "00000000" // /* MW 5 */
	   404      "00000001" // /* MW 4 */
	   405      "11101000" // /* MW 3 */
	   406      "00011111" // /* MW 2 */
	   407      "10111010" // /* MW 1 */
	   408      "11110111" // 	                                        ST ch0, [sp, #-28];                                         MOV.u20 r10, #1048575;        NOP /* MW 8 */
	   409      "11110111" // /* MW 7 */
	   410      "11111111" // /* MW 6 */
	   411      "11101011" // /* MW 5 */
	   412      "01111111" // /* MW 4 */
	   413      "11001000" // /* MW 3 */
	   414      "00011111" // /* MW 2 */
	   415      "10101010" // /* MW 1 */
	   416      "11110111" // 	                                        NOP;                                                        MOVT.s12 ch6, #25;            NOP /* MW 8 */
	   417      "10010111" // /* MW 7 */
	   418      "00000001" // /* MW 6 */
	   419      "00011000" // /* MW 5 */
	   420      "00000001" // /* MW 4 */
	   421      "00000000" // /* MW 3 */
	   422      "00000000" // /* MW 2 */
	   423      "10000000" // /* MW 1 */
	   424      "11110111" // 	                                        ST ch6, [sp, #-24];                                         MOVT.s12 r6, #1016;           NOP /* MW 8 */
	   425      "10000111" // /* MW 7 */
	   426      "00111111" // /* MW 6 */
	   427      "01011000" // /* MW 5 */
	   428      "00000001" // /* MW 4 */
	   429      "11010000" // /* MW 3 */
	   430      "11011111" // /* MW 2 */
	   431      "10101010" // /* MW 1 */
	   432      "11110111" // 	                                        NOP;                                                        MOVT.s12 ch5, #11;            NOP /* MW 8 */
	   433      "10110111" // /* MW 7 */
	   434      "00000000" // /* MW 6 */
	   435      "00010100" // /* MW 5 */
	   436      "00000001" // /* MW 4 */
	   437      "00000000" // /* MW 3 */
	   438      "00000000" // /* MW 2 */
	   439      "10000000" // /* MW 1 */
	   440      "11110111" // 	                                        ST ch5, [sp, #-20];           NOP;                          MOV r12, s2 /* MW 8 */
	   441      "00111000" // /* MW 7 */
	   442      "00010001" // /* MW 6 */
	   443      "00000001" // /* MW 5 */
	   444      "00000000" // /* MW 4 */
	   445      "10110000" // /* MW 3 */
	   446      "01111111" // /* MW 2 */
	   447      "01010101" // /* MW 1 */
	   448      "11110111" // 	                                        ST r12, [sp, #-60];                                         MOVT.s12 ch4, #9;             NOP /* MW 8 */
	   449      "10010111" // /* MW 7 */
	   450      "00000000" // /* MW 6 */
	   451      "00010000" // /* MW 5 */
	   452      "00000001" // /* MW 4 */
	   453      "10001000" // /* MW 3 */
	   454      "10011111" // /* MW 2 */
	   455      "10101111" // /* MW 1 */
	   456      "11110111" // 	                                        NOP;                                                        MOVT.s12 ch2, #-19;           NOP /* MW 8 */
	   457      "11010111" // /* MW 7 */
	   458      "11111110" // /* MW 6 */
	   459      "00001000" // /* MW 5 */
	   460      "00000001" // /* MW 4 */
	   461      "00000000" // /* MW 3 */
	   462      "00000000" // /* MW 2 */
	   463      "10000000" // /* MW 1 */
	   464      "11110111" // 	                                        NOP;                                                        MOVT.s12 ch7, #1893;          NOP /* MW 8 */
	   465      "01010111" // /* MW 7 */
	   466      "01110110" // /* MW 6 */
	   467      "00011100" // /* MW 5 */
	   468      "00000001" // /* MW 4 */
	   469      "00000000" // /* MW 3 */
	   470      "00000000" // /* MW 2 */
	   471      "10000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 67 35
.src_ref 6 "vector.hpp" 543 24
.src_ref 6 "vector.hpp" 543 24
.src_ref 6 "vector.hpp" 543 24
.src_ref 6 "vector.hpp" 543 24
.src_ref 6 "vector.hpp" 543 24
.src_ref 6 "vector.hpp" 543 24
.src_ref 6 "vector.hpp" 543 24
.src_ref 6 "vector.hpp" 543 24
	   472      "11110111" // 	                                        ST ch7, [sp, #-4];            NOP;                          MOV r11, r6 /* MW 8 */
	   473      "01110110" // /* MW 7 */
	   474      "00111011" // /* MW 6 */
	   475      "00000000" // /* MW 5 */
	   476      "00000000" // /* MW 4 */
	   477      "11110000" // /* MW 3 */
	   478      "11111111" // /* MW 2 */
	   479      "01010101" // /* MW 1 */
	   480      "11110111" // 	                                        ST ch2, [sp, #-8];                                          MOVT.s12 r10, #7;             NOP /* MW 8 */
	   481      "01110111" // /* MW 7 */
	   482      "00000000" // /* MW 6 */
	   483      "01101000" // /* MW 5 */
	   484      "00000001" // /* MW 4 */
	   485      "11110000" // /* MW 3 */
	   486      "01011111" // /* MW 2 */
	   487      "10101010" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 69 4 first
	   488      "11110111" // 	                                        ST ch4, [sp, #-16];                                         MOV.u20 le, #1888;            NOP /* MW 8 */
	   489      "00000111" // /* MW 7 */
	   490      "01110110" // /* MW 6 */
	   491      "01101100" // /* MW 5 */
	   492      "01000000" // /* MW 4 */
	   493      "11100000" // /* MW 3 */
	   494      "10011111" // /* MW 2 */
	   495      "10101010" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 69 4
	   496      "00000000" // 	NOP;                NOP;                NOP;                          NOP;                          MOV.u20 ls, #1280;            NOP;                                    NOP /* MW 16 */
	   497      "00000000" // /* MW 15 */
	   498      "00000000" // /* MW 14 */
	   499      "00000000" // /* MW 13 */
	   500      "10000000" // /* MW 12 */
	   501      "00000000" // /* MW 11 */
	   502      "00000101" // /* MW 10 */
	   503      "00000110" // /* MW 9 */
	   504      "00000100" // /* MW 8 */
	   505      "00000000" // /* MW 7 */
	   506      "00000000" // /* MW 6 */
	   507      "00010000" // /* MW 5 */
	   508      "00000000" // /* MW 4 */
	   509      "00000000" // /* MW 3 */
	   510      "00000000" // /* MW 2 */
	   511      "00000000" // /* MW 1 */
.label TGT_F_main_240
.src_ref 2 "27_0.cc" 34 27 first
.loop_nesting 1
	   512      "00110111" // 	LDA r4, [p7], #-4;                      NOP;                          NOP /* MW 8 */
	   513      "00000000" // /* MW 7 */
	   514      "00000000" // /* MW 6 */
	   515      "00000000" // /* MW 5 */
	   516      "00000000" // /* MW 4 */
	   517      "11000000" // /* MW 3 */
	   518      "10111111" // /* MW 2 */
	   519      "01110100" // /* MW 1 */
	   520      "00000001" // 	NOP /* MW 2 */
	   521      "00000000" // /* MW 1 */
	   522      "00000001" // 	NOP /* MW 2 */
	   523      "00000000" // /* MW 1 */
	   524      "00000001" // 	NOP /* MW 2 */
	   525      "00000000" // /* MW 1 */
	   526      "00000001" // 	NOP /* MW 2 */
	   527      "00000000" // /* MW 1 */
	   528      "00000001" // 	NOP /* MW 2 */
	   529      "00000000" // /* MW 1 */
	   530      "00000001" // 	NOP /* MW 2 */
	   531      "00000000" // /* MW 1 */
	   532      "00000001" // 	NOP /* MW 2 */
	   533      "00000000" // /* MW 1 */
.src_ref 2 "27_0.cc" 36 2 first
.src_ref 2 "27_0.cc" 36 9 first
	   534      "11110111" // 	                                        NOP;                                                        BEQZ r4,#2016;                NOP /* MW 8 */
	   535      "00000111" // /* MW 7 */
	   536      "01111110" // /* MW 6 */
	   537      "10000000" // /* MW 5 */
	   538      "10000000" // /* MW 4 */
	   539      "00000000" // /* MW 3 */
	   540      "00000000" // /* MW 2 */
	   541      "10000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 1041 35
.delay_slot
	   542      "11110111" // 	                                        NOP;                                                        MOV.u20 p6, #200928;          NOP /* MW 8 */
	   543      "00000111" // /* MW 7 */
	   544      "00001110" // /* MW 6 */
	   545      "10111001" // /* MW 5 */
	   546      "01001100" // /* MW 4 */
	   547      "00000000" // /* MW 3 */
	   548      "00000000" // /* MW 2 */
	   549      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   550      "00000001" // 	NOP /* MW 2 */
	   551      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   552      "00000001" // 	NOP /* MW 2 */
	   553      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   554      "00000001" // 	NOP /* MW 2 */
	   555      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   556      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	   557      "00000000" // /* MW 3 */
	   558      "00000000" // /* MW 2 */
	   559      "00000000" // /* MW 1 */
.label TGT_F_main_288
.src_ref 5 "entropy_vect.cpp" 67 35 first
.no_stack_arguments
.loop_nesting 2
	   560      "11110111" // 	                                        NOP;                                                        JAL #2800;                    NOP /* MW 8 */
	   561      "00000111" // /* MW 7 */
	   562      "10101111" // /* MW 6 */
	   563      "00100000" // /* MW 5 */
	   564      "10100000" // /* MW 4 */
	   565      "00000000" // /* MW 3 */
	   566      "00000000" // /* MW 2 */
	   567      "10000000" // /* MW 1 */
.src_ref 4 "stream_utils.h" 122 15 first
.src_ref 4 "stream_utils.h" 122 15 first
.delay_slot
	   568      "00000011" // 	NOP;                                                                                                MOV0 r12, SS.md0[ 8] /* MW 4 */
	   569      "00011000" // /* MW 3 */
	   570      "00011110" // /* MW 2 */
	   571      "00000001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 66 21 first
.delay_slot
	   572      "00000011" // 	NOP;                                                                  MOV r7, r12.FX2FLT, s2 /* MW 4 */
	   573      "01110000" // /* MW 3 */
	   574      "00001100" // /* MW 2 */
	   575      "00001100" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   576      "00000001" // 	NOP /* MW 2 */
	   577      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   578      "00000001" // 	NOP /* MW 2 */
	   579      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   580      "00011111" // 	NOP;                NOP;                NOP;                          NOP;                          NOP /* MW 12 */
	   581      "00000000" // /* MW 11 */
	   582      "00000000" // /* MW 10 */
	   583      "00000000" // /* MW 9 */
	   584      "00000000" // /* MW 8 */
	   585      "00000000" // /* MW 7 */
	   586      "00000000" // /* MW 6 */
	   587      "00000000" // /* MW 5 */
	   588      "00000000" // /* MW 4 */
	   589      "00000000" // /* MW 3 */
	   590      "00000000" // /* MW 2 */
	   591      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 76 10
.src_ref 5 "entropy_vect.cpp" 249 11
.src_ref 4 "stream_utils.h" 122 15
.src_ref 4 "stream_utils.h" 122 15
.src_ref 4 "stream_utils.h" 180 15
.src_ref 4 "stream_utils.h" 180 15
.src_ref 3 "add.hpp" 300 53
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "vector.hpp" 908 31
.src_ref 3 "vector.hpp" 908 31
.src_ref 3 "vector.hpp" 1041 35 first
.return_address
	   592      "00111111" // 	LDA cl3, [sp, #-24];VLDB wr3, [p6], #32;                              MOV.s12 r5, #0;               MOV.u20 cl0, #0;              NOP /* MW 12 */
	   593      "00000000" // /* MW 11 */
	   594      "00000000" // /* MW 10 */
	   595      "00000010" // /* MW 9 */
	   596      "00000100" // /* MW 8 */
	   597      "01101010" // /* MW 7 */
	   598      "00000000" // /* MW 6 */
	   599      "11001000" // /* MW 5 */
	   600      "01010001" // /* MW 4 */
	   601      "10000111" // /* MW 3 */
	   602      "11111110" // /* MW 2 */
	   603      "01011011" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 66 21
.src_ref 5 "entropy_vect.cpp" 74 14
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 249 11
.src_ref 4 "stream_utils.h" 122 15
.src_ref 4 "stream_utils.h" 122 15
.src_ref 4 "stream_utils.h" 180 15
.src_ref 4 "stream_utils.h" 180 15
.src_ref 3 "add.hpp" 300 53
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "vector.hpp" 908 31
.src_ref 3 "vector.hpp" 908 31
.src_ref 3 "vector.hpp" 1041 35
	   604      "00011111" // 	LDA r13, [sp, #-60];VLDB wr0, [p6], #-64;NOP;                         MOV.s12 r6, #0;               MOV md0[8], r5[0] /* MW 12 */
	   605      "01011011" // /* MW 11 */
	   606      "10100100" // /* MW 10 */
	   607      "00001101" // /* MW 9 */
	   608      "00000000" // /* MW 8 */
	   609      "00000001" // /* MW 7 */
	   610      "00000000" // /* MW 6 */
	   611      "11000000" // /* MW 5 */
	   612      "01011110" // /* MW 4 */
	   613      "01000001" // /* MW 3 */
	   614      "11111100" // /* MW 2 */
	   615      "01111101" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 72 12
.src_ref 5 "entropy_vect.cpp" 76 10
.src_ref 4 "stream_utils.h" 180 15 first
.src_ref 3 "add.hpp" 300 53
.src_ref 3 "shift.hpp" 78 102
.src_ref 3 "vector.hpp" 567 27
.src_ref 3 "vector.hpp" 908 31 first
.src_ref 3 "vector.hpp" 1041 35
.src_ref 3 "vector.hpp" 1430 12 first
.src_ref 2 "27_0.cc" 45 24
	   616      "00111111" // 	LDA r15, [sp, #-56];VLDB wr1, [p6], #-32;                             MOV.s12 r12, #0;              VSHL0.32 xd, r0;              VMOV1 vrl2, WSS.md0[ 8] /* MW 12 */
	   617      "01000000" // /* MW 11 */
	   618      "01001000" // /* MW 10 */
	   619      "00000011" // /* MW 9 */
	   620      "01101001" // /* MW 8 */
	   621      "01111000" // /* MW 7 */
	   622      "00000000" // /* MW 6 */
	   623      "11001000" // /* MW 5 */
	   624      "01011111" // /* MW 4 */
	   625      "10000011" // /* MW 3 */
	   626      "11111100" // /* MW 2 */
	   627      "01111111" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 72 12
.src_ref 5 "entropy_vect.cpp" 74 14
.src_ref 5 "entropy_vect.cpp" 76 10
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 249 11
.src_ref 4 "stream_utils.h" 213 8
.src_ref 4 "stream_utils.h" 213 8
.src_ref 3 "add.hpp" 300 53
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "vector.hpp" 1041 35 first
.src_ref 3 "vector.hpp" 1043 35
.src_ref 3 "vector.hpp" 1043 35
.noswbrkpt
	   628      "00111111" // 	LDA cl2, [sp, #-4]; VLDB wd1, [p6], #-32;                             MOV.s12 r7, #0;               MOV.u20 ch0, #0;              NOP /* MW 12 */
	   629      "00000000" // /* MW 11 */
	   630      "00000000" // /* MW 10 */
	   631      "00000000" // /* MW 9 */
	   632      "00000100" // /* MW 8 */
	   633      "01101110" // /* MW 7 */
	   634      "00000000" // /* MW 6 */
	   635      "11001000" // /* MW 5 */
	   636      "01011111" // /* MW 4 */
	   637      "11001111" // /* MW 3 */
	   638      "11111111" // /* MW 2 */
	   639      "01011010" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 69 4 first
.src_ref 5 "entropy_vect.cpp" 72 12
.src_ref 5 "entropy_vect.cpp" 74 14
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 3 "add.hpp" 300 53
.src_ref 3 "broadcast.hpp" 188 22
.nohwbrkpt
.noswbrkpt
	   640      "00111111" // 	MOV.s10 lc, #63;    LDB cl5, [sp, #-16];NOP;                                                        MOV.u20 ch3, #65536;          NOP /* MW 12 */
	   641      "00000000" // /* MW 11 */
	   642      "11000000" // /* MW 10 */
	   643      "01000000" // /* MW 9 */
	   644      "00000100" // /* MW 8 */
	   645      "00000000" // /* MW 7 */
	   646      "00000000" // /* MW 6 */
	   647      "10010000" // /* MW 5 */
	   648      "01111111" // /* MW 4 */
	   649      "11111011" // /* MW 3 */
	   650      "00001111" // /* MW 2 */
	   651      "00100100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "vector.hpp" 1041 35 first
.src_ref 2 "27_0.cc" 45 7
.src_ref 2 "27_0.cc" 45 24
.nohwbrkpt
.noswbrkpt
	   652      "00111111" // 	VLDA wd1, [sp, #-96];VLDB wc1, [p6], #-32;NOP;                                                      MOV ch2, r4;                  VEXT.32 r9, vrl2[2] /* MW 12 */
	   653      "10010010" // /* MW 11 */
	   654      "10010010" // /* MW 10 */
	   655      "01000000" // /* MW 9 */
	   656      "01000111" // /* MW 8 */
	   657      "00000000" // /* MW 7 */
	   658      "00000000" // /* MW 6 */
	   659      "11010000" // /* MW 5 */
	   660      "01011111" // /* MW 4 */
	   661      "01001011" // /* MW 3 */
	   662      "11111111" // /* MW 2 */
	   663      "00011110" // /* MW 1 */
.src_ref 4 "stream_utils.h" 180 15 first
.src_ref 3 "shift.hpp" 65 102
.src_ref 3 "vector.hpp" 908 31 first
.src_ref 3 "vector.hpp" 1041 35
.nohwbrkpt
.noswbrkpt
	   664      "01010111" // 	VLDA wd0, [p6], #-32;LDB r14, [sp, #-52];                                                           VMOV0 vrh2, WSS.md0[ 8] /* MW 8 */
	   665      "10100000" // /* MW 7 */
	   666      "00000000" // /* MW 6 */
	   667      "01110011" // /* MW 5 */
	   668      "11111110" // /* MW 4 */
	   669      "10111110" // /* MW 3 */
	   670      "10111111" // /* MW 2 */
	   671      "00011010" // /* MW 1 */
.src_ref 4 "stream_utils.h" 213 8
.src_ref 4 "stream_utils.h" 213 8
.src_ref 3 "add.hpp" 300 53
.src_ref 3 "vector.hpp" 1041 35 first
.src_ref 3 "vector.hpp" 1043 35
.src_ref 3 "vector.hpp" 1043 35
.nohwbrkpt
.noswbrkpt
	   672      "01010111" // 	LDA cl1, [sp, #-4]; VLDB wc0, [p6], #160;                                                           MOV md0[10], r7[0] /* MW 8 */
	   673      "10000000" // /* MW 7 */
	   674      "10111101" // /* MW 6 */
	   675      "11010010" // /* MW 5 */
	   676      "01010101" // /* MW 4 */
	   677      "11001001" // /* MW 3 */
	   678      "11111111" // /* MW 2 */
	   679      "01011001" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.nohwbrkpt
.noswbrkpt
	   680      "01110111" // 	NOP;                                    VST wr0, [sp, #-224];                                                                     VEXT.32 r8, vrh2[3] /* MW 8 */
	   681      "11111001" // /* MW 7 */
	   682      "01000011" // /* MW 6 */
	   683      "00110111" // /* MW 5 */
	   684      "01110100" // /* MW 4 */
	   685      "00100001" // /* MW 3 */
	   686      "00000000" // /* MW 2 */
	   687      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 66 21
.src_ref 3 "broadcast.hpp" 188 22 first
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	   688      "11001111" // 	NOP;                                    VST wr1, [sp, #-256];                                       MOV s2, r13;                  NOP;                                    VSEL xc, yd.s32, r6, c0, r6, c0, c3, r6 /* MW 12 */
	   689      "00000110" // /* MW 11 */
	   690      "11011000" // /* MW 10 */
	   691      "00101010" // /* MW 9 */
	   692      "00000000" // /* MW 8 */
	   693      "00111100" // /* MW 7 */
	   694      "00000000" // /* MW 6 */
	   695      "00100001" // /* MW 5 */
	   696      "10110110" // /* MW 4 */
	   697      "10000000" // /* MW 3 */
	   698      "10111111" // /* MW 2 */
	   699      "01110100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "shift.hpp" 78 102
.src_ref 3 "vector.hpp" 567 27
.nohwbrkpt
.noswbrkpt
	   700      "01111111" // 	NOP;                                    VST wd1, [sp, #-288];         MOV r1, r8.FX2FLT, s2;        MOV s1, r15;                  VEXT.32 r8, vrh2[2] /* MW 12 */
	   701      "10110010" // /* MW 11 */
	   702      "00110000" // /* MW 10 */
	   703      "00010000" // /* MW 9 */
	   704      "00011000" // /* MW 8 */
	   705      "11110111" // /* MW 7 */
	   706      "01111011" // /* MW 6 */
	   707      "01000111" // /* MW 5 */
	   708      "11111000" // /* MW 4 */
	   709      "00000010" // /* MW 3 */
	   710      "00000000" // /* MW 2 */
	   711      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 72 12 first
.src_ref 3 "add.hpp" 300 53
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "vector.hpp" 1041 35 first
.nohwbrkpt
.noswbrkpt
	   712      "01111111" // 	LDA ch1, [sp, #-8];                     NOP;                          MOV r4, r8.FX2FLT, s2;        VMOV wr0, wc0;                VEXT.32 r8, vrh2[1] /* MW 12 */
	   713      "10101010" // /* MW 11 */
	   714      "10010000" // /* MW 10 */
	   715      "00010000" // /* MW 9 */
	   716      "00011000" // /* MW 8 */
	   717      "00000000" // /* MW 7 */
	   718      "00000000" // /* MW 6 */
	   719      "01000000" // /* MW 5 */
	   720      "10010100" // /* MW 4 */
	   721      "10100100" // /* MW 3 */
	   722      "11111111" // /* MW 2 */
	   723      "01010001" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
	   724      "01111111" // 	NOP;                                    VST wc1, [sp, #-320];         MOV r1, r8.FX2FLT, s2;        VSHL0.32 wc1, r1;             VEXT.32 r8, vrh2[0] /* MW 12 */
	   725      "10100010" // /* MW 11 */
	   726      "00110000" // /* MW 10 */
	   727      "00010000" // /* MW 9 */
	   728      "00011000" // /* MW 8 */
	   729      "11110110" // /* MW 7 */
	   730      "01101011" // /* MW 6 */
	   731      "10000111" // /* MW 5 */
	   732      "00010010" // /* MW 4 */
	   733      "00101001" // /* MW 3 */
	   734      "00000000" // /* MW 2 */
	   735      "00000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
	   736      "11110111" // 	                                        VST wd1, [sp, #-448];         MOV r4, r8.FX2FLT, s2;        VSHL0.32 wc1, r4 /* MW 8 */
	   737      "00010100" // /* MW 7 */
	   738      "01001010" // /* MW 6 */
	   739      "00001001" // /* MW 5 */
	   740      "10000001" // /* MW 4 */
	   741      "00100001" // /* MW 3 */
	   742      "10111111" // /* MW 2 */
	   743      "01110111" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
	   744      "01111111" // 	NOP;                                    VST wd0, [sp, #-352];         MOV r9, r9.FX2FLT, s2;        VSHL0.32 wc1, r1;             VEXT.32 r8, vrl2[3] /* MW 12 */
	   745      "10011010" // /* MW 11 */
	   746      "00110000" // /* MW 10 */
	   747      "00010011" // /* MW 9 */
	   748      "00011000" // /* MW 8 */
	   749      "11110101" // /* MW 7 */
	   750      "01110011" // /* MW 6 */
	   751      "10000111" // /* MW 5 */
	   752      "00010010" // /* MW 4 */
	   753      "00101001" // /* MW 3 */
	   754      "00000000" // /* MW 2 */
	   755      "00000000" // /* MW 1 */
.src_ref 3 "add.hpp" 300 53
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
	   756      "01111111" // 	LDA cl3, [sp, #-28];                    NOP;                          MOV r1, r8.FX2FLT, s2;        VSHL0.32 wc1, r4;             VEXT.32 r8, vrl2[1] /* MW 12 */
	   757      "10001010" // /* MW 11 */
	   758      "00110000" // /* MW 10 */
	   759      "00010000" // /* MW 9 */
	   760      "00011000" // /* MW 8 */
	   761      "00000000" // /* MW 7 */
	   762      "00000000" // /* MW 6 */
	   763      "10000000" // /* MW 5 */
	   764      "01000010" // /* MW 4 */
	   765      "01101001" // /* MW 3 */
	   766      "11111110" // /* MW 2 */
	   767      "01011011" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "shift.hpp" 65 102
.noswbrkpt
	   768      "01111111" // 	VLDA wr2, [sp, #-128];                  NOP;                          MOV r4, r8.FX2FLT, s2;        MOV s0, r14;                  VEXT.32 r8, vrl2[0] /* MW 12 */
	   769      "10000010" // /* MW 11 */
	   770      "10010000" // /* MW 10 */
	   771      "00010000" // /* MW 9 */
	   772      "00011000" // /* MW 8 */
	   773      "00000000" // /* MW 7 */
	   774      "00000000" // /* MW 6 */
	   775      "00000000" // /* MW 5 */
	   776      "11101000" // /* MW 4 */
	   777      "00000010" // /* MW 3 */
	   778      "11111111" // /* MW 2 */
	   779      "00001010" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	   780      "11110111" // 	                                        VST wr3, [sp, #-192];         MOV r15, r8.FX2FLT, s2;       VSHL0.32 wc1, r1 /* MW 8 */
	   781      "10010100" // /* MW 7 */
	   782      "01001000" // /* MW 6 */
	   783      "00011111" // /* MW 5 */
	   784      "10000001" // /* MW 4 */
	   785      "10100001" // /* MW 3 */
	   786      "10111111" // /* MW 2 */
	   787      "01110101" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
	   788      "01110111" // 	VLDA wr3, [sp, #-160];                                                NOP;                          VSHL0.32 wc1, r9 /* MW 8 */
	   789      "00000000" // /* MW 7 */
	   790      "00000000" // /* MW 6 */
	   791      "10000000" // /* MW 5 */
	   792      "10010010" // /* MW 4 */
	   793      "11101001" // /* MW 3 */
	   794      "11111110" // /* MW 2 */
	   795      "00001110" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
	   796      "11110111" // 	                                        VST wc0, [sp, #-384];         NOP;                          VSHL0.32 wc1, r4 /* MW 8 */
	   797      "00010100" // /* MW 7 */
	   798      "01001010" // /* MW 6 */
	   799      "00000001" // /* MW 5 */
	   800      "00000000" // /* MW 4 */
	   801      "01000000" // /* MW 3 */
	   802      "00111111" // /* MW 2 */
	   803      "01110110" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 76 10
.src_ref 5 "entropy_vect.cpp" 249 11
.src_ref 3 "elementary.hpp" 225 41
	   804      "01110111" // 	LDA cl4, [sp, #-20];                                                  NOP;                          VSHL0.32 wc1, r15 /* MW 8 */
	   805      "00000000" // /* MW 7 */
	   806      "00000000" // /* MW 6 */
	   807      "10000000" // /* MW 5 */
	   808      "11110010" // /* MW 4 */
	   809      "11101001" // /* MW 3 */
	   810      "11111110" // /* MW 2 */
	   811      "01011100" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 72 12 first
	   812      "00000111" // 	NOP;                                    NOP;                                                                                                                              VFPMUL wd1, r4, ya, r12, cl2, wc1, #0, cl2, #0, cl5 /* MW 8 */
	   813      "01010110" // /* MW 7 */
	   814      "00000010" // /* MW 6 */
	   815      "01110011" // /* MW 5 */
	   816      "10000001" // /* MW 4 */
	   817      "00000000" // /* MW 3 */
	   818      "00000000" // /* MW 2 */
	   819      "10000000" // /* MW 1 */
	   820      "00000001" // 	NOP /* MW 2 */
	   821      "00000000" // /* MW 1 */
	   822      "00000001" // 	NOP /* MW 2 */
	   823      "00000000" // /* MW 1 */
	   824      "00000001" // 	NOP /* MW 2 */
	   825      "00000000" // /* MW 1 */
	   826      "00000001" // 	NOP /* MW 2 */
	   827      "00000000" // /* MW 1 */
	   828      "00000001" // 	NOP /* MW 2 */
	   829      "00000000" // /* MW 1 */
.src_ref 3 "shift.hpp" 65 102
.src_ref 3 "vector.hpp" 744 23 first
	   830      "11110111" // 	                                        VST wd1, [sp, #-416];                                       VMOV wd0, wd1;                VEXT.32 r13, vdl1[0] /* MW 8 */
	   831      "00100111" // /* MW 7 */
	   832      "10111100" // /* MW 6 */
	   833      "01110101" // /* MW 5 */
	   834      "01001111" // /* MW 4 */
	   835      "10011110" // /* MW 3 */
	   836      "11011111" // /* MW 2 */
	   837      "10111011" // /* MW 1 */
.src_ref 3 "shift.hpp" 65 102 first
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 532 24 first
	   838      "11110111" // 	                                                                      AND r8, r10, r13;             VMOV.48.UPSL aml0, wd0, s0;   VEXT.32 r13, vdl1[1] /* MW 8 */
	   839      "10100111" // /* MW 7 */
	   840      "10111100" // /* MW 6 */
	   841      "00100001" // /* MW 5 */
	   842      "00000010" // /* MW 4 */
	   843      "10000110" // /* MW 3 */
	   844      "11011010" // /* MW 2 */
	   845      "00110100" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 532 24
	   846      "01111111" // 	NOP;                NOP;                NOP;                          AND r4, r10, r13;                                           VEXT.32 r13, vdl1[2] /* MW 12 */
	   847      "11010010" // /* MW 11 */
	   848      "10011011" // /* MW 10 */
	   849      "10110100" // /* MW 9 */
	   850      "01101001" // /* MW 8 */
	   851      "00000000" // /* MW 7 */
	   852      "00000000" // /* MW 6 */
	   853      "00010000" // /* MW 5 */
	   854      "00000000" // /* MW 4 */
	   855      "00000000" // /* MW 3 */
	   856      "00000000" // /* MW 2 */
	   857      "00000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 532 24 first
	   858      "01111111" // 	NOP;                NOP;                NOP;                          AND r1, r10, r13;                                           VEXT.32 r13, vdl1[3] /* MW 12 */
	   859      "11011010" // /* MW 11 */
	   860      "00111011" // /* MW 10 */
	   861      "10110100" // /* MW 9 */
	   862      "01101001" // /* MW 8 */
	   863      "00000000" // /* MW 7 */
	   864      "00000000" // /* MW 6 */
	   865      "00010000" // /* MW 5 */
	   866      "00000000" // /* MW 4 */
	   867      "00000000" // /* MW 3 */
	   868      "00000000" // /* MW 2 */
	   869      "00000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 532 24
	   870      "01111111" // 	NOP;                NOP;                NOP;                          AND r7, r10, r13;                                           VEXT.32 r13, vdh1[0] /* MW 12 */
	   871      "11100010" // /* MW 11 */
	   872      "11111011" // /* MW 10 */
	   873      "10110100" // /* MW 9 */
	   874      "01101001" // /* MW 8 */
	   875      "00000000" // /* MW 7 */
	   876      "00000000" // /* MW 6 */
	   877      "00010000" // /* MW 5 */
	   878      "00000000" // /* MW 4 */
	   879      "00000000" // /* MW 3 */
	   880      "00000000" // /* MW 2 */
	   881      "00000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 532 24 first
	   882      "01111111" // 	NOP;                NOP;                NOP;                          AND r9, r10, r13;                                           VEXT.32 r13, vdh1[1] /* MW 12 */
	   883      "11101010" // /* MW 11 */
	   884      "00111011" // /* MW 10 */
	   885      "10110101" // /* MW 9 */
	   886      "01101001" // /* MW 8 */
	   887      "00000000" // /* MW 7 */
	   888      "00000000" // /* MW 6 */
	   889      "00010000" // /* MW 5 */
	   890      "00000000" // /* MW 4 */
	   891      "00000000" // /* MW 3 */
	   892      "00000000" // /* MW 2 */
	   893      "00000000" // /* MW 1 */
.src_ref 3 "shift.hpp" 78 102 first
.src_ref 3 "vector.hpp" 567 27 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 532 24
.noswbrkpt
	   894      "01111111" // 	NOP;                NOP;                VMOVS.48.SRSL wd0, aml0, s1;  AND r14, r10, r13;                                          VEXT.32 r15, vdh1[3] /* MW 12 */
	   895      "11111010" // /* MW 11 */
	   896      "11011111" // /* MW 10 */
	   897      "10110101" // /* MW 9 */
	   898      "01101001" // /* MW 8 */
	   899      "10001100" // /* MW 7 */
	   900      "01000001" // /* MW 6 */
	   901      "00010010" // /* MW 5 */
	   902      "00000000" // /* MW 4 */
	   903      "00000000" // /* MW 3 */
	   904      "00000000" // /* MW 2 */
	   905      "00000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 532 24 first
.nohwbrkpt
.noswbrkpt
	   906      "01111111" // 	NOP;                NOP;                NOP;                          AND r15, r10, r15;                                          VEXT.32 r13, vdh1[2] /* MW 12 */
	   907      "11110010" // /* MW 11 */
	   908      "11111011" // /* MW 10 */
	   909      "11110101" // /* MW 9 */
	   910      "01101001" // /* MW 8 */
	   911      "00000000" // /* MW 7 */
	   912      "00000000" // /* MW 6 */
	   913      "00010000" // /* MW 5 */
	   914      "00000000" // /* MW 4 */
	   915      "00000000" // /* MW 3 */
	   916      "00000000" // /* MW 2 */
	   917      "00000000" // /* MW 1 */
.src_ref 6 "vector.hpp" 532 24
	   918      "00000011" // 	NOP;                                                                  AND r13, r10, r13 /* MW 4 */
	   919      "11010000" // /* MW 3 */
	   920      "11011010" // /* MW 2 */
	   921      "00110100" // /* MW 1 */
.src_ref 3 "add.hpp" 300 53 first
.src_ref 3 "vector.hpp" 691 23 first
	   922      "01000111" // 	NOP;                                                                                                VUPD.32 vrl2[0], r8;                                                  VCMP xd, r5, yd.s32, r12, c1, r6, c0, c3 /* MW 8 */
	   923      "00001111" // /* MW 7 */
	   924      "00110001" // /* MW 6 */
	   925      "00110111" // /* MW 5 */
	   926      "00000000" // /* MW 4 */
	   927      "00011000" // /* MW 3 */
	   928      "00011010" // /* MW 2 */
	   929      "00100011" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23
	   930      "00000011" // 	NOP;                                                                                                VUPD.32 vrl2[1], r4 /* MW 4 */
	   931      "00011000" // /* MW 3 */
	   932      "10011010" // /* MW 2 */
	   933      "00101010" // /* MW 1 */
.src_ref 3 "vector.hpp" 1041 35 first
	   934      "00000011" // 	NOP;                                                                                                VMOV wc1, wd0 /* MW 4 */
	   935      "10011000" // /* MW 3 */
	   936      "10101101" // /* MW 2 */
	   937      "01001001" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
	   938      "00000011" // 	NOP;                                                                                                VMOV vrh3, vch1 /* MW 4 */
	   939      "10011000" // /* MW 3 */
	   940      "01101011" // /* MW 2 */
	   941      "01001101" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "vector.hpp" 691 23 first
	   942      "11110111" // 	                                        NOP;                                                        VUPD.32 vrl2[2], r1;          VEXT.32 r0, vrh3[3] /* MW 8 */
	   943      "10100111" // /* MW 7 */
	   944      "00001111" // /* MW 6 */
	   945      "11010000" // /* MW 5 */
	   946      "10010001" // /* MW 4 */
	   947      "00000101" // /* MW 3 */
	   948      "00000000" // /* MW 2 */
	   949      "10000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "vector.hpp" 691 23
	   950      "11110111" // 	                                                                      MOV r5, r0.FX2FLT, s2;        VUPD.32 vrh2[0], r9;          VEXT.32 r0, vrh3[2] /* MW 8 */
	   951      "00100111" // /* MW 7 */
	   952      "00001111" // /* MW 6 */
	   953      "11010100" // /* MW 5 */
	   954      "00011001" // /* MW 4 */
	   955      "01010101" // /* MW 3 */
	   956      "00000000" // /* MW 2 */
	   957      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "vector.hpp" 691 23 first
	   958      "11110111" // 	                                                                      MOV r0, r0.FX2FLT, s2;        VUPD.32 vrl2[3], r7;          VEXT.32 r2, vrh3[1] /* MW 8 */
	   959      "10100111" // /* MW 7 */
	   960      "01001110" // /* MW 6 */
	   961      "11010000" // /* MW 5 */
	   962      "11010111" // /* MW 4 */
	   963      "00000101" // /* MW 3 */
	   964      "00000000" // /* MW 2 */
	   965      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
	   966      "11110111" // 	                                                                      MOV r7, r2.FX2FLT, s2;        VUPD.32 vrh2[1], r14;         VEXT.32 r14, vrl2[1] /* MW 8 */
	   967      "10100111" // /* MW 7 */
	   968      "11001000" // /* MW 6 */
	   969      "11010101" // /* MW 5 */
	   970      "01011110" // /* MW 4 */
	   971      "01110101" // /* MW 3 */
	   972      "00000010" // /* MW 2 */
	   973      "00001100" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 3 "vector.hpp" 744 23
	   974      "11110111" // 	                                        NOP;                                                        VUPD.32 vrh2[2], r13;         VEXT.32 r13, vrl2[0] /* MW 8 */
	   975      "00100111" // /* MW 7 */
	   976      "10101000" // /* MW 6 */
	   977      "11010101" // /* MW 5 */
	   978      "10011101" // /* MW 4 */
	   979      "00000101" // /* MW 3 */
	   980      "00000000" // /* MW 2 */
	   981      "10000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
	   982      "11110111" // 	                                        NOP;                                                        VMOV vrl3, vcl1;              VSHL1.32 wc1, r5 /* MW 8 */
	   983      "01000111" // /* MW 7 */
	   984      "01100101" // /* MW 6 */
	   985      "01011001" // /* MW 5 */
	   986      "01101010" // /* MW 4 */
	   987      "00000110" // /* MW 3 */
	   988      "00000000" // /* MW 2 */
	   989      "10000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 6 "vector.hpp" 543 24 first
.noswbrkpt
	   990      "01111111" // 	VLDA wr2, [sp, #-192];                  NOP;                          OR r5, r13, r11;              VUPD.32 vrh2[3], r15;         VEXT.32 r2, vrh3[0] /* MW 12 */
	   991      "11100010" // /* MW 11 */
	   992      "10100100" // /* MW 10 */
	   993      "01111010" // /* MW 9 */
	   994      "01101011" // /* MW 8 */
	   995      "00000000" // /* MW 7 */
	   996      "00000000" // /* MW 6 */
	   997      "01000000" // /* MW 5 */
	   998      "11111101" // /* MW 4 */
	   999      "10011101" // /* MW 3 */
	  1000      "11111110" // /* MW 2 */
	  1001      "00001010" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 543 24
.nohwbrkpt
.noswbrkpt
	  1002      "11110111" // 	                                                                      OR r5, r14, r11;              VUPD.32 vcl0[0], r5;          VEXT.32 r14, vrl2[2] /* MW 8 */
	  1003      "00100111" // /* MW 7 */
	  1004      "11001001" // /* MW 6 */
	  1005      "11100001" // /* MW 5 */
	  1006      "00010101" // /* MW 4 */
	  1007      "01010101" // /* MW 3 */
	  1008      "10111110" // /* MW 2 */
	  1009      "00110101" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 543 24 first
.nohwbrkpt
.noswbrkpt
	  1010      "11110111" // 	                                                                      OR r5, r14, r11;              VUPD.32 vcl0[1], r5;          VEXT.32 r14, vrl2[3] /* MW 8 */
	  1011      "10100111" // /* MW 7 */
	  1012      "11001001" // /* MW 6 */
	  1013      "11100001" // /* MW 5 */
	  1014      "01010101" // /* MW 4 */
	  1015      "01010101" // /* MW 3 */
	  1016      "10111110" // /* MW 2 */
	  1017      "00110101" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 543 24
.nohwbrkpt
.noswbrkpt
	  1018      "01111111" // 	VLDA wc0, [sp, #-224];                  NOP;                          OR r5, r14, r11;              VUPD.32 vcl0[2], r5;          VEXT.32 r14, vrh2[0] /* MW 12 */
	  1019      "10100010" // /* MW 11 */
	  1020      "10111100" // /* MW 10 */
	  1021      "01111100" // /* MW 9 */
	  1022      "01101011" // /* MW 8 */
	  1023      "00000000" // /* MW 7 */
	  1024      "00000000" // /* MW 6 */
	  1025      "00000000" // /* MW 5 */
	  1026      "01011110" // /* MW 4 */
	  1027      "01011001" // /* MW 3 */
	  1028      "11111110" // /* MW 2 */
	  1029      "00010010" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 543 24 first
.nohwbrkpt
.noswbrkpt
	  1030      "11110111" // 	                                                                      OR r5, r14, r11;              VUPD.32 vcl0[3], r5;          VEXT.32 r14, vrh2[1] /* MW 8 */
	  1031      "10100111" // /* MW 7 */
	  1032      "11001010" // /* MW 6 */
	  1033      "11100001" // /* MW 5 */
	  1034      "11010101" // /* MW 4 */
	  1035      "01010101" // /* MW 3 */
	  1036      "10111110" // /* MW 2 */
	  1037      "00110101" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 543 24
.nohwbrkpt
.noswbrkpt
	  1038      "01111111" // 	VLDA wr3, [sp, #-320];                  NOP;                          OR r5, r14, r11;              VUPD.32 vch0[0], r5;          VEXT.32 r14, vrh2[2] /* MW 12 */
	  1039      "10110010" // /* MW 11 */
	  1040      "10111100" // /* MW 10 */
	  1041      "01111100" // /* MW 9 */
	  1042      "01101011" // /* MW 8 */
	  1043      "00000000" // /* MW 7 */
	  1044      "00000000" // /* MW 6 */
	  1045      "01000000" // /* MW 5 */
	  1046      "01011110" // /* MW 4 */
	  1047      "10010001" // /* MW 3 */
	  1048      "11111101" // /* MW 2 */
	  1049      "00001110" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 543 24 first
.nohwbrkpt
.noswbrkpt
	  1050      "11110111" // 	                                                                      OR r5, r14, r11;              VUPD.32 vch0[1], r5;          VEXT.32 r14, vrh2[3] /* MW 8 */
	  1051      "10100111" // /* MW 7 */
	  1052      "11001011" // /* MW 6 */
	  1053      "11100101" // /* MW 5 */
	  1054      "01010101" // /* MW 4 */
	  1055      "01010101" // /* MW 3 */
	  1056      "10111110" // /* MW 2 */
	  1057      "00110101" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "vector.hpp" 691 23
.src_ref 6 "vector.hpp" 543 24
.nohwbrkpt
.noswbrkpt
	  1058      "01111111" // 	VLDA wr2, [sp, #-256];                  NOP;                          OR r5, r14, r11;              VUPD.32 vch0[2], r5;          VEXT.32 r14, vrl3[2] /* MW 12 */
	  1059      "11010010" // /* MW 11 */
	  1060      "10111100" // /* MW 10 */
	  1061      "01111100" // /* MW 9 */
	  1062      "01101011" // /* MW 8 */
	  1063      "00000000" // /* MW 7 */
	  1064      "00000000" // /* MW 6 */
	  1065      "01000000" // /* MW 5 */
	  1066      "01011110" // /* MW 4 */
	  1067      "00011001" // /* MW 3 */
	  1068      "11111110" // /* MW 2 */
	  1069      "00001010" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "vector.hpp" 691 23 first
.nohwbrkpt
.noswbrkpt
	  1070      "11110111" // 	                                                                      MOV r5, r14.FX2FLT, s2;       VUPD.32 vch0[3], r5;          VEXT.32 r14, vrl3[0] /* MW 8 */
	  1071      "00100111" // /* MW 7 */
	  1072      "11001100" // /* MW 6 */
	  1073      "11100101" // /* MW 5 */
	  1074      "11010101" // /* MW 4 */
	  1075      "01010101" // /* MW 3 */
	  1076      "00001110" // /* MW 2 */
	  1077      "00001100" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.nohwbrkpt
.noswbrkpt
	  1078      "11110111" // 	                                                                      MOV r2, r2.FX2FLT, s2;        VMOV wd0, wc0;                VSHL1.32 wc1, r0 /* MW 8 */
	  1079      "01000111" // /* MW 7 */
	  1080      "01100000" // /* MW 6 */
	  1081      "01110101" // /* MW 5 */
	  1082      "01001001" // /* MW 4 */
	  1083      "00100110" // /* MW 3 */
	  1084      "00000010" // /* MW 2 */
	  1085      "00001100" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8 first
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1086      "01010000" // 	NOP;NOP;                                NOP;                          MOV r2, r14.FX2FLT, s2;       VSHL0.32 wc1, r7;             VEXT.32 r0, vrl3[3];                    VFPMAC wd1, r0, wr2, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 16 */
	  1087      "00100101" // /* MW 15 */
	  1088      "00011000" // /* MW 14 */
	  1089      "00100110" // /* MW 13 */
	  1090      "00001000" // /* MW 12 */
	  1091      "11011010" // /* MW 11 */
	  1092      "01000000" // /* MW 10 */
	  1093      "00011100" // /* MW 9 */
	  1094      "00011000" // /* MW 8 */
	  1095      "00000000" // /* MW 7 */
	  1096      "00000000" // /* MW 6 */
	  1097      "10000000" // /* MW 5 */
	  1098      "01110010" // /* MW 4 */
	  1099      "00101001" // /* MW 3 */
	  1100      "00000000" // /* MW 2 */
	  1101      "00000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.nohwbrkpt
.noswbrkpt
	  1102      "11110111" // 	                                                                      MOV r0, r0.FX2FLT, s2;        VSHL0.32 wc1, r2;             VEXT.32 r14, vrl3[1] /* MW 8 */
	  1103      "10100111" // /* MW 7 */
	  1104      "11001100" // /* MW 6 */
	  1105      "00101001" // /* MW 5 */
	  1106      "10010010" // /* MW 4 */
	  1107      "00000110" // /* MW 3 */
	  1108      "00000000" // /* MW 2 */
	  1109      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1110      "00000011" // 	NOP;                                                                  MOV r0, r14.FX2FLT, s2 /* MW 4 */
	  1111      "00000000" // /* MW 3 */
	  1112      "00001110" // /* MW 2 */
	  1113      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1114      "00000011" // 	NOP;                                                                                                VSHL0.32 wc1, r0 /* MW 4 */
	  1115      "00011000" // /* MW 3 */
	  1116      "00000101" // /* MW 2 */
	  1117      "01010010" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1118      "01110111" // 	VLDA wr2, [sp, #-288];                                                NOP;                          VSHL0.32 wc1, r5 /* MW 8 */
	  1119      "00000000" // /* MW 7 */
	  1120      "00000000" // /* MW 6 */
	  1121      "10000000" // /* MW 5 */
	  1122      "01010010" // /* MW 4 */
	  1123      "11101001" // /* MW 3 */
	  1124      "11111101" // /* MW 2 */
	  1125      "00001010" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1126      "00000011" // 	NOP;                                                                                                VSHL0.32 wc1, r0 /* MW 4 */
	  1127      "00011000" // /* MW 3 */
	  1128      "00000101" // /* MW 2 */
	  1129      "01010010" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1130      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1131      "10011000" // /* MW 3 */
	  1132      "11101100" // /* MW 2 */
	  1133      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8 first
.src_ref 5 "entropy_vect.cpp" 246 12 first
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1134      "11001111" // 	NOP;                                    NOP;                                                        VSHL0.32 wc1, r2;             NOP;                                    VFPMAC wd1, r2, wr2, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 12 */
	  1135      "00101010" // /* MW 11 */
	  1136      "11000001" // /* MW 10 */
	  1137      "00110000" // /* MW 9 */
	  1138      "01000001" // /* MW 8 */
	  1139      "00111100" // /* MW 7 */
	  1140      "00000000" // /* MW 6 */
	  1141      "10100001" // /* MW 5 */
	  1142      "01001000" // /* MW 4 */
	  1143      "00001010" // /* MW 3 */
	  1144      "00000000" // /* MW 2 */
	  1145      "00000000" // /* MW 1 */
	  1146      "00000001" // 	NOP /* MW 2 */
	  1147      "00000000" // /* MW 1 */
	  1148      "00000001" // 	NOP /* MW 2 */
	  1149      "00000000" // /* MW 1 */
	  1150      "00000001" // 	NOP /* MW 2 */
	  1151      "00000000" // /* MW 1 */
	  1152      "00000001" // 	NOP /* MW 2 */
	  1153      "00000000" // /* MW 1 */
	  1154      "00000001" // 	NOP /* MW 2 */
	  1155      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
	  1156      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1157      "10011000" // /* MW 3 */
	  1158      "11101100" // /* MW 2 */
	  1159      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
	  1160      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd1, r3, wr2, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1161      "01010101" // /* MW 7 */
	  1162      "10000010" // /* MW 6 */
	  1163      "01100001" // /* MW 5 */
	  1164      "10000010" // /* MW 4 */
	  1165      "00000000" // /* MW 3 */
	  1166      "00000000" // /* MW 2 */
	  1167      "10000000" // /* MW 1 */
	  1168      "00000001" // 	NOP /* MW 2 */
	  1169      "00000000" // /* MW 1 */
	  1170      "00000001" // 	NOP /* MW 2 */
	  1171      "00000000" // /* MW 1 */
	  1172      "00000001" // 	NOP /* MW 2 */
	  1173      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.noswbrkpt
	  1174      "11110111" // 	                                        NOP;                                                        VLDA.SPIL wr3, [sp, #-352];   NOP /* MW 8 */
	  1175      "00100111" // /* MW 7 */
	  1176      "11010100" // /* MW 6 */
	  1177      "10011011" // /* MW 5 */
	  1178      "11000111" // /* MW 4 */
	  1179      "00000000" // /* MW 3 */
	  1180      "00000000" // /* MW 2 */
	  1181      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1182      "00000001" // 	NOP /* MW 2 */
	  1183      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1184      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1185      "10011000" // /* MW 3 */
	  1186      "11101100" // /* MW 2 */
	  1187      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1188      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd1, r3, wr3, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1189      "01010101" // /* MW 7 */
	  1190      "10000010" // /* MW 6 */
	  1191      "11100001" // /* MW 5 */
	  1192      "10000010" // /* MW 4 */
	  1193      "00000000" // /* MW 3 */
	  1194      "00000000" // /* MW 2 */
	  1195      "10000000" // /* MW 1 */
	  1196      "00000001" // 	NOP /* MW 2 */
	  1197      "00000000" // /* MW 1 */
	  1198      "00000001" // 	NOP /* MW 2 */
	  1199      "00000000" // /* MW 1 */
	  1200      "00000001" // 	NOP /* MW 2 */
	  1201      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.noswbrkpt
	  1202      "11110111" // 	                                        NOP;                                                        VLDA.SPIL wr3, [sp, #-384];   NOP /* MW 8 */
	  1203      "00100111" // /* MW 7 */
	  1204      "11010000" // /* MW 6 */
	  1205      "10011011" // /* MW 5 */
	  1206      "11000111" // /* MW 4 */
	  1207      "00000000" // /* MW 3 */
	  1208      "00000000" // /* MW 2 */
	  1209      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1210      "00000001" // 	NOP /* MW 2 */
	  1211      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1212      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1213      "10011000" // /* MW 3 */
	  1214      "11101100" // /* MW 2 */
	  1215      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1216      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd1, r3, wr3, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1217      "01010101" // /* MW 7 */
	  1218      "10000010" // /* MW 6 */
	  1219      "11100001" // /* MW 5 */
	  1220      "10000010" // /* MW 4 */
	  1221      "00000000" // /* MW 3 */
	  1222      "00000000" // /* MW 2 */
	  1223      "10000000" // /* MW 1 */
	  1224      "00000001" // 	NOP /* MW 2 */
	  1225      "00000000" // /* MW 1 */
	  1226      "00000001" // 	NOP /* MW 2 */
	  1227      "00000000" // /* MW 1 */
	  1228      "00000001" // 	NOP /* MW 2 */
	  1229      "00000000" // /* MW 1 */
	  1230      "00000001" // 	NOP /* MW 2 */
	  1231      "00000000" // /* MW 1 */
	  1232      "00000001" // 	NOP /* MW 2 */
	  1233      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
	  1234      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1235      "10011000" // /* MW 3 */
	  1236      "11101100" // /* MW 2 */
	  1237      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
	  1238      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd0, r3, wr3, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1239      "01010101" // /* MW 7 */
	  1240      "10000010" // /* MW 6 */
	  1241      "11000001" // /* MW 5 */
	  1242      "10000010" // /* MW 4 */
	  1243      "00000000" // /* MW 3 */
	  1244      "00000000" // /* MW 2 */
	  1245      "10000000" // /* MW 1 */
	  1246      "00000001" // 	NOP /* MW 2 */
	  1247      "00000000" // /* MW 1 */
	  1248      "00000001" // 	NOP /* MW 2 */
	  1249      "00000000" // /* MW 1 */
	  1250      "00000001" // 	NOP /* MW 2 */
	  1251      "00000000" // /* MW 1 */
	  1252      "00000001" // 	NOP /* MW 2 */
	  1253      "00000000" // /* MW 1 */
	  1254      "00000001" // 	NOP /* MW 2 */
	  1255      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 249 11 first
.noswbrkpt
	  1256      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd0, r3, wr2, yd, r6, cl2, wc0, #0, cl0, #0, cl4 /* MW 8 */
	  1257      "00010001" // /* MW 7 */
	  1258      "10000010" // /* MW 6 */
	  1259      "01000001" // /* MW 5 */
	  1260      "10000010" // /* MW 4 */
	  1261      "00000000" // /* MW 3 */
	  1262      "00000000" // /* MW 2 */
	  1263      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1264      "00000010" // 	NOP;                NOP;                NOP;                          NOP;                          NOP;                          NOP;                                    NOP /* MW 16 */
	  1265      "00000000" // /* MW 15 */
	  1266      "00000000" // /* MW 14 */
	  1267      "00000000" // /* MW 13 */
	  1268      "00000000" // /* MW 12 */
	  1269      "00000000" // /* MW 11 */
	  1270      "00000000" // /* MW 10 */
	  1271      "00000000" // /* MW 9 */
	  1272      "00000000" // /* MW 8 */
	  1273      "00000000" // /* MW 7 */
	  1274      "00000000" // /* MW 6 */
	  1275      "00000000" // /* MW 5 */
	  1276      "00000000" // /* MW 4 */
	  1277      "00000000" // /* MW 3 */
	  1278      "00000000" // /* MW 2 */
	  1279      "00000000" // /* MW 1 */
.label ZLS_F_main_1008
.src_ref 5 "entropy_vect.cpp" 249 11
.src_ref 4 "stream_utils.h" 180 15 first
.src_ref 3 "vector.hpp" 908 31 first
.begin_of_loop
.nohwbrkpt
.noswbrkpt
.loop_nesting 3
	  1280      "11110111" // 	                                                                      NOP;                          VMOV wr2, wc1;                VMOV1 vrl2, WSS.md0[ 8] /* MW 8 */
	  1281      "00000111" // /* MW 7 */
	  1282      "10000100" // /* MW 6 */
	  1283      "01010100" // /* MW 5 */
	  1284      "01001011" // /* MW 4 */
	  1285      "00000110" // /* MW 3 */
	  1286      "00000000" // /* MW 2 */
	  1287      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1288      "00000001" // 	NOP /* MW 2 */
	  1289      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 74 14
.nohwbrkpt
.noswbrkpt
	  1290      "11110111" // 	                                        NOP;                                                        VLDA.SPIL wc0, [sp, #-416];   NOP /* MW 8 */
	  1291      "00100111" // /* MW 7 */
	  1292      "11001100" // /* MW 6 */
	  1293      "10100011" // /* MW 5 */
	  1294      "11000111" // /* MW 4 */
	  1295      "00000000" // /* MW 3 */
	  1296      "00000000" // /* MW 2 */
	  1297      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1298      "00000001" // 	NOP /* MW 2 */
	  1299      "00000000" // /* MW 1 */
.src_ref 4 "stream_utils.h" 180 15
.src_ref 3 "vector.hpp" 908 31
.nohwbrkpt
.noswbrkpt
	  1300      "00000011" // 	NOP;                                                                                                VMOV0 vrh2, WSS.md0[ 8] /* MW 4 */
	  1301      "10011000" // /* MW 3 */
	  1302      "00000010" // /* MW 2 */
	  1303      "01001100" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 74 14
.nohwbrkpt
.noswbrkpt
	  1304      "11110111" // 	                                        NOP;                                                        VLDA.SPIL wr3, [sp, #-448];   NOP /* MW 8 */
	  1305      "00100111" // /* MW 7 */
	  1306      "11001000" // /* MW 6 */
	  1307      "10011011" // /* MW 5 */
	  1308      "11000111" // /* MW 4 */
	  1309      "00000000" // /* MW 3 */
	  1310      "00000000" // /* MW 2 */
	  1311      "10000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.nohwbrkpt
.noswbrkpt
	  1312      "01110111" // 	NOP;                                    NOP;                                                                                      VEXT.32 r8, vrh2[3] /* MW 8 */
	  1313      "00000000" // /* MW 7 */
	  1314      "00000000" // /* MW 6 */
	  1315      "00110000" // /* MW 5 */
	  1316      "01110100" // /* MW 4 */
	  1317      "00100001" // /* MW 3 */
	  1318      "00000000" // /* MW 2 */
	  1319      "00000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1320      "01111111" // 	NOP;                NOP;                NOP;                          MOV r1, r8.FX2FLT, s2;                                      VEXT.32 r8, vrh2[2] /* MW 12 */
	  1321      "10110010" // /* MW 11 */
	  1322      "00110000" // /* MW 10 */
	  1323      "00010000" // /* MW 9 */
	  1324      "00011000" // /* MW 8 */
	  1325      "00000000" // /* MW 7 */
	  1326      "00000000" // /* MW 6 */
	  1327      "00010000" // /* MW 5 */
	  1328      "00000000" // /* MW 4 */
	  1329      "00000000" // /* MW 3 */
	  1330      "00000000" // /* MW 2 */
	  1331      "00000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1332      "01111111" // 	NOP;                NOP;                NOP;                          MOV r4, r8.FX2FLT, s2;                                      VEXT.32 r8, vrh2[1] /* MW 12 */
	  1333      "10101010" // /* MW 11 */
	  1334      "10010000" // /* MW 10 */
	  1335      "00010000" // /* MW 9 */
	  1336      "00011000" // /* MW 8 */
	  1337      "00000000" // /* MW 7 */
	  1338      "00000000" // /* MW 6 */
	  1339      "00010000" // /* MW 5 */
	  1340      "00000000" // /* MW 4 */
	  1341      "00000000" // /* MW 3 */
	  1342      "00000000" // /* MW 2 */
	  1343      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 74 14 first
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1344      "01011100" // 	NOP;NOP;                                NOP;                          MOV r1, r8.FX2FLT, s2;        VSHL0.32 wc1, r1;             VEXT.32 r8, vrh2[0];                    VFPMAC wd1, r3, wr3, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 16 */
	  1345      "00100101" // /* MW 15 */
	  1346      "00011000" // /* MW 14 */
	  1347      "00101110" // /* MW 13 */
	  1348      "00001000" // /* MW 12 */
	  1349      "10100010" // /* MW 11 */
	  1350      "00110000" // /* MW 10 */
	  1351      "00010000" // /* MW 9 */
	  1352      "00011000" // /* MW 8 */
	  1353      "00000000" // /* MW 7 */
	  1354      "00000000" // /* MW 6 */
	  1355      "10000000" // /* MW 5 */
	  1356      "00010010" // /* MW 4 */
	  1357      "00101001" // /* MW 3 */
	  1358      "00000000" // /* MW 2 */
	  1359      "00000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.nohwbrkpt
.noswbrkpt
	  1360      "11110111" // 	                                                                      MOV r4, r8.FX2FLT, s2;        VSHL0.32 wc1, r4;             VEXT.32 r8, vrl2[3] /* MW 8 */
	  1361      "10100111" // /* MW 7 */
	  1362      "00001001" // /* MW 6 */
	  1363      "00101001" // /* MW 5 */
	  1364      "10010100" // /* MW 4 */
	  1365      "01000110" // /* MW 3 */
	  1366      "00001000" // /* MW 2 */
	  1367      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1368      "11110111" // 	                                                                      MOV r1, r8.FX2FLT, s2;        VSHL0.32 wc1, r1;             VEXT.32 r9, vrl2[2] /* MW 8 */
	  1369      "00100111" // /* MW 7 */
	  1370      "00101001" // /* MW 6 */
	  1371      "00101001" // /* MW 5 */
	  1372      "10010001" // /* MW 4 */
	  1373      "00010110" // /* MW 3 */
	  1374      "00001000" // /* MW 2 */
	  1375      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1376      "11110111" // 	                                                                      MOV r9, r9.FX2FLT, s2;        VSHL0.32 wc1, r4;             VEXT.32 r8, vrl2[1] /* MW 8 */
	  1377      "10100111" // /* MW 7 */
	  1378      "00001000" // /* MW 6 */
	  1379      "00101001" // /* MW 5 */
	  1380      "10010100" // /* MW 4 */
	  1381      "10010110" // /* MW 3 */
	  1382      "00001001" // /* MW 2 */
	  1383      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1384      "11110111" // 	                                                                      MOV r4, r8.FX2FLT, s2;        VSHL0.32 wc1, r1;             VEXT.32 r8, vrl2[0] /* MW 8 */
	  1385      "00100111" // /* MW 7 */
	  1386      "00001000" // /* MW 6 */
	  1387      "00101001" // /* MW 5 */
	  1388      "10010001" // /* MW 4 */
	  1389      "01000110" // /* MW 3 */
	  1390      "00001000" // /* MW 2 */
	  1391      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1392      "01110111" // 	NOP;                                                                  MOV r15, r8.FX2FLT, s2;       VSHL0.32 wc1, r9 /* MW 8 */
	  1393      "00011110" // /* MW 7 */
	  1394      "10000001" // /* MW 6 */
	  1395      "10000001" // /* MW 5 */
	  1396      "10010010" // /* MW 4 */
	  1397      "00101001" // /* MW 3 */
	  1398      "00000000" // /* MW 2 */
	  1399      "00000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1400      "00000011" // 	NOP;                                                                                                VSHL0.32 wc1, r4 /* MW 4 */
	  1401      "00011000" // /* MW 3 */
	  1402      "10000101" // /* MW 2 */
	  1403      "01010010" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1404      "00000011" // 	NOP;                                                                                                VSHL0.32 wc1, r15 /* MW 4 */
	  1405      "00011000" // /* MW 3 */
	  1406      "11100101" // /* MW 2 */
	  1407      "01010011" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 72 12 first
.nohwbrkpt
.noswbrkpt
	  1408      "00000111" // 	NOP;                                    NOP;                                                                                                                              VFPMUL wd1, r4, ya, r12, cl2, wc1, #0, cl2, #0, cl5 /* MW 8 */
	  1409      "01010110" // /* MW 7 */
	  1410      "00000010" // /* MW 6 */
	  1411      "01110011" // /* MW 5 */
	  1412      "10000001" // /* MW 4 */
	  1413      "00000000" // /* MW 3 */
	  1414      "00000000" // /* MW 2 */
	  1415      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1416      "00000001" // 	NOP /* MW 2 */
	  1417      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1418      "00000001" // 	NOP /* MW 2 */
	  1419      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1420      "00000001" // 	NOP /* MW 2 */
	  1421      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1422      "00000001" // 	NOP /* MW 2 */
	  1423      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1424      "11110111" // 	                                        NOP;                                                        VST.SPIL wd1, [sp, #-448];    NOP /* MW 8 */
	  1425      "00000111" // /* MW 7 */
	  1426      "01000000" // /* MW 6 */
	  1427      "11111110" // /* MW 5 */
	  1428      "11101110" // /* MW 4 */
	  1429      "00000000" // /* MW 3 */
	  1430      "00000000" // /* MW 2 */
	  1431      "10000000" // /* MW 1 */
.src_ref 3 "shift.hpp" 65 102
.nohwbrkpt
.noswbrkpt
	  1432      "00000011" // 	NOP;                                                                                                VMOV wd0, wd1 /* MW 4 */
	  1433      "10011000" // /* MW 3 */
	  1434      "11101110" // /* MW 2 */
	  1435      "01001001" // /* MW 1 */
.src_ref 3 "shift.hpp" 65 102 first
.nohwbrkpt
.noswbrkpt
	  1436      "01110111" // 	VLDA wr3, [sp, #-160];                                                NOP;                          VMOV.48.UPSL aml0, wd0, s0 /* MW 8 */
	  1437      "00000000" // /* MW 7 */
	  1438      "00000000" // /* MW 6 */
	  1439      "00000000" // /* MW 5 */
	  1440      "00100010" // /* MW 4 */
	  1441      "11100000" // /* MW 3 */
	  1442      "11111110" // /* MW 2 */
	  1443      "00001110" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
.nohwbrkpt
.noswbrkpt
	  1444      "01110111" // 	VLDA wr2, [sp, #-128];                  NOP;                                                                                      VEXT.32 r15, vdh1[3] /* MW 8 */
	  1445      "00000000" // /* MW 7 */
	  1446      "00000000" // /* MW 6 */
	  1447      "00110000" // /* MW 5 */
	  1448      "11110100" // /* MW 4 */
	  1449      "00111111" // /* MW 3 */
	  1450      "11111111" // /* MW 2 */
	  1451      "00001010" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23
.nohwbrkpt
.noswbrkpt
	  1452      "01110111" // 	NOP;                                    NOP;                                                                                      VEXT.32 r13, vdl1[0] /* MW 8 */
	  1453      "00000000" // /* MW 7 */
	  1454      "00000000" // /* MW 6 */
	  1455      "00110000" // /* MW 5 */
	  1456      "10000100" // /* MW 4 */
	  1457      "00110111" // /* MW 3 */
	  1458      "00000000" // /* MW 2 */
	  1459      "00000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 532 24 first
.nohwbrkpt
.noswbrkpt
	  1460      "01111111" // 	NOP;                NOP;                NOP;                          AND r8, r10, r13;                                           VEXT.32 r13, vdl1[1] /* MW 12 */
	  1461      "11001010" // /* MW 11 */
	  1462      "00011011" // /* MW 10 */
	  1463      "10110101" // /* MW 9 */
	  1464      "01101001" // /* MW 8 */
	  1465      "00000000" // /* MW 7 */
	  1466      "00000000" // /* MW 6 */
	  1467      "00010000" // /* MW 5 */
	  1468      "00000000" // /* MW 4 */
	  1469      "00000000" // /* MW 3 */
	  1470      "00000000" // /* MW 2 */
	  1471      "00000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 532 24
.nohwbrkpt
.noswbrkpt
	  1472      "01111111" // 	NOP;                NOP;                NOP;                          AND r4, r10, r13;                                           VEXT.32 r13, vdl1[2] /* MW 12 */
	  1473      "11010010" // /* MW 11 */
	  1474      "10011011" // /* MW 10 */
	  1475      "10110100" // /* MW 9 */
	  1476      "01101001" // /* MW 8 */
	  1477      "00000000" // /* MW 7 */
	  1478      "00000000" // /* MW 6 */
	  1479      "00010000" // /* MW 5 */
	  1480      "00000000" // /* MW 4 */
	  1481      "00000000" // /* MW 3 */
	  1482      "00000000" // /* MW 2 */
	  1483      "00000000" // /* MW 1 */
.src_ref 3 "shift.hpp" 78 102 first
.src_ref 3 "vector.hpp" 567 27 first
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 532 24 first
.nohwbrkpt
.noswbrkpt
	  1484      "01111111" // 	NOP;                NOP;                VMOVS.48.SRSL wd0, aml0, s1;  AND r1, r10, r13;                                           VEXT.32 r13, vdl1[3] /* MW 12 */
	  1485      "11011010" // /* MW 11 */
	  1486      "00111011" // /* MW 10 */
	  1487      "10110100" // /* MW 9 */
	  1488      "01101001" // /* MW 8 */
	  1489      "10001100" // /* MW 7 */
	  1490      "01000001" // /* MW 6 */
	  1491      "00010010" // /* MW 5 */
	  1492      "00000000" // /* MW 4 */
	  1493      "00000000" // /* MW 3 */
	  1494      "00000000" // /* MW 2 */
	  1495      "00000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 532 24
.nohwbrkpt
.noswbrkpt
	  1496      "01111111" // 	NOP;                NOP;                NOP;                          AND r7, r10, r13;                                           VEXT.32 r13, vdh1[0] /* MW 12 */
	  1497      "11100010" // /* MW 11 */
	  1498      "11111011" // /* MW 10 */
	  1499      "10110100" // /* MW 9 */
	  1500      "01101001" // /* MW 8 */
	  1501      "00000000" // /* MW 7 */
	  1502      "00000000" // /* MW 6 */
	  1503      "00010000" // /* MW 5 */
	  1504      "00000000" // /* MW 4 */
	  1505      "00000000" // /* MW 3 */
	  1506      "00000000" // /* MW 2 */
	  1507      "00000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 532 24 first
.nohwbrkpt
.noswbrkpt
	  1508      "01111111" // 	NOP;                NOP;                NOP;                          AND r9, r10, r13;                                           VEXT.32 r13, vdh1[1] /* MW 12 */
	  1509      "11101010" // /* MW 11 */
	  1510      "00111011" // /* MW 10 */
	  1511      "10110101" // /* MW 9 */
	  1512      "01101001" // /* MW 8 */
	  1513      "00000000" // /* MW 7 */
	  1514      "00000000" // /* MW 6 */
	  1515      "00010000" // /* MW 5 */
	  1516      "00000000" // /* MW 4 */
	  1517      "00000000" // /* MW 3 */
	  1518      "00000000" // /* MW 2 */
	  1519      "00000000" // /* MW 1 */
.src_ref 3 "add.hpp" 300 53 first
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 532 24
.nohwbrkpt
.noswbrkpt
	  1520      "11110100" // 	NOP;NOP;                                NOP;                          AND r14, r10, r13;            VUPD.32 vrh2[0], r9;          VEXT.32 r13, vdh1[2];                   VCMP xd, r5, yd.s32, r12, c1, r6, c0, c3 /* MW 16 */
	  1521      "00010000" // /* MW 15 */
	  1522      "01110011" // /* MW 14 */
	  1523      "00000011" // /* MW 13 */
	  1524      "00000000" // /* MW 12 */
	  1525      "11110010" // /* MW 11 */
	  1526      "11011011" // /* MW 10 */
	  1527      "10110101" // /* MW 9 */
	  1528      "01101001" // /* MW 8 */
	  1529      "00000000" // /* MW 7 */
	  1530      "00000000" // /* MW 6 */
	  1531      "01000000" // /* MW 5 */
	  1532      "10011101" // /* MW 4 */
	  1533      "00010001" // /* MW 3 */
	  1534      "00000000" // /* MW 2 */
	  1535      "00000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23
.nohwbrkpt
.noswbrkpt
	  1536      "11110111" // 	                                        VST wd1, [sp, #-416];         NOP;                          VUPD.32 vrl2[0], r8 /* MW 8 */
	  1537      "01101000" // /* MW 7 */
	  1538      "10001100" // /* MW 6 */
	  1539      "00000000" // /* MW 5 */
	  1540      "00000000" // /* MW 4 */
	  1541      "00110000" // /* MW 3 */
	  1542      "10111111" // /* MW 2 */
	  1543      "01110111" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23
.nohwbrkpt
.noswbrkpt
	  1544      "00000011" // 	NOP;                                                                                                VUPD.32 vrh2[1], r14 /* MW 4 */
	  1545      "10011000" // /* MW 3 */
	  1546      "11011010" // /* MW 2 */
	  1547      "00101011" // /* MW 1 */
.src_ref 3 "vector.hpp" 1041 35 first
.nohwbrkpt
.noswbrkpt
	  1548      "00000011" // 	NOP;                                                                                                VMOV wc1, wd0 /* MW 4 */
	  1549      "10011000" // /* MW 3 */
	  1550      "10101101" // /* MW 2 */
	  1551      "01001001" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 6 "vector.hpp" 532 24 first
.nohwbrkpt
.noswbrkpt
	  1552      "01110111" // 	NOP;                                                                  AND r15, r10, r15;            VMOV vrh3, vch1 /* MW 8 */
	  1553      "01011110" // /* MW 7 */
	  1554      "10011111" // /* MW 6 */
	  1555      "11000110" // /* MW 5 */
	  1556      "10110101" // /* MW 4 */
	  1557      "00100110" // /* MW 3 */
	  1558      "00000000" // /* MW 2 */
	  1559      "00000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 6 "vector.hpp" 532 24
.nohwbrkpt
.noswbrkpt
	  1560      "11110111" // 	                                                                      AND r13, r10, r13;            VUPD.32 vrl2[1], r4;          VEXT.32 r0, vrh3[3] /* MW 8 */
	  1561      "10100111" // /* MW 7 */
	  1562      "00001111" // /* MW 6 */
	  1563      "11010000" // /* MW 5 */
	  1564      "01010100" // /* MW 4 */
	  1565      "11010101" // /* MW 3 */
	  1566      "11011010" // /* MW 2 */
	  1567      "00110100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "vector.hpp" 691 23
.nohwbrkpt
.noswbrkpt
	  1568      "11110111" // 	                                                                      MOV r5, r0.FX2FLT, s2;        VUPD.32 vrl2[2], r1;          VEXT.32 r2, vrh3[1] /* MW 8 */
	  1569      "10100111" // /* MW 7 */
	  1570      "01001110" // /* MW 6 */
	  1571      "11010000" // /* MW 5 */
	  1572      "10010001" // /* MW 4 */
	  1573      "01010101" // /* MW 3 */
	  1574      "00000000" // /* MW 2 */
	  1575      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1576      "11110111" // 	                                                                      MOV r7, r2.FX2FLT, s2;        VMOV vrl3, vcl1;              VEXT.32 r0, vrh3[2] /* MW 8 */
	  1577      "00100111" // /* MW 7 */
	  1578      "00001111" // /* MW 6 */
	  1579      "01011000" // /* MW 5 */
	  1580      "01101010" // /* MW 4 */
	  1581      "01110110" // /* MW 3 */
	  1582      "00000010" // /* MW 2 */
	  1583      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "vector.hpp" 691 23 first
.nohwbrkpt
.noswbrkpt
	  1584      "11110111" // 	                                                                      MOV r0, r0.FX2FLT, s2;        VUPD.32 vrl2[3], r7;          VSHL1.32 wc1, r5 /* MW 8 */
	  1585      "01000111" // /* MW 7 */
	  1586      "01100101" // /* MW 6 */
	  1587      "11010001" // /* MW 5 */
	  1588      "11010111" // /* MW 4 */
	  1589      "00000101" // /* MW 3 */
	  1590      "00000000" // /* MW 2 */
	  1591      "00001100" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 744 23 first
.nohwbrkpt
.noswbrkpt
	  1592      "11110111" // 	                                        NOP;                                                        VUPD.32 vrh2[2], r13;         VEXT.32 r13, vrl2[0] /* MW 8 */
	  1593      "00100111" // /* MW 7 */
	  1594      "10101000" // /* MW 6 */
	  1595      "11010101" // /* MW 5 */
	  1596      "10011101" // /* MW 4 */
	  1597      "00000101" // /* MW 3 */
	  1598      "00000000" // /* MW 2 */
	  1599      "10000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 543 24 first
.nohwbrkpt
.noswbrkpt
	  1600      "11110111" // 	                                                                      OR r5, r13, r11;              VUPD.32 vrh2[3], r15;         VEXT.32 r14, vrl2[1] /* MW 8 */
	  1601      "10100111" // /* MW 7 */
	  1602      "11001000" // /* MW 6 */
	  1603      "11010101" // /* MW 5 */
	  1604      "11011111" // /* MW 4 */
	  1605      "01010101" // /* MW 3 */
	  1606      "10111101" // /* MW 2 */
	  1607      "00110101" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 543 24
.nohwbrkpt
.noswbrkpt
	  1608      "11110111" // 	                                                                      OR r5, r14, r11;              VUPD.32 vcl0[0], r5;          VEXT.32 r14, vrl2[2] /* MW 8 */
	  1609      "00100111" // /* MW 7 */
	  1610      "11001001" // /* MW 6 */
	  1611      "11100001" // /* MW 5 */
	  1612      "00010101" // /* MW 4 */
	  1613      "01010101" // /* MW 3 */
	  1614      "10111110" // /* MW 2 */
	  1615      "00110101" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 543 24 first
.nohwbrkpt
.noswbrkpt
	  1616      "11110111" // 	                                                                      OR r5, r14, r11;              VUPD.32 vcl0[1], r5;          VEXT.32 r14, vrl2[3] /* MW 8 */
	  1617      "10100111" // /* MW 7 */
	  1618      "11001001" // /* MW 6 */
	  1619      "11100001" // /* MW 5 */
	  1620      "01010101" // /* MW 4 */
	  1621      "01010101" // /* MW 3 */
	  1622      "10111110" // /* MW 2 */
	  1623      "00110101" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 543 24
.nohwbrkpt
.noswbrkpt
	  1624      "01111111" // 	VLDA wc0, [sp, #-224];                  NOP;                          OR r5, r14, r11;              VUPD.32 vcl0[2], r5;          VEXT.32 r14, vrh2[0] /* MW 12 */
	  1625      "10100010" // /* MW 11 */
	  1626      "10111100" // /* MW 10 */
	  1627      "01111100" // /* MW 9 */
	  1628      "01101011" // /* MW 8 */
	  1629      "00000000" // /* MW 7 */
	  1630      "00000000" // /* MW 6 */
	  1631      "00000000" // /* MW 5 */
	  1632      "01011110" // /* MW 4 */
	  1633      "01011001" // /* MW 3 */
	  1634      "11111110" // /* MW 2 */
	  1635      "00010010" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 543 24 first
.nohwbrkpt
.noswbrkpt
	  1636      "11110111" // 	                                                                      OR r5, r14, r11;              VUPD.32 vcl0[3], r5;          VEXT.32 r14, vrh2[1] /* MW 8 */
	  1637      "10100111" // /* MW 7 */
	  1638      "11001010" // /* MW 6 */
	  1639      "11100001" // /* MW 5 */
	  1640      "11010101" // /* MW 4 */
	  1641      "01010101" // /* MW 3 */
	  1642      "10111110" // /* MW 2 */
	  1643      "00110101" // /* MW 1 */
.src_ref 3 "vector.hpp" 691 23
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 3 "vector.hpp" 744 23 first
.src_ref 6 "vector.hpp" 543 24
.nohwbrkpt
.noswbrkpt
	  1644      "11110111" // 	                                                                      OR r5, r14, r11;              VUPD.32 vch0[0], r5;          VEXT.32 r14, vrh2[2] /* MW 8 */
	  1645      "00100111" // /* MW 7 */
	  1646      "11001011" // /* MW 6 */
	  1647      "11100101" // /* MW 5 */
	  1648      "00010101" // /* MW 4 */
	  1649      "01010101" // /* MW 3 */
	  1650      "10111110" // /* MW 2 */
	  1651      "00110101" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 3 "vector.hpp" 691 23 first
.src_ref 3 "vector.hpp" 744 23
.src_ref 3 "vector.hpp" 744 23
.src_ref 6 "vector.hpp" 543 24 first
.nohwbrkpt
.noswbrkpt
	  1652      "01111111" // 	VLDA wr2, [sp, #-192];                  NOP;                          OR r5, r14, r11;              VUPD.32 vch0[1], r5;          VEXT.32 r14, vrh2[3] /* MW 12 */
	  1653      "10111010" // /* MW 11 */
	  1654      "10111100" // /* MW 10 */
	  1655      "01111100" // /* MW 9 */
	  1656      "01101011" // /* MW 8 */
	  1657      "00000000" // /* MW 7 */
	  1658      "00000000" // /* MW 6 */
	  1659      "01000000" // /* MW 5 */
	  1660      "01011110" // /* MW 4 */
	  1661      "10010101" // /* MW 3 */
	  1662      "11111110" // /* MW 2 */
	  1663      "00001010" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "vector.hpp" 691 23
.src_ref 6 "vector.hpp" 543 24
.nohwbrkpt
.noswbrkpt
	  1664      "11110111" // 	                                                                      OR r5, r14, r11;              VUPD.32 vch0[2], r5;          VEXT.32 r2, vrh3[0] /* MW 8 */
	  1665      "00100111" // /* MW 7 */
	  1666      "01001110" // /* MW 6 */
	  1667      "11100100" // /* MW 5 */
	  1668      "10010101" // /* MW 4 */
	  1669      "01010101" // /* MW 3 */
	  1670      "10111110" // /* MW 2 */
	  1671      "00110101" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "vector.hpp" 691 23 first
.nohwbrkpt
.noswbrkpt
	  1672      "11110111" // 	                                        NOP;                                                        VUPD.32 vch0[3], r5;          VSHL1.32 wc1, r0 /* MW 8 */
	  1673      "01000111" // /* MW 7 */
	  1674      "01100000" // /* MW 6 */
	  1675      "11100101" // /* MW 5 */
	  1676      "11010101" // /* MW 4 */
	  1677      "00000101" // /* MW 3 */
	  1678      "00000000" // /* MW 2 */
	  1679      "10000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.nohwbrkpt
.noswbrkpt
	  1680      "11110111" // 	                                                                      MOV r2, r2.FX2FLT, s2;        VMOV wd0, wc0;                VEXT.32 r0, vrl3[3] /* MW 8 */
	  1681      "10100111" // /* MW 7 */
	  1682      "00001101" // /* MW 6 */
	  1683      "01110100" // /* MW 5 */
	  1684      "01001001" // /* MW 4 */
	  1685      "00100110" // /* MW 3 */
	  1686      "00000010" // /* MW 2 */
	  1687      "00001100" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8 first
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1688      "01010000" // 	NOP;                NOP;                NOP;                          MOV r0, r0.FX2FLT, s2;NOP;                                  VEXT.32 r14, vrl3[2];                   VFPMAC wd1, r0, wr2, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 16 */
	  1689      "00100101" // /* MW 15 */
	  1690      "00011000" // /* MW 14 */
	  1691      "00100110" // /* MW 13 */
	  1692      "00001000" // /* MW 12 */
	  1693      "11010010" // /* MW 11 */
	  1694      "00011100" // /* MW 10 */
	  1695      "00000000" // /* MW 9 */
	  1696      "00011000" // /* MW 8 */
	  1697      "00000000" // /* MW 7 */
	  1698      "00000000" // /* MW 6 */
	  1699      "00010000" // /* MW 5 */
	  1700      "00000000" // /* MW 4 */
	  1701      "00000000" // /* MW 3 */
	  1702      "00000000" // /* MW 2 */
	  1703      "00000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.src_ref 3 "elementary.hpp" 225 41 first
.nohwbrkpt
.noswbrkpt
	  1704      "11110111" // 	                                                                      MOV r5, r14.FX2FLT, s2;       VSHL0.32 wc1, r7;             VEXT.32 r14, vrl3[0] /* MW 8 */
	  1705      "00100111" // /* MW 7 */
	  1706      "11001100" // /* MW 6 */
	  1707      "00101001" // /* MW 5 */
	  1708      "10010111" // /* MW 4 */
	  1709      "01010110" // /* MW 3 */
	  1710      "00001110" // /* MW 2 */
	  1711      "00001100" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1712      "11110111" // 	                                                                      MOV r2, r14.FX2FLT, s2;       VSHL0.32 wc1, r2;             VEXT.32 r14, vrl3[1] /* MW 8 */
	  1713      "10100111" // /* MW 7 */
	  1714      "11001100" // /* MW 6 */
	  1715      "00101001" // /* MW 5 */
	  1716      "10010010" // /* MW 4 */
	  1717      "00100110" // /* MW 3 */
	  1718      "00001110" // /* MW 2 */
	  1719      "00001100" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.src_ref 3 "elementary.hpp" 225 41
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1720      "01110111" // 	VLDA wr2, [sp, #-256];                                                MOV r0, r14.FX2FLT, s2;       VSHL0.32 wc1, r0 /* MW 8 */
	  1721      "11000000" // /* MW 7 */
	  1722      "10000001" // /* MW 6 */
	  1723      "10000001" // /* MW 5 */
	  1724      "00000010" // /* MW 4 */
	  1725      "00101001" // /* MW 3 */
	  1726      "11111110" // /* MW 2 */
	  1727      "00001010" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1728      "00000011" // 	NOP;                                                                                                VSHL0.32 wc1, r5 /* MW 4 */
	  1729      "00011000" // /* MW 3 */
	  1730      "10100101" // /* MW 2 */
	  1731      "01010010" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41
.nohwbrkpt
.noswbrkpt
	  1732      "00000011" // 	NOP;                                                                                                VSHL0.32 wc1, r0 /* MW 4 */
	  1733      "00011000" // /* MW 3 */
	  1734      "00000101" // /* MW 2 */
	  1735      "01010010" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1736      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1737      "10011000" // /* MW 3 */
	  1738      "11101100" // /* MW 2 */
	  1739      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8 first
.src_ref 5 "entropy_vect.cpp" 246 12 first
.nohwbrkpt
.noswbrkpt
	  1740      "10000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd1, r2, wr2, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1741      "01010101" // /* MW 7 */
	  1742      "10000010" // /* MW 6 */
	  1743      "01100001" // /* MW 5 */
	  1744      "10000010" // /* MW 4 */
	  1745      "00000000" // /* MW 3 */
	  1746      "00000000" // /* MW 2 */
	  1747      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1748      "00000001" // 	NOP /* MW 2 */
	  1749      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1750      "00000001" // 	NOP /* MW 2 */
	  1751      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1752      "11110111" // 	                                        NOP;                                                        VLDA.SPIL wr2, [sp, #-288];   NOP /* MW 8 */
	  1753      "00100111" // /* MW 7 */
	  1754      "11011100" // /* MW 6 */
	  1755      "10010011" // /* MW 5 */
	  1756      "11000111" // /* MW 4 */
	  1757      "00000000" // /* MW 3 */
	  1758      "00000000" // /* MW 2 */
	  1759      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1760      "00000001" // 	NOP /* MW 2 */
	  1761      "00000000" // /* MW 1 */
.src_ref 3 "elementary.hpp" 225 41 first
.nohwbrkpt
.noswbrkpt
	  1762      "00000011" // 	NOP;                                                                                                VSHL0.32 wc1, r2 /* MW 4 */
	  1763      "00011000" // /* MW 3 */
	  1764      "01000101" // /* MW 2 */
	  1765      "01010010" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1766      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1767      "10011000" // /* MW 3 */
	  1768      "11101100" // /* MW 2 */
	  1769      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8 first
.src_ref 5 "entropy_vect.cpp" 246 12 first
.nohwbrkpt
.noswbrkpt
	  1770      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd1, r3, wr2, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1771      "01010101" // /* MW 7 */
	  1772      "10000010" // /* MW 6 */
	  1773      "01100001" // /* MW 5 */
	  1774      "10000010" // /* MW 4 */
	  1775      "00000000" // /* MW 3 */
	  1776      "00000000" // /* MW 2 */
	  1777      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1778      "00000001" // 	NOP /* MW 2 */
	  1779      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1780      "00000001" // 	NOP /* MW 2 */
	  1781      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1782      "11110111" // 	                                        NOP;                                                        VLDA.SPIL wr3, [sp, #-320];   NOP /* MW 8 */
	  1783      "00100111" // /* MW 7 */
	  1784      "11011000" // /* MW 6 */
	  1785      "10011011" // /* MW 5 */
	  1786      "11000111" // /* MW 4 */
	  1787      "00000000" // /* MW 3 */
	  1788      "00000000" // /* MW 2 */
	  1789      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1790      "00000001" // 	NOP /* MW 2 */
	  1791      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1792      "00000001" // 	NOP /* MW 2 */
	  1793      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1794      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1795      "10011000" // /* MW 3 */
	  1796      "11101100" // /* MW 2 */
	  1797      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1798      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd1, r3, wr3, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1799      "01010101" // /* MW 7 */
	  1800      "10000010" // /* MW 6 */
	  1801      "11100001" // /* MW 5 */
	  1802      "10000010" // /* MW 4 */
	  1803      "00000000" // /* MW 3 */
	  1804      "00000000" // /* MW 2 */
	  1805      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1806      "00000001" // 	NOP /* MW 2 */
	  1807      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1808      "00000001" // 	NOP /* MW 2 */
	  1809      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1810      "11110111" // 	                                        NOP;                                                        VLDA.SPIL wr3, [sp, #-352];   NOP /* MW 8 */
	  1811      "00100111" // /* MW 7 */
	  1812      "11010100" // /* MW 6 */
	  1813      "10011011" // /* MW 5 */
	  1814      "11000111" // /* MW 4 */
	  1815      "00000000" // /* MW 3 */
	  1816      "00000000" // /* MW 2 */
	  1817      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1818      "00000001" // 	NOP /* MW 2 */
	  1819      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1820      "00000001" // 	NOP /* MW 2 */
	  1821      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1822      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1823      "10011000" // /* MW 3 */
	  1824      "11101100" // /* MW 2 */
	  1825      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1826      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd1, r3, wr3, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1827      "01010101" // /* MW 7 */
	  1828      "10000010" // /* MW 6 */
	  1829      "11100001" // /* MW 5 */
	  1830      "10000010" // /* MW 4 */
	  1831      "00000000" // /* MW 3 */
	  1832      "00000000" // /* MW 2 */
	  1833      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1834      "00000001" // 	NOP /* MW 2 */
	  1835      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1836      "00000001" // 	NOP /* MW 2 */
	  1837      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1838      "11110111" // 	                                        NOP;                                                        VLDA.SPIL wr3, [sp, #-384];   NOP /* MW 8 */
	  1839      "00100111" // /* MW 7 */
	  1840      "11010000" // /* MW 6 */
	  1841      "10011011" // /* MW 5 */
	  1842      "11000111" // /* MW 4 */
	  1843      "00000000" // /* MW 3 */
	  1844      "00000000" // /* MW 2 */
	  1845      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1846      "00000001" // 	NOP /* MW 2 */
	  1847      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1848      "00000001" // 	NOP /* MW 2 */
	  1849      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1850      "00000011" // 	NOP;                                                                                                VMOV wc0, wd1 /* MW 4 */
	  1851      "10011000" // /* MW 3 */
	  1852      "11101100" // /* MW 2 */
	  1853      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 244 8
.src_ref 5 "entropy_vect.cpp" 246 12
.nohwbrkpt
.noswbrkpt
	  1854      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd0, r3, wr3, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1855      "01010101" // /* MW 7 */
	  1856      "10000010" // /* MW 6 */
	  1857      "11000001" // /* MW 5 */
	  1858      "10000010" // /* MW 4 */
	  1859      "00000000" // /* MW 3 */
	  1860      "00000000" // /* MW 2 */
	  1861      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1862      "00000001" // 	NOP /* MW 2 */
	  1863      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1864      "00000001" // 	NOP /* MW 2 */
	  1865      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1866      "00000001" // 	NOP /* MW 2 */
	  1867      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1868      "00000001" // 	NOP /* MW 2 */
	  1869      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  1870      "00000001" // 	NOP /* MW 2 */
	  1871      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 249 11 first
.nohwbrkpt
.noswbrkpt
	  1872      "00011100" // 	NOP;                NOP;                NOP;                          NOP;                          NOP;                          NOP;                                    VFPMAC wd0, r3, wr2, yd, r6, cl2, wc0, #0, cl0, #0, cl4 /* MW 16 */
	  1873      "00100001" // /* MW 15 */
	  1874      "00011000" // /* MW 14 */
	  1875      "00100100" // /* MW 13 */
	  1876      "10001000" // /* MW 12 */
	  1877      "00000000" // /* MW 11 */
	  1878      "00000000" // /* MW 10 */
	  1879      "00000000" // /* MW 9 */
	  1880      "01000000" // /* MW 8 */
	  1881      "00000000" // /* MW 7 */
	  1882      "00000000" // /* MW 6 */
	  1883      "00010000" // /* MW 5 */
	  1884      "00000000" // /* MW 4 */
	  1885      "00000000" // /* MW 3 */
	  1886      "00000000" // /* MW 2 */
	  1887      "00000000" // /* MW 1 */
.label ZLE_F_main_1616
.end_of_loop
.nohwbrkpt
.noswbrkpt
	  1888      "00000010" // 	NOP;                NOP;                NOP;                          NOP;                          NOP;                          NOP;                                    NOP /* MW 16 */
	  1889      "00000000" // /* MW 15 */
	  1890      "00000000" // /* MW 14 */
	  1891      "00000000" // /* MW 13 */
	  1892      "00000000" // /* MW 12 */
	  1893      "00000000" // /* MW 11 */
	  1894      "00000000" // /* MW 10 */
	  1895      "00000000" // /* MW 9 */
	  1896      "00000000" // /* MW 8 */
	  1897      "00000000" // /* MW 7 */
	  1898      "00000000" // /* MW 6 */
	  1899      "00000000" // /* MW 5 */
	  1900      "00000000" // /* MW 4 */
	  1901      "00000000" // /* MW 3 */
	  1902      "00000000" // /* MW 2 */
	  1903      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 74 14
.src_ref 5 "entropy_vect.cpp" 249 11
.nohwbrkpt
.noswbrkpt
.loop_nesting 2
	  1904      "01110111" // 	VLDA wc0, [sp, #-416];                                                NOP;                          VMOV wr2, wc1 /* MW 8 */
	  1905      "00000000" // /* MW 7 */
	  1906      "00000000" // /* MW 6 */
	  1907      "01000000" // /* MW 5 */
	  1908      "10110101" // /* MW 4 */
	  1909      "11100100" // /* MW 3 */
	  1910      "11111100" // /* MW 2 */
	  1911      "00010010" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 74 14
.src_ref 2 "27_0.cc" 45 7
.src_ref 2 "27_0.cc" 45 24
	  1912      "01110111" // 	VLDA wr3, [sp, #-448];                                                NOP;                          MOV r13, ch2 /* MW 8 */
	  1913      "00000000" // /* MW 7 */
	  1914      "00000000" // /* MW 6 */
	  1915      "01000000" // /* MW 5 */
	  1916      "00101111" // /* MW 4 */
	  1917      "10000100" // /* MW 3 */
	  1918      "11111100" // /* MW 2 */
	  1919      "00001110" // /* MW 1 */
.src_ref 2 "27_0.cc" 45 24 first
	  1920      "00000011" // 	NOP;                                                                  LT r14, r12, r13 /* MW 4 */
	  1921      "11100000" // /* MW 3 */
	  1922      "11011100" // /* MW 2 */
	  1923      "00111011" // /* MW 1 */
.src_ref 2 "27_0.cc" 45 7
	  1924      "00000011" // 	NOP;                                                                  SUB r4, r13, r14 /* MW 4 */
	  1925      "01000000" // /* MW 3 */
	  1926      "11101101" // /* MW 2 */
	  1927      "00110001" // /* MW 1 */
	  1928      "00000001" // 	NOP /* MW 2 */
	  1929      "00000000" // /* MW 1 */
	  1930      "00000001" // 	NOP /* MW 2 */
	  1931      "00000000" // /* MW 1 */
	  1932      "00000001" // 	NOP /* MW 2 */
	  1933      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 74 14 first
	  1934      "11000111" // 	NOP;                                    NOP;                                                                                                                              VFPMAC wd1, r3, wr3, yd, r6, cl2, wc0, #0, cl2, #0, cl5 /* MW 8 */
	  1935      "01010101" // /* MW 7 */
	  1936      "10000010" // /* MW 6 */
	  1937      "11100001" // /* MW 5 */
	  1938      "10000010" // /* MW 4 */
	  1939      "00000000" // /* MW 3 */
	  1940      "00000000" // /* MW 2 */
	  1941      "10000000" // /* MW 1 */
	  1942      "00000001" // 	NOP /* MW 2 */
	  1943      "00000000" // /* MW 1 */
	  1944      "00000001" // 	NOP /* MW 2 */
	  1945      "00000000" // /* MW 1 */
	  1946      "00000001" // 	NOP /* MW 2 */
	  1947      "00000000" // /* MW 1 */
	  1948      "00000001" // 	NOP /* MW 2 */
	  1949      "00000000" // /* MW 1 */
	  1950      "00000001" // 	NOP /* MW 2 */
	  1951      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 76 10 first
	  1952      "00000011" // 	NOP;                                                                                                VMOV wr0, wd1 /* MW 4 */
	  1953      "10011000" // /* MW 3 */
	  1954      "11101000" // /* MW 2 */
	  1955      "01001001" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 76 10
	  1956      "10000111" // 	NOP;                                    NOP;                                                                                                                              VFPMUL wd1, r6, ya, r12, cl2, wc0, #0, cl0, #1, cl4 /* MW 8 */
	  1957      "00010000" // /* MW 7 */
	  1958      "00000010" // /* MW 6 */
	  1959      "01110111" // /* MW 5 */
	  1960      "10000001" // /* MW 4 */
	  1961      "00000000" // /* MW 3 */
	  1962      "00000000" // /* MW 2 */
	  1963      "10000000" // /* MW 1 */
	  1964      "00000001" // 	NOP /* MW 2 */
	  1965      "00000000" // /* MW 1 */
	  1966      "00000001" // 	NOP /* MW 2 */
	  1967      "00000000" // /* MW 1 */
	  1968      "00000001" // 	NOP /* MW 2 */
	  1969      "00000000" // /* MW 1 */
	  1970      "00000001" // 	NOP /* MW 2 */
	  1971      "00000000" // /* MW 1 */
.src_ref 2 "27_0.cc" 36 2 first
.src_ref 2 "27_0.cc" 36 9 first
	  1972      "11110111" // 	                                        NOP;                                                        BNEZ r4,#560;                 NOP /* MW 8 */
	  1973      "00000111" // /* MW 7 */
	  1974      "00100011" // /* MW 6 */
	  1975      "10000000" // /* MW 5 */
	  1976      "10010000" // /* MW 4 */
	  1977      "00000000" // /* MW 3 */
	  1978      "00000000" // /* MW 2 */
	  1979      "10000000" // /* MW 1 */
.src_ref 4 "stream_utils.h" 213 8 first
.src_ref 3 "vector.hpp" 1043 35 first
.delay_slot
	  1980      "01110111" // 	NOP;                                    NOP;                                                                                      VMOV1 WMS.md0[10], vdl1, #0 /* MW 8 */
	  1981      "00000000" // /* MW 7 */
	  1982      "00000000" // /* MW 6 */
	  1983      "00110000" // /* MW 5 */
	  1984      "10100000" // /* MW 4 */
	  1985      "00000011" // /* MW 3 */
	  1986      "00000000" // /* MW 2 */
	  1987      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  1988      "00000001" // 	NOP /* MW 2 */
	  1989      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  1990      "00000001" // 	NOP /* MW 2 */
	  1991      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  1992      "00110111" // 	NOP;                                    NOP;                          NOP /* MW 8 */
	  1993      "00000000" // /* MW 7 */
	  1994      "00000000" // /* MW 6 */
	  1995      "00000000" // /* MW 5 */
	  1996      "00000000" // /* MW 4 */
	  1997      "00000000" // /* MW 3 */
	  1998      "00000000" // /* MW 2 */
	  1999      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 67 35
.src_ref 4 "stream_utils.h" 213 8
.src_ref 3 "vector.hpp" 1043 35
.delay_slot
	  2000      "00000000" // 	NOP;                NOP;                NOP;                          NOP;                          MOV r6, r11;                  VMOV1 WMS.md0[10], vdh1, #0;            NOP /* MW 16 */
	  2001      "00000000" // /* MW 15 */
	  2002      "00000000" // /* MW 14 */
	  2003      "00000000" // /* MW 13 */
	  2004      "10000000" // /* MW 12 */
	  2005      "11110000" // /* MW 11 */
	  2006      "10000001" // /* MW 10 */
	  2007      "10111101" // /* MW 9 */
	  2008      "01000111" // /* MW 8 */
	  2009      "00000000" // /* MW 7 */
	  2010      "00000000" // /* MW 6 */
	  2011      "00010000" // /* MW 5 */
	  2012      "00000000" // /* MW 4 */
	  2013      "00000000" // /* MW 3 */
	  2014      "00000000" // /* MW 2 */
	  2015      "00000000" // /* MW 1 */
.label TGT_F_main_1744
.swstall chess_separator_scheduler
.loop_nesting 1
	  2016      "00000001" // 	NOP /* MW 2 */
	  2017      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2018      "00000001" // 	NOP /* MW 2 */
	  2019      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2020      "00000001" // 	NOP /* MW 2 */
	  2021      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2022      "00000001" // 	NOP /* MW 2 */
	  2023      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2024      "00000001" // 	NOP /* MW 2 */
	  2025      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2026      "00000001" // 	NOP /* MW 2 */
	  2027      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2028      "00000001" // 	NOP /* MW 2 */
	  2029      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2030      "00000001" // 	NOP /* MW 2 */
	  2031      "00000000" // /* MW 1 */
.src_ref 2 "27_0.cc" 48 2 first
	  2032      "00000011" // 	NOP;                                                                  EVENT #2 /* MW 4 */
	  2033      "00100000" // /* MW 3 */
	  2034      "00000000" // /* MW 2 */
	  2035      "00000100" // /* MW 1 */
.swstall chess_separator_scheduler
	  2036      "00000001" // 	NOP /* MW 2 */
	  2037      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2038      "00000001" // 	NOP /* MW 2 */
	  2039      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2040      "00000001" // 	NOP /* MW 2 */
	  2041      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2042      "00000001" // 	NOP /* MW 2 */
	  2043      "00000000" // /* MW 1 */
.swstall chess_separator_scheduler
	  2044      "00000001" // 	NOP /* MW 2 */
	  2045      "00000000" // /* MW 1 */
.src_ref 2 "27_0.cc" 49 6 first
.src_ref 2 "27_0.cc" 49 21
	  2046      "00110111" // 	LDA r12, [p7], #4;                      NOP;                          MOV.s12 r13, #0 /* MW 8 */
	  2047      "00000000" // /* MW 7 */
	  2048      "00000000" // /* MW 6 */
	  2049      "11101000" // /* MW 5 */
	  2050      "00000001" // /* MW 4 */
	  2051      "11100000" // /* MW 3 */
	  2052      "10100011" // /* MW 2 */
	  2053      "01111100" // /* MW 1 */
	  2054      "00000001" // 	NOP /* MW 2 */
	  2055      "00000000" // /* MW 1 */
	  2056      "00000001" // 	NOP /* MW 2 */
	  2057      "00000000" // /* MW 1 */
	  2058      "00000001" // 	NOP /* MW 2 */
	  2059      "00000000" // /* MW 1 */
	  2060      "00000001" // 	NOP /* MW 2 */
	  2061      "00000000" // /* MW 1 */
	  2062      "00000001" // 	NOP /* MW 2 */
	  2063      "00000000" // /* MW 1 */
	  2064      "00000001" // 	NOP /* MW 2 */
	  2065      "00000000" // /* MW 1 */
	  2066      "00000001" // 	NOP /* MW 2 */
	  2067      "00000000" // /* MW 1 */
.src_ref 2 "27_0.cc" 49 21
	  2068      "00000011" // 	NOP;                                                                  GE r12, r13, r12 /* MW 4 */
	  2069      "11000000" // /* MW 3 */
	  2070      "11001101" // /* MW 2 */
	  2071      "00111010" // /* MW 1 */
	  2072      "11110111" // 	                                        NOP;                                                        BNEZ r12,#512;                NOP /* MW 8 */
	  2073      "00000111" // /* MW 7 */
	  2074      "00100000" // /* MW 6 */
	  2075      "10000000" // /* MW 5 */
	  2076      "10010001" // /* MW 4 */
	  2077      "00000000" // /* MW 3 */
	  2078      "00000000" // /* MW 2 */
	  2079      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2080      "00000001" // 	NOP /* MW 2 */
	  2081      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2082      "00000001" // 	NOP /* MW 2 */
	  2083      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2084      "00000001" // 	NOP /* MW 2 */
	  2085      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2086      "00000001" // 	NOP /* MW 2 */
	  2087      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2088      "00000001" // 	NOP /* MW 2 */
	  2089      "00000000" // /* MW 1 */
.src_ref 2 "27_0.cc" 52
.src_ref 2 "27_0.cc" 52
.loop_nesting 0
	  2090      "01110111" // 	LDA r11, [sp, #-44];                                                  MOV.s12 m0, #-448;            MOV.s8 r0, #0 /* MW 8 */
	  2091      "01000000" // /* MW 7 */
	  2092      "00100000" // /* MW 6 */
	  2093      "00001111" // /* MW 5 */
	  2094      "00001100" // /* MW 4 */
	  2095      "01110000" // /* MW 3 */
	  2096      "11111101" // /* MW 2 */
	  2097      "01111011" // /* MW 1 */
	  2098      "11110111" // 	                                        NOP;                                                        LDA.SPIL r10, [sp, #-48];     NOP /* MW 8 */
	  2099      "01100111" // /* MW 7 */
	  2100      "11111010" // /* MW 6 */
	  2101      "11101011" // /* MW 5 */
	  2102      "11000111" // /* MW 4 */
	  2103      "00000000" // /* MW 3 */
	  2104      "00000000" // /* MW 2 */
	  2105      "10000000" // /* MW 1 */
	  2106      "11110111" // 	                                        NOP;                                                        LDA.SPIL r4, [sp, #-32];      NOP /* MW 8 */
	  2107      "01100111" // /* MW 7 */
	  2108      "11111100" // /* MW 6 */
	  2109      "11010011" // /* MW 5 */
	  2110      "11000111" // /* MW 4 */
	  2111      "00000000" // /* MW 3 */
	  2112      "00000000" // /* MW 2 */
	  2113      "10000000" // /* MW 1 */
	  2114      "11110111" // 	                                        NOP;                                                        LDA.SPIL p7, [sp, #-36];      NOP /* MW 8 */
	  2115      "11100111" // /* MW 7 */
	  2116      "11111011" // /* MW 6 */
	  2117      "10111111" // /* MW 5 */
	  2118      "11000111" // /* MW 4 */
	  2119      "00000000" // /* MW 3 */
	  2120      "00000000" // /* MW 2 */
	  2121      "10000000" // /* MW 1 */
	  2122      "11110111" // 	                                        NOP;                                                        LDA.SPIL p6, [sp, #-40];      NOP /* MW 8 */
	  2123      "01100111" // /* MW 7 */
	  2124      "11111011" // /* MW 6 */
	  2125      "10111011" // /* MW 5 */
	  2126      "11000111" // /* MW 4 */
	  2127      "00000000" // /* MW 3 */
	  2128      "00000000" // /* MW 2 */
	  2129      "10000000" // /* MW 1 */
.src_ref 2 "27_0.cc" 52
	  2130      "00000011" // 	NOP;                LDB lr, [sp, #-12] /* MW 4 */
	  2131      "01111000" // /* MW 3 */
	  2132      "11111111" // /* MW 2 */
	  2133      "01011000" // /* MW 1 */
.src_ref 2 "27_0.cc" 52 first
	  2134      "00110111" // 	PADDA [sp], m0;                         NOP;                          NOP /* MW 8 */
	  2135      "00000000" // /* MW 7 */
	  2136      "00000000" // /* MW 6 */
	  2137      "00000000" // /* MW 5 */
	  2138      "00000000" // /* MW 4 */
	  2139      "00000000" // /* MW 3 */
	  2140      "10010000" // /* MW 2 */
	  2141      "00001000" // /* MW 1 */
	  2142      "00000001" // 	NOP /* MW 2 */
	  2143      "00000000" // /* MW 1 */
	  2144      "00000001" // 	NOP /* MW 2 */
	  2145      "00000000" // /* MW 1 */
	  2146      "00000001" // 	NOP /* MW 2 */
	  2147      "00000000" // /* MW 1 */
	  2148      "00000001" // 	NOP /* MW 2 */
	  2149      "00000000" // /* MW 1 */
	  2150      "00000001" // 	NOP /* MW 2 */
	  2151      "00000000" // /* MW 1 */
	  2152      "00000001" // 	NOP /* MW 2 */
	  2153      "00000000" // /* MW 1 */
	  2154      "00000001" // 	NOP /* MW 2 */
	  2155      "00000000" // /* MW 1 */
.src_ref 2 "27_0.cc" 52
.end_of_main
	  2156      "00000001" // 	RET lr /* MW 2 */
	  2157      "00000001" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2158      "00000001" // 	NOP /* MW 2 */
	  2159      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2160      "00000001" // 	NOP /* MW 2 */
	  2161      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2162      "00000001" // 	NOP /* MW 2 */
	  2163      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2164      "00000001" // 	NOP /* MW 2 */
	  2165      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2166      "00000001" // 	NOP /* MW 2 */
.label _main__end
.label _main___func_end0
	  2167      "00000000" // /* MW 1 */
.label _GLOBAL__sub_I_entropy_vect___cpp
.label __GLOBAL__sub_I_entropy_vect___cpp___func_begin0
.function _GLOBAL__sub_I_entropy_vect___cpp
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.function_start
	  2176      "00111111" // 	MOV.s10 r0, #0;     MOV.s9 r8, #0;      NOP;                                                        MOV.u20 r9, #125217;          NOP /* MW 12 */
	  2177      "00100001" // /* MW 11 */
	  2178      "01101001" // /* MW 10 */
	  2179      "01111110" // /* MW 9 */
	  2180      "00000100" // /* MW 8 */
	  2181      "00000000" // /* MW 7 */
	  2182      "00000000" // /* MW 6 */
	  2183      "00010000" // /* MW 5 */
	  2184      "11000000" // /* MW 4 */
	  2185      "00011000" // /* MW 3 */
	  2186      "00000000" // /* MW 2 */
	  2187      "00111000" // /* MW 1 */
	  2188      "11110111" // 	                                        NOP;                                                        MOVT.s12 r9, #-1020;          NOP /* MW 8 */
	  2189      "01000111" // /* MW 7 */
	  2190      "11000000" // /* MW 6 */
	  2191      "01100100" // /* MW 5 */
	  2192      "00000001" // /* MW 4 */
	  2193      "00000000" // /* MW 3 */
	  2194      "00000000" // /* MW 2 */
	  2195      "10000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 108 117 first
.src_ref 3 "vector.hpp" 1430 12 first
	  2196      "00000011" // 	NOP;                                                                                                VSHL0.32 xa, r9 /* MW 4 */
	  2197      "10011000" // /* MW 3 */
	  2198      "00100000" // /* MW 2 */
	  2199      "01010011" // /* MW 1 */
	  2200      "11110111" // 	                                        NOP;                                                        MOV.u20 cl1, #114688;         NOP /* MW 8 */
	  2201      "00000111" // /* MW 7 */
	  2202      "00000000" // /* MW 6 */
	  2203      "00100100" // /* MW 5 */
	  2204      "01000111" // /* MW 4 */
	  2205      "00000000" // /* MW 3 */
	  2206      "00000000" // /* MW 2 */
	  2207      "10000000" // /* MW 1 */
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
	  2208      "11110111" // 	                                        NOP;                                                        MOV.u20 cl0, #0;              NOP /* MW 8 */
	  2209      "00000111" // /* MW 7 */
	  2210      "00000000" // /* MW 6 */
	  2211      "00100000" // /* MW 5 */
	  2212      "01000000" // /* MW 4 */
	  2213      "00000000" // /* MW 3 */
	  2214      "00000000" // /* MW 2 */
	  2215      "10000000" // /* MW 1 */
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
	  2216      "11110111" // 	                                        NOP;                                                        MOV.u20 ch1, #65536;          NOP /* MW 8 */
	  2217      "00000111" // /* MW 7 */
	  2218      "00000000" // /* MW 6 */
	  2219      "00000100" // /* MW 5 */
	  2220      "01000100" // /* MW 4 */
	  2221      "00000000" // /* MW 3 */
	  2222      "00000000" // /* MW 2 */
	  2223      "10000000" // /* MW 1 */
	  2224      "11110111" // 	                                        NOP;                                                        MOVT.s12 cl1, #25;            NOP /* MW 8 */
	  2225      "10010111" // /* MW 7 */
	  2226      "00000001" // /* MW 6 */
	  2227      "00100100" // /* MW 5 */
	  2228      "00000001" // /* MW 4 */
	  2229      "00000000" // /* MW 3 */
	  2230      "00000000" // /* MW 2 */
	  2231      "10000000" // /* MW 1 */
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
	  2232      "11110111" // 	                                        NOP;                                                        MOV.u20 ch0, #0;              NOP /* MW 8 */
	  2233      "00000111" // /* MW 7 */
	  2234      "00000000" // /* MW 6 */
	  2235      "00000000" // /* MW 5 */
	  2236      "01000000" // /* MW 4 */
	  2237      "00000000" // /* MW 3 */
	  2238      "00000000" // /* MW 2 */
	  2239      "10000000" // /* MW 1 */
	  2240      "11110111" // 	                                        NOP;                                                        MOV.u20 r12, #150384;         NOP /* MW 8 */
	  2241      "00000111" // /* MW 7 */
	  2242      "10110111" // /* MW 6 */
	  2243      "11110000" // /* MW 5 */
	  2244      "01001001" // /* MW 4 */
	  2245      "00000000" // /* MW 3 */
	  2246      "00000000" // /* MW 2 */
	  2247      "10000000" // /* MW 1 */
.src_ref 3 "broadcast.hpp" 188 22 first
	  2248      "01000000" // 	NOP;                NOP;                NOP;                          NOP;                          MOV.u20 r9, #573175;          NOP;                                    VSEL xc, ya.s32, r8, c0, r0, c0, c1, r8 /* MW 16 */
	  2249      "00000000" // /* MW 15 */
	  2250      "01100000" // /* MW 14 */
	  2251      "00000110" // /* MW 13 */
	  2252      "10000000" // /* MW 12 */
	  2253      "11110111" // /* MW 11 */
	  2254      "01111110" // /* MW 10 */
	  2255      "00101110" // /* MW 9 */
	  2256      "00000110" // /* MW 8 */
	  2257      "00000000" // /* MW 7 */
	  2258      "00000000" // /* MW 6 */
	  2259      "00010000" // /* MW 5 */
	  2260      "00000000" // /* MW 4 */
	  2261      "00000000" // /* MW 3 */
	  2262      "00000000" // /* MW 2 */
	  2263      "00000000" // /* MW 1 */
	  2264      "11110111" // 	                                        NOP;                                                        MOVT.s12 r12, #1036;          NOP /* MW 8 */
	  2265      "11000111" // /* MW 7 */
	  2266      "01000000" // /* MW 6 */
	  2267      "01110000" // /* MW 5 */
	  2268      "00000001" // /* MW 4 */
	  2269      "00000000" // /* MW 3 */
	  2270      "00000000" // /* MW 2 */
	  2271      "10000000" // /* MW 1 */
	  2272      "11110111" // 	                                        NOP;                                                        MOVT.s12 r9, #-1014;          NOP /* MW 8 */
	  2273      "10100111" // /* MW 7 */
	  2274      "11000000" // /* MW 6 */
	  2275      "01100100" // /* MW 5 */
	  2276      "00000001" // /* MW 4 */
	  2277      "00000000" // /* MW 3 */
	  2278      "00000000" // /* MW 2 */
	  2279      "10000000" // /* MW 1 */
	  2280      "11110111" // 	                                        NOP;                                                        MOV.u20 r13, #949439;         NOP /* MW 8 */
	  2281      "11110111" // /* MW 7 */
	  2282      "11001011" // /* MW 6 */
	  2283      "11110111" // /* MW 5 */
	  2284      "01111001" // /* MW 4 */
	  2285      "00000000" // /* MW 3 */
	  2286      "00000000" // /* MW 2 */
	  2287      "10000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 108 117 first
.src_ref 3 "vector.hpp" 1430 12 first
	  2288      "00000011" // 	NOP;                                                                                                VSHL0.32 xd, r12 /* MW 4 */
	  2289      "10011000" // /* MW 3 */
	  2290      "10000110" // /* MW 2 */
	  2291      "01010011" // /* MW 1 */
.src_ref 3 "vector.hpp" 108 117
.src_ref 3 "vector.hpp" 1430 12
	  2292      "00000011" // 	NOP;                                                                                                VSHL0.32 xa, r9 /* MW 4 */
	  2293      "10011000" // /* MW 3 */
	  2294      "00100000" // /* MW 2 */
	  2295      "01010011" // /* MW 1 */
.src_ref 3 "broadcast.hpp" 188 22 first
.src_ref 3 "broadcast.hpp" 188 22 first
.noswbrkpt
	  2296      "01100000" // 	NOP;                NOP;                NOP;                          NOP;                          MOVT.s12 r13, #1028;          NOP;                                    VSEL xd, ya.s32, r8, c0, r0, c0, c1, r8 /* MW 16 */
	  2297      "00000000" // /* MW 15 */
	  2298      "01100000" // /* MW 14 */
	  2299      "00000110" // /* MW 13 */
	  2300      "10000000" // /* MW 12 */
	  2301      "00000100" // /* MW 11 */
	  2302      "01000100" // /* MW 10 */
	  2303      "00010111" // /* MW 9 */
	  2304      "00000000" // /* MW 8 */
	  2305      "00000000" // /* MW 7 */
	  2306      "00000000" // /* MW 6 */
	  2307      "00010000" // /* MW 5 */
	  2308      "00000000" // /* MW 4 */
	  2309      "00000000" // /* MW 3 */
	  2310      "00000000" // /* MW 2 */
	  2311      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 200 4
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "vector.hpp" 1041 35
.nohwbrkpt
.noswbrkpt
	  2312      "01010000" // 	NOP;                NOP;                NOP;                          NOP;                          MOV.u20 p0, #200768;          NOP;                                    VSEL xc, yd.s32, r8, c0, r0, c0, c1, r8 /* MW 16 */
	  2313      "00000000" // /* MW 15 */
	  2314      "01100000" // /* MW 14 */
	  2315      "00000110" // /* MW 13 */
	  2316      "10000000" // /* MW 12 */
	  2317      "01000000" // /* MW 11 */
	  2318      "00010000" // /* MW 10 */
	  2319      "11001010" // /* MW 9 */
	  2320      "00000100" // /* MW 8 */
	  2321      "00000000" // /* MW 7 */
	  2322      "00000000" // /* MW 6 */
	  2323      "00010000" // /* MW 5 */
	  2324      "00000000" // /* MW 4 */
	  2325      "00000000" // /* MW 3 */
	  2326      "00000000" // /* MW 2 */
	  2327      "00000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 200 4 first
.src_ref 3 "vector.hpp" 108 117 first
.src_ref 3 "vector.hpp" 1041 35 first
.src_ref 3 "vector.hpp" 1430 12 first
.nohwbrkpt
.noswbrkpt
	  2328      "11110111" // 	                                        VST wc0, [p0], #32;           NOP;                          VSHL0.32 xa, r13 /* MW 8 */
	  2329      "10000010" // /* MW 7 */
	  2330      "01001110" // /* MW 6 */
	  2331      "00000001" // /* MW 5 */
	  2332      "00000000" // /* MW 4 */
	  2333      "10000000" // /* MW 3 */
	  2334      "00101000" // /* MW 2 */
	  2335      "01110110" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 201 4 first
.src_ref 3 "broadcast.hpp" 188 22 first
.src_ref 3 "broadcast.hpp" 188 22 first
.src_ref 3 "vector.hpp" 1041 35
	  2336      "01000000" // 	NOP;                NOP;                VST wc0, [p0], #32;           NOP;                          MOV.u20 r12, #945042;         NOP;                                    VSEL xc, ya.s32, r8, c0, r0, c0, c1, r8 /* MW 16 */
	  2337      "00000000" // /* MW 15 */
	  2338      "01100000" // /* MW 14 */
	  2339      "00000110" // /* MW 13 */
	  2340      "10000000" // /* MW 12 */
	  2341      "10010010" // /* MW 11 */
	  2342      "00101011" // /* MW 10 */
	  2343      "10011111" // /* MW 9 */
	  2344      "00000111" // /* MW 8 */
	  2345      "10001000" // /* MW 7 */
	  2346      "01100010" // /* MW 6 */
	  2347      "00010111" // /* MW 5 */
	  2348      "00000000" // /* MW 4 */
	  2349      "00000000" // /* MW 3 */
	  2350      "00000000" // /* MW 2 */
	  2351      "00000000" // /* MW 1 */
	  2352      "11110111" // 	                                        NOP;                                                        MOVT.s12 r12, #-1031;         NOP /* MW 8 */
	  2353      "10010111" // /* MW 7 */
	  2354      "10111111" // /* MW 6 */
	  2355      "01110000" // /* MW 5 */
	  2356      "00000001" // /* MW 4 */
	  2357      "00000000" // /* MW 3 */
	  2358      "00000000" // /* MW 2 */
	  2359      "10000000" // /* MW 1 */
	  2360      "11110111" // 	                                        NOP;                                                        MOV.u20 r9, #592431;          NOP /* MW 8 */
	  2361      "11110111" // /* MW 7 */
	  2362      "10100010" // /* MW 6 */
	  2363      "11100100" // /* MW 5 */
	  2364      "01100100" // /* MW 4 */
	  2365      "00000000" // /* MW 3 */
	  2366      "00000000" // /* MW 2 */
	  2367      "10000000" // /* MW 1 */
	  2368      "11110111" // 	                                        NOP;                                                        MOV.u20 r13, #785972;         NOP /* MW 8 */
	  2369      "01000111" // /* MW 7 */
	  2370      "11100011" // /* MW 6 */
	  2371      "11110111" // /* MW 5 */
	  2372      "01101111" // /* MW 4 */
	  2373      "00000000" // /* MW 3 */
	  2374      "00000000" // /* MW 2 */
	  2375      "10000000" // /* MW 1 */
.src_ref 3 "vector.hpp" 108 117 first
.src_ref 3 "vector.hpp" 1430 12 first
	  2376      "00000011" // 	NOP;                                                                                                VSHL0.32 xa, r12 /* MW 4 */
	  2377      "10011000" // /* MW 3 */
	  2378      "10000000" // /* MW 2 */
	  2379      "01010011" // /* MW 1 */
	  2380      "11110111" // 	                                        NOP;                                                        MOVT.s12 r9, #1000;           NOP /* MW 8 */
	  2381      "10000111" // /* MW 7 */
	  2382      "00111110" // /* MW 6 */
	  2383      "01100100" // /* MW 5 */
	  2384      "00000001" // /* MW 4 */
	  2385      "00000000" // /* MW 3 */
	  2386      "00000000" // /* MW 2 */
	  2387      "10000000" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 206 4 first
	  2388      "11110111" // 	                                                                      RET lr;                       MOVT.s12 r13, #-1076;         NOP /* MW 8 */
	  2389      "11000111" // /* MW 7 */
	  2390      "10111100" // /* MW 6 */
	  2391      "01110100" // /* MW 5 */
	  2392      "00000001" // /* MW 4 */
	  2393      "00000000" // /* MW 3 */
	  2394      "00000000" // /* MW 2 */
	  2395      "00000011" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 202 4 first
.src_ref 3 "broadcast.hpp" 188 22 first
.src_ref 3 "broadcast.hpp" 188 22 first
.src_ref 3 "vector.hpp" 108 117 first
.src_ref 3 "vector.hpp" 1041 35 first
.src_ref 3 "vector.hpp" 1430 12 first
.delay_slot
	  2396      "00001111" // 	NOP;                                    VST wd0, [p0], #32;                                         VSHL0.32 xa, r9;              NOP;                                    VSEL xd, ya.s32, r8, c0, r0, c0, c1, r8 /* MW 12 */
	  2397      "00000011" // /* MW 11 */
	  2398      "00000000" // /* MW 10 */
	  2399      "00110011" // /* MW 9 */
	  2400      "00000000" // /* MW 8 */
	  2401      "00111100" // /* MW 7 */
	  2402      "00000000" // /* MW 6 */
	  2403      "00010001" // /* MW 5 */
	  2404      "01100100" // /* MW 4 */
	  2405      "10001010" // /* MW 3 */
	  2406      "00101000" // /* MW 2 */
	  2407      "01110111" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 203 4 first
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "broadcast.hpp" 188 22
.src_ref 3 "vector.hpp" 108 117
.src_ref 3 "vector.hpp" 1041 35
.src_ref 3 "vector.hpp" 1430 12
.delay_slot
	  2408      "00001111" // 	NOP;                                    VST wc0, [p0], #32;                                         VSHL0.32 xa, r13;             NOP;                                    VSEL xc, ya.s32, r8, c0, r0, c0, c1, r8 /* MW 12 */
	  2409      "00000010" // /* MW 11 */
	  2410      "00000000" // /* MW 10 */
	  2411      "00110011" // /* MW 9 */
	  2412      "00000000" // /* MW 8 */
	  2413      "00111100" // /* MW 7 */
	  2414      "00000000" // /* MW 6 */
	  2415      "00010001" // /* MW 5 */
	  2416      "01110100" // /* MW 4 */
	  2417      "10001010" // /* MW 3 */
	  2418      "00101000" // /* MW 2 */
	  2419      "01110110" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 204 4 first
.src_ref 3 "broadcast.hpp" 188 22 first
.src_ref 3 "broadcast.hpp" 188 22 first
.src_ref 3 "vector.hpp" 1041 35 first
.delay_slot
	  2420      "00000111" // 	NOP;                                    VST wd0, [p0], #32;                                                                                                               VSEL xd, ya.s32, r8, c0, r0, c0, c1, r8 /* MW 8 */
	  2421      "00000110" // /* MW 7 */
	  2422      "00000000" // /* MW 6 */
	  2423      "01100110" // /* MW 5 */
	  2424      "00000000" // /* MW 4 */
	  2425      "01000000" // /* MW 3 */
	  2426      "10010100" // /* MW 2 */
	  2427      "10111011" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 205 4 first
.src_ref 3 "vector.hpp" 1041 35
.delay_slot
	  2428      "00000011" // 	NOP;                                    VST wc0, [p0], #32 /* MW 4 */
	  2429      "01000000" // /* MW 3 */
	  2430      "00010100" // /* MW 2 */
	  2431      "10111011" // /* MW 1 */
.src_ref 5 "entropy_vect.cpp" 206 4 first
.src_ref 3 "vector.hpp" 1041 35 first
.delay_slot
	  2432      "00000011" // 	NOP;                                    VST wd0, [p0] /* MW 4 */
	  2433      "00000000" // /* MW 3 */
	  2434      "10011010" // /* MW 2 */
.label _GLOBAL__sub_I_entropy_vect___cpp__end
.label __GLOBAL__sub_I_entropy_vect___cpp___func_end0
	  2435      "10111011" // /* MW 1 */
.label _fini
.function _fini _fini
.src_ref 0 "me_basic.c" 73 4 first
.src_ref 0 "me_basic.c" 73 9
.function_start
	  2448      "01110111" // 	NOP;                                                                  MOV.s12 m0, #32;              MOV r5, r11 /* MW 8 */
	  2449      "01000000" // /* MW 7 */
	  2450      "00010000" // /* MW 6 */
	  2451      "01001000" // /* MW 5 */
	  2452      "10111101" // /* MW 4 */
	  2453      "00000111" // /* MW 3 */
	  2454      "00000000" // /* MW 2 */
	  2455      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 73 9
	  2456      "00111111" // 	PADDA [sp], m0;     NOP;                NOP;                                                        J #2560;                      NOP /* MW 12 */
	  2457      "00000000" // /* MW 11 */
	  2458      "00001010" // /* MW 10 */
	  2459      "00000000" // /* MW 9 */
	  2460      "00001010" // /* MW 8 */
	  2461      "00000000" // /* MW 7 */
	  2462      "00000000" // /* MW 6 */
	  2463      "00010000" // /* MW 5 */
	  2464      "00000000" // /* MW 4 */
	  2465      "00000000" // /* MW 3 */
	  2466      "10010000" // /* MW 2 */
	  2467      "00001000" // /* MW 1 */
.delay_slot
	  2468      "00000011" // 	NOP;                                                                                                MOV r0, r4 /* MW 4 */
	  2469      "00011000" // /* MW 3 */
	  2470      "10011000" // /* MW 2 */
	  2471      "00001110" // /* MW 1 */
.delay_slot
	  2472      "11110111" // 	                                        ST lr, [sp, #-16];            NOP;                          MOV p0, p7 /* MW 8 */
	  2473      "11010000" // /* MW 7 */
	  2474      "00110111" // /* MW 6 */
	  2475      "00000000" // /* MW 5 */
	  2476      "00000000" // /* MW 4 */
	  2477      "11000000" // /* MW 3 */
	  2478      "00111111" // /* MW 2 */
	  2479      "01010010" // /* MW 1 */
.src_ref 0 "me_basic.c" 75 41
.delay_slot
	  2480      "11110111" // 	                                        ST p0, [sp, #-12];                                          MOV.u20 r4, #0;               NOP /* MW 8 */
	  2481      "00000111" // /* MW 7 */
	  2482      "00000000" // /* MW 6 */
	  2483      "11010000" // /* MW 5 */
	  2484      "01000000" // /* MW 4 */
	  2485      "11101000" // /* MW 3 */
	  2486      "00011111" // /* MW 2 */
	  2487      "10101101" // /* MW 1 */
.src_ref 0 "me_basic.c" 76 13
.delay_slot
	  2488      "11110111" // 	                                        ST r0, [sp, #-4];                                           MOV.u20 p7, #0;               NOP /* MW 8 */
	  2489      "00000111" // /* MW 7 */
	  2490      "00000000" // /* MW 6 */
	  2491      "10111100" // /* MW 5 */
	  2492      "01000000" // /* MW 4 */
	  2493      "11111000" // /* MW 3 */
	  2494      "00011111" // /* MW 2 */
	  2495      "10101110" // /* MW 1 */
.src_ref 0 "me_basic.c" 75 41
.delay_slot
	  2496      "00000000" // 	NOP;                NOP;                ST r5, [sp, #-8];             NOP;                          MOV.u20 r11, #0;              NOP;                                    NOP /* MW 16 */
	  2497      "00000000" // /* MW 15 */
	  2498      "00000000" // /* MW 14 */
	  2499      "00000000" // /* MW 13 */
	  2500      "10000000" // /* MW 12 */
	  2501      "00000000" // /* MW 11 */
	  2502      "11000000" // /* MW 10 */
	  2503      "00001110" // /* MW 9 */
	  2504      "00000100" // /* MW 8 */
	  2505      "11111110" // /* MW 7 */
	  2506      "11010111" // /* MW 6 */
	  2507      "00010101" // /* MW 5 */
	  2508      "00000000" // /* MW 4 */
	  2509      "00000000" // /* MW 3 */
	  2510      "00000000" // /* MW 2 */
	  2511      "00000000" // /* MW 1 */
.label TGT_F_fini_64
.src_ref 0 "me_basic.c" 76 13 first
.loop_nesting 1
	  2512      "00110111" // 	LDA cb0, [p7], #4;                      NOP;                          NOP /* MW 8 */
	  2513      "00000000" // /* MW 7 */
	  2514      "00000000" // /* MW 6 */
	  2515      "00000000" // /* MW 5 */
	  2516      "00000000" // /* MW 4 */
	  2517      "11000000" // /* MW 3 */
	  2518      "10100011" // /* MW 2 */
	  2519      "01000000" // /* MW 1 */
	  2520      "00000001" // 	NOP /* MW 2 */
	  2521      "00000000" // /* MW 1 */
	  2522      "00000001" // 	NOP /* MW 2 */
	  2523      "00000000" // /* MW 1 */
	  2524      "00000001" // 	NOP /* MW 2 */
	  2525      "00000000" // /* MW 1 */
	  2526      "00000001" // 	NOP /* MW 2 */
	  2527      "00000000" // /* MW 1 */
	  2528      "00000001" // 	NOP /* MW 2 */
	  2529      "00000000" // /* MW 1 */
	  2530      "00000001" // 	NOP /* MW 2 */
	  2531      "00000000" // /* MW 1 */
	  2532      "00000001" // 	NOP /* MW 2 */
	  2533      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 76 16
.no_stack_arguments
	  2534      "01000001" // 	JAL cb0 /* MW 2 */
	  2535      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 75 41
.delay_slot
	  2536      "10110101" // 	MOV r11, p7 /* MW 2 */
	  2537      "10111111" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2538      "00000001" // 	NOP /* MW 2 */
	  2539      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2540      "00000001" // 	NOP /* MW 2 */
	  2541      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2542      "00000001" // 	NOP /* MW 2 */
	  2543      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2544      "00000010" // 	NOP;                NOP;                NOP;                          NOP;                          NOP;                          NOP;                                    NOP /* MW 16 */
	  2545      "00000000" // /* MW 15 */
	  2546      "00000000" // /* MW 14 */
	  2547      "00000000" // /* MW 13 */
	  2548      "00000000" // /* MW 12 */
	  2549      "00000000" // /* MW 11 */
	  2550      "00000000" // /* MW 10 */
	  2551      "00000000" // /* MW 9 */
	  2552      "00000000" // /* MW 8 */
	  2553      "00000000" // /* MW 7 */
	  2554      "00000000" // /* MW 6 */
	  2555      "00000000" // /* MW 5 */
	  2556      "00000000" // /* MW 4 */
	  2557      "00000000" // /* MW 3 */
	  2558      "00000000" // /* MW 2 */
	  2559      "00000000" // /* MW 1 */
.label __ll1__fini
.src_ref 0 "me_basic.c" 75 41 first
.return_address
	  2560      "00000011" // 	NOP;                                                                  NE r12, r4, r11 /* MW 4 */
	  2561      "11000000" // /* MW 3 */
	  2562      "10110100" // /* MW 2 */
	  2563      "00111001" // /* MW 1 */
.src_ref 0 "me_basic.c" 75 8
	  2564      "11110111" // 	                                        NOP;                                                        BNEZ r12,#2512;               NOP /* MW 8 */
	  2565      "00000111" // /* MW 7 */
	  2566      "10011101" // /* MW 6 */
	  2567      "10000000" // /* MW 5 */
	  2568      "10010001" // /* MW 4 */
	  2569      "00000000" // /* MW 3 */
	  2570      "00000000" // /* MW 2 */
	  2571      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2572      "00000001" // 	NOP /* MW 2 */
	  2573      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2574      "00000001" // 	NOP /* MW 2 */
	  2575      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2576      "00000001" // 	NOP /* MW 2 */
	  2577      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2578      "00000001" // 	NOP /* MW 2 */
	  2579      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2580      "00000001" // 	NOP /* MW 2 */
	  2581      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 77 4
.loop_nesting 0
	  2582      "00000011" // 	NOP;                LDB lr, [sp, #-16] /* MW 4 */
	  2583      "00111000" // /* MW 3 */
	  2584      "11111111" // /* MW 2 */
	  2585      "01011000" // /* MW 1 */
	  2586      "11110111" // 	                                        NOP;                                                        LDA.SPIL r11, [sp, #-8];      NOP /* MW 8 */
	  2587      "01100111" // /* MW 7 */
	  2588      "11111111" // /* MW 6 */
	  2589      "11101111" // /* MW 5 */
	  2590      "11000111" // /* MW 4 */
	  2591      "00000000" // /* MW 3 */
	  2592      "00000000" // /* MW 2 */
	  2593      "10000000" // /* MW 1 */
	  2594      "11110111" // 	                                        NOP;                                                        LDA.SPIL r4, [sp, #-4];       NOP /* MW 8 */
	  2595      "11100111" // /* MW 7 */
	  2596      "11111111" // /* MW 6 */
	  2597      "11010011" // /* MW 5 */
	  2598      "11000111" // /* MW 4 */
	  2599      "00000000" // /* MW 3 */
	  2600      "00000000" // /* MW 2 */
	  2601      "10000000" // /* MW 1 */
	  2602      "11110111" // 	                                        NOP;                                                        LDA.SPIL p7, [sp, #-12];      NOP /* MW 8 */
	  2603      "11100111" // /* MW 7 */
	  2604      "11111110" // /* MW 6 */
	  2605      "10111111" // /* MW 5 */
	  2606      "11000111" // /* MW 4 */
	  2607      "00000000" // /* MW 3 */
	  2608      "00000000" // /* MW 2 */
	  2609      "10000000" // /* MW 1 */
	  2610      "00000001" // 	NOP /* MW 2 */
	  2611      "00000000" // /* MW 1 */
	  2612      "00000001" // 	NOP /* MW 2 */
	  2613      "00000000" // /* MW 1 */
	  2614      "00000001" // 	NOP /* MW 2 */
	  2615      "00000000" // /* MW 1 */
	  2616      "00000001" // 	NOP /* MW 2 */
	  2617      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 77 4 first
	  2618      "00000001" // 	RET lr /* MW 2 */
	  2619      "00000001" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2620      "00000001" // 	NOP /* MW 2 */
	  2621      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2622      "00000001" // 	NOP /* MW 2 */
	  2623      "00000000" // /* MW 1 */
.src_ref 0 "me_basic.c" 77 4
.delay_slot
	  2624      "00000011" // 	NOP;                                                                  MOV.s12 m0, #-32 /* MW 4 */
	  2625      "00000000" // /* MW 3 */
	  2626      "10000010" // /* MW 2 */
	  2627      "01111111" // /* MW 1 */
.src_ref 0 "me_basic.c" 77 4
.delay_slot
	  2628      "00110111" // 	PADDA [sp], m0;                         NOP;                          NOP /* MW 8 */
	  2629      "00000000" // /* MW 7 */
	  2630      "00000000" // /* MW 6 */
	  2631      "00000000" // /* MW 5 */
	  2632      "00000000" // /* MW 4 */
	  2633      "00000000" // /* MW 3 */
	  2634      "10010000" // /* MW 2 */
	  2635      "00001000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2636      "00000001" // 	NOP /* MW 2 */
.label _fini__end
	  2637      "00000000" // /* MW 1 */
.label __cxa_finalize
.function __cxa_finalize __cxa_finalize
.src_ref 7 "atexit.c" 47 first
.src_ref 7 "atexit.c" 52 14
.src_ref 7 "atexit.c" 53 4
.src_ref 7 "atexit.c" 53 4
.src_ref 7 "atexit.c" 55 15
.function_start
	  2640      "00111111" // 	NOP;                MOV.s9 r8, #-3;                                   MOV.s12 r12, #8;              MOV.u20 p0, #200740;          NOP /* MW 12 */
	  2641      "00100100" // /* MW 11 */
	  2642      "00010000" // /* MW 10 */
	  2643      "11001010" // /* MW 9 */
	  2644      "00000100" // /* MW 8 */
	  2645      "01111000" // /* MW 7 */
	  2646      "00000100" // /* MW 6 */
	  2647      "10101000" // /* MW 5 */
	  2648      "11111111" // /* MW 4 */
	  2649      "00011000" // /* MW 3 */
	  2650      "00000000" // /* MW 2 */
	  2651      "00000000" // /* MW 1 */
.src_ref 7 "atexit.c" 52 14 first
.src_ref 7 "atexit.c" 56 37
	  2652      "00111111" // 	LDA r9, [p0];       NOP;                NOP;                                                        MOV.u20 p6, #201024;          NOP /* MW 12 */
	  2653      "01000000" // /* MW 11 */
	  2654      "10010001" // /* MW 10 */
	  2655      "11001011" // /* MW 9 */
	  2656      "00000100" // /* MW 8 */
	  2657      "00000000" // /* MW 7 */
	  2658      "00000000" // /* MW 6 */
	  2659      "00010000" // /* MW 5 */
	  2660      "00000000" // /* MW 4 */
	  2661      "00000000" // /* MW 3 */
	  2662      "11010000" // /* MW 2 */
	  2663      "01111001" // /* MW 1 */
.src_ref 7 "atexit.c" 53 4 first
.src_ref 7 "atexit.c" 68
	  2664      "11110111" // 	                                        ST r12, [p0];                 NOP;                          MOV r10, lr /* MW 8 */
	  2665      "10110100" // /* MW 7 */
	  2666      "00000010" // /* MW 6 */
	  2667      "00000001" // /* MW 5 */
	  2668      "00000000" // /* MW 4 */
	  2669      "00000000" // /* MW 3 */
	  2670      "00110100" // /* MW 2 */
	  2671      "01011111" // /* MW 1 */
	  2672      "00000001" // 	NOP /* MW 2 */
	  2673      "00000000" // /* MW 1 */
	  2674      "00000001" // 	NOP /* MW 2 */
	  2675      "00000000" // /* MW 1 */
	  2676      "00000001" // 	NOP /* MW 2 */
	  2677      "00000000" // /* MW 1 */
	  2678      "00000001" // 	NOP /* MW 2 */
	  2679      "00000000" // /* MW 1 */
	  2680      "00000001" // 	NOP /* MW 2 */
	  2681      "00000000" // /* MW 1 */
	  2682      "00000001" // 	NOP /* MW 2 */
	  2683      "00000000" // /* MW 1 */
.src_ref 7 "atexit.c" 54 8 first
	  2684      "00000011" // 	NOP;                                                                  ADD r9, r9, #-8 /* MW 4 */
	  2685      "10010000" // /* MW 3 */
	  2686      "10001001" // /* MW 2 */
	  2687      "00100111" // /* MW 1 */
.src_ref 7 "atexit.c" 55 15 first
.src_ref 7 "atexit.c" 56 37
	  2688      "01110111" // 	NOP;                                                                  ASHL r11, r9, r8;             MOV m0, r9 /* MW 8 */
	  2689      "00110110" // /* MW 7 */
	  2690      "11110001" // /* MW 6 */
	  2691      "00000111" // /* MW 5 */
	  2692      "10011000" // /* MW 4 */
	  2693      "00000111" // /* MW 3 */
	  2694      "00000000" // /* MW 2 */
	  2695      "00000000" // /* MW 1 */
.src_ref 7 "atexit.c" 56 37 first
	  2696      "00000011" // 	NOP;                                    PADDS [p6], m0 /* MW 4 */
	  2697      "00110000" // /* MW 3 */
	  2698      "00010000" // /* MW 2 */
	  2699      "10100000" // /* MW 1 */
	  2700      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  2701      "00000000" // /* MW 3 */
	  2702      "00000000" // /* MW 2 */
	  2703      "00000000" // /* MW 1 */
.label TGT_F__cxa_finalize_64
.src_ref 7 "atexit.c" 65 18 first
.loop_nesting 1
	  2704      "00110111" // 	LDA cb0, [p6], #4;                      NOP;                          NOP /* MW 8 */
	  2705      "00000000" // /* MW 7 */
	  2706      "00000000" // /* MW 6 */
	  2707      "00000000" // /* MW 5 */
	  2708      "00000000" // /* MW 4 */
	  2709      "10000000" // /* MW 3 */
	  2710      "10100011" // /* MW 2 */
	  2711      "01000000" // /* MW 1 */
.src_ref 7 "atexit.c" 65 35
	  2712      "00110111" // 	LDA p0, [p6], #-12;                     NOP;                          NOP /* MW 8 */
	  2713      "00000000" // /* MW 7 */
	  2714      "00000000" // /* MW 6 */
	  2715      "00000000" // /* MW 5 */
	  2716      "00000000" // /* MW 4 */
	  2717      "10000000" // /* MW 3 */
	  2718      "10111011" // /* MW 2 */
	  2719      "01101000" // /* MW 1 */
	  2720      "00000001" // 	NOP /* MW 2 */
	  2721      "00000000" // /* MW 1 */
	  2722      "00000001" // 	NOP /* MW 2 */
	  2723      "00000000" // /* MW 1 */
	  2724      "00000001" // 	NOP /* MW 2 */
	  2725      "00000000" // /* MW 1 */
	  2726      "00000001" // 	NOP /* MW 2 */
	  2727      "00000000" // /* MW 1 */
	  2728      "00000001" // 	NOP /* MW 2 */
	  2729      "00000000" // /* MW 1 */
	  2730      "00000001" // 	NOP /* MW 2 */
	  2731      "00000000" // /* MW 1 */
.src_ref 7 "atexit.c" 65 24
.no_stack_arguments
	  2732      "01000001" // 	JAL cb0 /* MW 2 */
	  2733      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2734      "00000001" // 	NOP /* MW 2 */
	  2735      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2736      "00000001" // 	NOP /* MW 2 */
	  2737      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2738      "00000001" // 	NOP /* MW 2 */
	  2739      "00000000" // /* MW 1 */
.delay_slot
	  2740      "00000011" // 	NOP;                                                                                                MOV r4, r0 /* MW 4 */
	  2741      "00011000" // /* MW 3 */
	  2742      "00011010" // /* MW 2 */
	  2743      "00001110" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2744      "00110111" // 	NOP;                                    NOP;                          NOP /* MW 8 */
	  2745      "00000000" // /* MW 7 */
	  2746      "00000000" // /* MW 6 */
	  2747      "00000000" // /* MW 5 */
	  2748      "00000000" // /* MW 4 */
	  2749      "00000000" // /* MW 3 */
	  2750      "00000000" // /* MW 2 */
	  2751      "00000000" // /* MW 1 */
.src_ref 7 "atexit.c" 62 4
.return_address
	  2752      "11110111" // 	                                        NOP;                                                        MOV.u20 cb0, #2704;           NOP /* MW 8 */
	  2753      "00000111" // /* MW 7 */
	  2754      "10101001" // /* MW 6 */
	  2755      "01000000" // /* MW 5 */
	  2756      "01000000" // /* MW 4 */
	  2757      "00000000" // /* MW 3 */
	  2758      "00000000" // /* MW 2 */
	  2759      "10000000" // /* MW 1 */
.src_ref 7 "atexit.c" 62 4 first
	  2760      "00000011" // 	NOP;                                                                  BDEC r11, r11, cb0 /* MW 4 */
	  2761      "10110000" // /* MW 3 */
	  2762      "10001011" // /* MW 2 */
	  2763      "00000011" // /* MW 1 */
.delay_slot
	  2764      "00000101" // 	MOV r0, r4 /* MW 2 */
	  2765      "11010011" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2766      "00000001" // 	NOP /* MW 2 */
	  2767      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2768      "00000001" // 	NOP /* MW 2 */
	  2769      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2770      "00000001" // 	NOP /* MW 2 */
	  2771      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2772      "00000001" // 	NOP /* MW 2 */
	  2773      "00000000" // /* MW 1 */
.src_ref 7 "atexit.c" 68
.loop_nesting 0
	  2774      "01100001" // 	MOV lr, r10 /* MW 2 */
	  2775      "10100001" // /* MW 1 */
.src_ref 7 "atexit.c" 68 first
	  2776      "00000001" // 	RET lr /* MW 2 */
	  2777      "00000001" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2778      "00000001" // 	NOP /* MW 2 */
	  2779      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2780      "00000001" // 	NOP /* MW 2 */
	  2781      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2782      "00000001" // 	NOP /* MW 2 */
	  2783      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2784      "00000001" // 	NOP /* MW 2 */
	  2785      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2786      "00000001" // 	NOP /* MW 2 */
.label __cxa_finalize__end
	  2787      "00000000" // /* MW 1 */
.label _Z7f32_divjj
.function f32_div _Z7f32_divjj
.src_ref 8 "f32_div.c" 44 first
.src_ref 8 "f32_div.c" 44 10
.src_ref 8 "f32_div.c" 73 37
.src_ref 8 "f32_div.c" 74 34
.src_ref 8 "f32_div.c" 78 37
.src_ref 8 "f32_div.c" 79 34
.function_start
	  2800      "00111111" // 	PADDA [sp], #64;    MOV.s9 r12, #-23;                                 MOV.s12 r15, #-31;            MOV.u20 r13, #1048575;        NOP /* MW 12 */
	  2801      "11111111" // /* MW 11 */
	  2802      "01111111" // /* MW 10 */
	  2803      "11111111" // /* MW 9 */
	  2804      "00000111" // /* MW 8 */
	  2805      "11111110" // /* MW 7 */
	  2806      "11110000" // /* MW 6 */
	  2807      "00101111" // /* MW 5 */
	  2808      "11111101" // /* MW 4 */
	  2809      "01011100" // /* MW 3 */
	  2810      "10010001" // /* MW 2 */
	  2811      "00001000" // /* MW 1 */
.src_ref 8 "f32_div.c" 73 37 first
.src_ref 8 "f32_div.c" 84 14
.src_ref 8 "f32_div.c" 86 18
	  2812      "00111111" // 	NOP;                MOV.s9 r14, #255;                                 LSHL r9, r6, r15;             MOVT.s12 r13, #7;             NOP /* MW 12 */
	  2813      "00000111" // /* MW 11 */
	  2814      "01000000" // /* MW 10 */
	  2815      "00010111" // /* MW 9 */
	  2816      "00000000" // /* MW 8 */
	  2817      "11010010" // /* MW 7 */
	  2818      "11011110" // /* MW 6 */
	  2819      "11100111" // /* MW 5 */
	  2820      "11011111" // /* MW 4 */
	  2821      "00011110" // /* MW 3 */
	  2822      "00000000" // /* MW 2 */
	  2823      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 78 37 first
	  2824      "10110111" // 	NOP;                                    ST r11, [sp, #-12];           LSHL r15, r7, r15 /* MW 8 */
	  2825      "11111110" // /* MW 7 */
	  2826      "11110111" // /* MW 6 */
	  2827      "11111010" // /* MW 5 */
	  2828      "01111011" // /* MW 4 */
	  2829      "00011111" // /* MW 3 */
	  2830      "00000000" // /* MW 2 */
	  2831      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 79 34 first
	  2832      "00000011" // 	NOP;                                                                  LSHL r5, r7, r12 /* MW 4 */
	  2833      "01010000" // /* MW 3 */
	  2834      "11000111" // /* MW 2 */
	  2835      "00111110" // /* MW 1 */
.src_ref 8 "f32_div.c" 78 13 first
	  2836      "10111101" // 	NEZ r11, r15 /* MW 2 */
	  2837      "01111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 80 19 first
	  2838      "00000011" // 	NOP;                                                                  AND r15, r13, r7 /* MW 4 */
	  2839      "11110000" // /* MW 3 */
	  2840      "01111101" // /* MW 2 */
	  2841      "00110100" // /* MW 1 */
.src_ref 8 "f32_div.c" 74 34 first
	  2842      "10110111" // 	NOP;                                    ST r15, [sp, #-20];           LSHL r12, r6, r12 /* MW 8 */
	  2843      "11111101" // /* MW 7 */
	  2844      "11111111" // /* MW 6 */
	  2845      "01100010" // /* MW 5 */
	  2846      "01100011" // /* MW 4 */
	  2847      "00011111" // /* MW 3 */
	  2848      "00000000" // /* MW 2 */
	  2849      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 79 40 first
	  2850      "00011101" // 	ZE.8 r1, r5 /* MW 2 */
	  2851      "01000101" // /* MW 1 */
.src_ref 8 "f32_div.c" 74 40 first
	  2852      "11001101" // 	ZE.8 r12, r12 /* MW 2 */
	  2853      "01001100" // /* MW 1 */
.src_ref 8 "f32_div.c" 86 18 first
	  2854      "00000011" // 	NOP;                                                                  EQ r15, r14, r1 /* MW 4 */
	  2855      "11110000" // /* MW 3 */
	  2856      "00011110" // /* MW 2 */
	  2857      "00111000" // /* MW 1 */
.src_ref 8 "f32_div.c" 84 14 first
	  2858      "00000011" // 	NOP;                                                                  EQ r14, r12, r14 /* MW 4 */
	  2859      "11100000" // /* MW 3 */
	  2860      "11101100" // /* MW 2 */
	  2861      "00111000" // /* MW 1 */
.src_ref 8 "f32_div.c" 84 4
	  2862      "11110111" // 	                                        NOP;                                                        BNEZ r14,#3792;               NOP /* MW 8 */
	  2863      "00000111" // /* MW 7 */
	  2864      "11101101" // /* MW 6 */
	  2865      "11000000" // /* MW 5 */
	  2866      "10010001" // /* MW 4 */
	  2867      "00000000" // /* MW 3 */
	  2868      "00000000" // /* MW 2 */
	  2869      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 73 13 first
.delay_slot
	  2870      "00110111" // 	NOP;                                    ST r10, [sp, #-8];            NEZ r10, r9 /* MW 8 */
	  2871      "11111111" // /* MW 7 */
	  2872      "11110101" // /* MW 6 */
	  2873      "11010010" // /* MW 5 */
	  2874      "00111100" // /* MW 4 */
	  2875      "00001101" // /* MW 3 */
	  2876      "00000000" // /* MW 2 */
	  2877      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 81 18 first
.delay_slot
	  2878      "00000011" // 	NOP;                                                                  XOR r9, r10, r11 /* MW 4 */
	  2879      "10010000" // /* MW 3 */
	  2880      "10111010" // /* MW 2 */
	  2881      "00110110" // /* MW 1 */
.src_ref 8 "f32_div.c" 75 19 first
.src_ref 8 "f32_div.c" 173 30
.delay_slot
	  2882      "11110111" // 	                                        ST lr, [sp, #-4];             AND r13, r6, r13;             MOV.s8 r8, #31 /* MW 8 */
	  2883      "11110000" // /* MW 7 */
	  2884      "10001111" // /* MW 6 */
	  2885      "11011011" // /* MW 5 */
	  2886      "10011010" // /* MW 4 */
	  2887      "11110110" // /* MW 3 */
	  2888      "00111111" // /* MW 2 */
	  2889      "01010010" // /* MW 1 */
.src_ref 8 "f32_div.c" 173 30 first
.delay_slot
	  2890      "00110111" // 	NOP;                                    ST r4, [sp, #-16];            LSHL r4, r9, r8 /* MW 8 */
	  2891      "11111110" // /* MW 7 */
	  2892      "11101001" // /* MW 6 */
	  2893      "10100010" // /* MW 5 */
	  2894      "01000100" // /* MW 4 */
	  2895      "00011111" // /* MW 3 */
	  2896      "00000000" // /* MW 2 */
	  2897      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2898      "00000001" // 	NOP /* MW 2 */
	  2899      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 92 4 first
	  2900      "11110111" // 	                                        NOP;                                                        BNEZ r15,#3968;               NOP /* MW 8 */
	  2901      "00000111" // /* MW 7 */
	  2902      "11111000" // /* MW 6 */
	  2903      "11100000" // /* MW 5 */
	  2904      "10010001" // /* MW 4 */
	  2905      "00000000" // /* MW 3 */
	  2906      "00000000" // /* MW 2 */
	  2907      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2908      "00000001" // 	NOP /* MW 2 */
	  2909      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2910      "00000001" // 	NOP /* MW 2 */
	  2911      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2912      "00000001" // 	NOP /* MW 2 */
	  2913      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2914      "00000001" // 	NOP /* MW 2 */
	  2915      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2916      "00000001" // 	NOP /* MW 2 */
	  2917      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 98 4 first
.src_ref 8 "f32_div.c" 98 9 first
	  2918      "11110111" // 	                                        NOP;                                                        BNEZ r1,#3088;                NOP /* MW 8 */
	  2919      "00000111" // /* MW 7 */
	  2920      "11000001" // /* MW 6 */
	  2921      "00100000" // /* MW 5 */
	  2922      "10010000" // /* MW 4 */
	  2923      "00000000" // /* MW 3 */
	  2924      "00000000" // /* MW 2 */
	  2925      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 57 23
.delay_slot
	  2926      "01110111" // 	NOP;                                                                  MOV.s12 r15, #-48;            MOV r14, sp /* MW 8 */
	  2927      "01111110" // /* MW 7 */
	  2928      "11101000" // /* MW 6 */
	  2929      "10001111" // /* MW 5 */
	  2930      "00010111" // /* MW 4 */
	  2931      "00100000" // /* MW 3 */
	  2932      "00000000" // /* MW 2 */
	  2933      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 57 23
.delay_slot
	  2934      "00000011" // 	NOP;                                                                  ADD r14, r14, r15 /* MW 4 */
	  2935      "11100000" // /* MW 3 */
	  2936      "11111110" // /* MW 2 */
	  2937      "00110000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2938      "00000001" // 	NOP /* MW 2 */
	  2939      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2940      "00000001" // 	NOP /* MW 2 */
	  2941      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2942      "00000001" // 	NOP /* MW 2 */
	  2943      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 99 8
.src_ref 8 "f32_div.c" 106 21
	  2944      "11110111" // 	                                        NOP;                                                        LDA.SPIL r6, [sp, #-20];      NOP /* MW 8 */
	  2945      "11100111" // /* MW 7 */
	  2946      "11111101" // /* MW 6 */
	  2947      "11011011" // /* MW 5 */
	  2948      "11000111" // /* MW 4 */
	  2949      "00000000" // /* MW 3 */
	  2950      "00000000" // /* MW 2 */
	  2951      "10000000" // /* MW 1 */
	  2952      "00000001" // 	NOP /* MW 2 */
	  2953      "00000000" // /* MW 1 */
	  2954      "00000001" // 	NOP /* MW 2 */
	  2955      "00000000" // /* MW 1 */
	  2956      "00000001" // 	NOP /* MW 2 */
	  2957      "00000000" // /* MW 1 */
	  2958      "00000001" // 	NOP /* MW 2 */
	  2959      "00000000" // /* MW 1 */
	  2960      "00000001" // 	NOP /* MW 2 */
	  2961      "00000000" // /* MW 1 */
	  2962      "00000001" // 	NOP /* MW 2 */
	  2963      "00000000" // /* MW 1 */
	  2964      "00000001" // 	NOP /* MW 2 */
	  2965      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 99 8 first
	  2966      "11110111" // 	                                        NOP;                                                        BEQZ r6,#4048;                NOP /* MW 8 */
	  2967      "00000111" // /* MW 7 */
	  2968      "11111101" // /* MW 6 */
	  2969      "11000000" // /* MW 5 */
	  2970      "10000000" // /* MW 4 */
	  2971      "00000000" // /* MW 3 */
	  2972      "00000000" // /* MW 2 */
	  2973      "10000000" // /* MW 1 */
.delay_slot
	  2974      "11110111" // 	                                        NOP;                                                        ST.SPIL r14, [sp, #-28];      NOP /* MW 8 */
	  2975      "01000111" // /* MW 7 */
	  2976      "11100100" // /* MW 6 */
	  2977      "11111111" // /* MW 5 */
	  2978      "11111110" // /* MW 4 */
	  2979      "00000000" // /* MW 3 */
	  2980      "00000000" // /* MW 2 */
	  2981      "10000000" // /* MW 1 */
.delay_slot
	  2982      "11110111" // 	                                        NOP;                                                        ST.SPIL r13, [sp, #-24];      NOP /* MW 8 */
	  2983      "01000111" // /* MW 7 */
	  2984      "11101000" // /* MW 6 */
	  2985      "11111111" // /* MW 5 */
	  2986      "11111101" // /* MW 4 */
	  2987      "00000000" // /* MW 3 */
	  2988      "00000000" // /* MW 2 */
	  2989      "10000000" // /* MW 1 */
.delay_slot
	  2990      "11110111" // 	                                        NOP;                                                        ST.SPIL r12, [sp, #-20];      NOP /* MW 8 */
	  2991      "01000111" // /* MW 7 */
	  2992      "11101100" // /* MW 6 */
	  2993      "11111111" // /* MW 5 */
	  2994      "11111100" // /* MW 4 */
	  2995      "00000000" // /* MW 3 */
	  2996      "00000000" // /* MW 2 */
	  2997      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  2998      "00000001" // 	NOP /* MW 2 */
	  2999      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3000      "00000001" // 	NOP /* MW 2 */
	  3001      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 106 21 first
.no_stack_arguments
	  3002      "11110111" // 	                                        NOP;                                                        JAL #4816;                    NOP /* MW 8 */
	  3003      "00000111" // /* MW 7 */
	  3004      "00101101" // /* MW 6 */
	  3005      "00100001" // /* MW 5 */
	  3006      "10100000" // /* MW 4 */
	  3007      "00000000" // /* MW 3 */
	  3008      "00000000" // /* MW 2 */
	  3009      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 106 21
.delay_slot
	  3010      "10000101" // 	MOV p0, r14 /* MW 2 */
	  3011      "11111010" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3012      "00000001" // 	NOP /* MW 2 */
	  3013      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3014      "00000001" // 	NOP /* MW 2 */
	  3015      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3016      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  3017      "00000000" // /* MW 3 */
	  3018      "00000000" // /* MW 2 */
	  3019      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3020      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  3021      "00000000" // /* MW 3 */
	  3022      "00000000" // /* MW 2 */
	  3023      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 108 25 first
.return_address
	  3024      "11110111" // 	                                        NOP;                                                        LDA.SPIL cl0, [sp, #-44];     NOP /* MW 8 */
	  3025      "11100111" // /* MW 7 */
	  3026      "11111010" // /* MW 6 */
	  3027      "01100011" // /* MW 5 */
	  3028      "11000111" // /* MW 4 */
	  3029      "00000000" // /* MW 3 */
	  3030      "00000000" // /* MW 2 */
	  3031      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 110 4
.src_ref 8 "f32_div.c" 110 9
.src_ref 8 "f32_div.c" 118 16
	  3032      "11110111" // 	                                        NOP;                                                        LDA.SPIL r12, [sp, #-20];     NOP /* MW 8 */
	  3033      "11100111" // /* MW 7 */
	  3034      "11111101" // /* MW 6 */
	  3035      "11110011" // /* MW 5 */
	  3036      "11000111" // /* MW 4 */
	  3037      "00000000" // /* MW 3 */
	  3038      "00000000" // /* MW 2 */
	  3039      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 107 25 first
	  3040      "11110111" // 	                                        NOP;                                                        LDA.SPIL r1, [sp, #-48];      NOP /* MW 8 */
	  3041      "01100111" // /* MW 7 */
	  3042      "11111010" // /* MW 6 */
	  3043      "11000111" // /* MW 5 */
	  3044      "11000111" // /* MW 4 */
	  3045      "00000000" // /* MW 3 */
	  3046      "00000000" // /* MW 2 */
	  3047      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 111 8
.src_ref 8 "f32_div.c" 111 13
.src_ref 8 "f32_div.c" 112 21
.src_ref 8 "f32_div.c" 119 9
	  3048      "11110111" // 	                                        NOP;                                                        LDA.SPIL r13, [sp, #-24];     NOP /* MW 8 */
	  3049      "01100111" // /* MW 7 */
	  3050      "11111101" // /* MW 6 */
	  3051      "11110111" // /* MW 5 */
	  3052      "11000111" // /* MW 4 */
	  3053      "00000000" // /* MW 3 */
	  3054      "00000000" // /* MW 2 */
	  3055      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 112 21
	  3056      "11110111" // 	                                        NOP;                                                        LDA.SPIL r14, [sp, #-28];     NOP /* MW 8 */
	  3057      "11100111" // /* MW 7 */
	  3058      "11111100" // /* MW 6 */
	  3059      "11111011" // /* MW 5 */
	  3060      "11000111" // /* MW 4 */
	  3061      "00000000" // /* MW 3 */
	  3062      "00000000" // /* MW 2 */
	  3063      "10000000" // /* MW 1 */
	  3064      "00000001" // 	NOP /* MW 2 */
	  3065      "00000000" // /* MW 1 */
	  3066      "00000001" // 	NOP /* MW 2 */
	  3067      "00000000" // /* MW 1 */
	  3068      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  3069      "00000000" // /* MW 3 */
	  3070      "00000000" // /* MW 2 */
	  3071      "00000000" // /* MW 1 */
	  3072      "00000000" // 	NOP;                NOP;                NOP;                          NOP;                          ST.SPIL cl0, [sp, #-20];      NOP;                                    NOP /* MW 16 */
	  3073      "00000000" // /* MW 15 */
	  3074      "00000000" // /* MW 14 */
	  3075      "00000000" // /* MW 13 */
	  3076      "10000000" // /* MW 12 */
	  3077      "11000100" // /* MW 11 */
	  3078      "11111110" // /* MW 10 */
	  3079      "10001111" // /* MW 9 */
	  3080      "00001101" // /* MW 8 */
	  3081      "00000000" // /* MW 7 */
	  3082      "00000000" // /* MW 6 */
	  3083      "00010000" // /* MW 5 */
	  3084      "00000000" // /* MW 4 */
	  3085      "00000000" // /* MW 3 */
	  3086      "00000000" // /* MW 2 */
	  3087      "00000000" // /* MW 1 */
.label TGT_F_Z7f32_divjj_288
	  3088      "00000001" // 	NOP /* MW 2 */
	  3089      "00000000" // /* MW 1 */
	  3090      "00000001" // 	NOP /* MW 2 */
	  3091      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 110 4 first
.src_ref 8 "f32_div.c" 110 9 first
	  3092      "11110111" // 	                                        NOP;                                                        BNEZ r12,#3168;               NOP /* MW 8 */
	  3093      "00000111" // /* MW 7 */
	  3094      "11000110" // /* MW 6 */
	  3095      "10000000" // /* MW 5 */
	  3096      "10010001" // /* MW 4 */
	  3097      "00000000" // /* MW 3 */
	  3098      "00000000" // /* MW 2 */
	  3099      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 112 21
.delay_slot
	  3100      "10000101" // 	MOV p0, r14 /* MW 2 */
	  3101      "11111010" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3102      "00000001" // 	NOP /* MW 2 */
	  3103      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3104      "00000001" // 	NOP /* MW 2 */
	  3105      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3106      "00000001" // 	NOP /* MW 2 */
	  3107      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3108      "00000001" // 	NOP /* MW 2 */
	  3109      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 111 8 first
.src_ref 8 "f32_div.c" 111 13 first
	  3110      "11110111" // 	                                        NOP;                                                        BEQZ r13,#3904;               NOP /* MW 8 */
	  3111      "00000111" // /* MW 7 */
	  3112      "11110100" // /* MW 6 */
	  3113      "10100000" // /* MW 5 */
	  3114      "10000001" // /* MW 4 */
	  3115      "00000000" // /* MW 3 */
	  3116      "00000000" // /* MW 2 */
	  3117      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3118      "00000001" // 	NOP /* MW 2 */
	  3119      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3120      "00000001" // 	NOP /* MW 2 */
	  3121      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3122      "00000001" // 	NOP /* MW 2 */
	  3123      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3124      "00000001" // 	NOP /* MW 2 */
	  3125      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3126      "00000001" // 	NOP /* MW 2 */
	  3127      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 112 21
	  3128      "01100101" // 	MOV r6, r13 /* MW 2 */
	  3129      "11110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 118 16
	  3130      "01000101" // 	MOV r4, r1 /* MW 2 */
	  3131      "11000111" // /* MW 1 */
.src_ref 8 "f32_div.c" 112 21 first
.no_stack_arguments
	  3132      "11110111" // 	                                        NOP;                                                        JAL #4816;                    NOP /* MW 8 */
	  3133      "00000111" // /* MW 7 */
	  3134      "00101101" // /* MW 6 */
	  3135      "00100001" // /* MW 5 */
	  3136      "10100000" // /* MW 4 */
	  3137      "00000000" // /* MW 3 */
	  3138      "00000000" // /* MW 2 */
	  3139      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3140      "00000001" // 	NOP /* MW 2 */
	  3141      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3142      "00000001" // 	NOP /* MW 2 */
	  3143      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3144      "00000001" // 	NOP /* MW 2 */
	  3145      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3146      "00000001" // 	NOP /* MW 2 */
	  3147      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3148      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  3149      "00000000" // /* MW 3 */
	  3150      "00000000" // /* MW 2 */
	  3151      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 113 25 first
.src_ref 8 "f32_div.c" 118 16
.return_address
	  3152      "01110111" // 	LDA r12, [sp, #-48];                                                  NOP;                          MOV r1, r4 /* MW 8 */
	  3153      "00000000" // /* MW 7 */
	  3154      "00000000" // /* MW 6 */
	  3155      "01000000" // /* MW 5 */
	  3156      "01001100" // /* MW 4 */
	  3157      "00000111" // /* MW 3 */
	  3158      "11111101" // /* MW 2 */
	  3159      "01111100" // /* MW 1 */
.src_ref 8 "f32_div.c" 114 25 first
	  3160      "11110111" // 	                                        NOP;                                                        LDA.SPIL r13, [sp, #-44];     NOP /* MW 8 */
	  3161      "11100111" // /* MW 7 */
	  3162      "11111010" // /* MW 6 */
	  3163      "11110111" // /* MW 5 */
	  3164      "11000111" // /* MW 4 */
	  3165      "00000000" // /* MW 3 */
	  3166      "00000000" // /* MW 2 */
	  3167      "10000000" // /* MW 1 */
.label TGT_F_Z7f32_divjj_368
.src_ref 8 "f32_div.c" 118 23
.src_ref 8 "f32_div.c" 120 9
.src_ref 8 "f32_div.c" 133 13
.src_ref 8 "f32_div.c" 137 9
	  3168      "00111111" // 	LDA r9, [sp, #-20]; MOV.s9 r15, #8;                                   MOV.s12 r8, #126;             MOV.u20 r6, #0;               NOP /* MW 12 */
	  3169      "00000000" // /* MW 11 */
	  3170      "10000000" // /* MW 10 */
	  3171      "00001101" // /* MW 9 */
	  3172      "00000100" // /* MW 8 */
	  3173      "01110000" // /* MW 7 */
	  3174      "00111111" // /* MW 6 */
	  3175      "00001000" // /* MW 5 */
	  3176      "11000001" // /* MW 4 */
	  3177      "11011111" // /* MW 3 */
	  3178      "11111110" // /* MW 2 */
	  3179      "01111001" // /* MW 1 */
	  3180      "11110111" // 	                                        NOP;                                                        MOVT.s12 r6, #8;              NOP /* MW 8 */
	  3181      "10000111" // /* MW 7 */
	  3182      "00000000" // /* MW 6 */
	  3183      "01011000" // /* MW 5 */
	  3184      "00000001" // /* MW 4 */
	  3185      "00000000" // /* MW 3 */
	  3186      "00000000" // /* MW 2 */
	  3187      "10000000" // /* MW 1 */
	  3188      "00000001" // 	NOP /* MW 2 */
	  3189      "00000000" // /* MW 1 */
	  3190      "00000001" // 	NOP /* MW 2 */
	  3191      "00000000" // /* MW 1 */
	  3192      "00000001" // 	NOP /* MW 2 */
	  3193      "00000000" // /* MW 1 */
	  3194      "00000001" // 	NOP /* MW 2 */
	  3195      "00000000" // /* MW 1 */
	  3196      "00000001" // 	NOP /* MW 2 */
	  3197      "00000000" // /* MW 1 */
	  3198      "00000001" // 	NOP /* MW 2 */
	  3199      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 118 16 first
	  3200      "00000011" // 	NOP;                                                                  SUB r12, r12, r1 /* MW 4 */
	  3201      "11000000" // /* MW 3 */
	  3202      "00011100" // /* MW 2 */
	  3203      "00110001" // /* MW 1 */
.src_ref 8 "f32_div.c" 119 9 first
	  3204      "00000011" // 	NOP;                                                                  OR r13, r6, r13 /* MW 4 */
	  3205      "11010000" // /* MW 3 */
	  3206      "11010110" // /* MW 2 */
	  3207      "00110101" // /* MW 1 */
.src_ref 8 "f32_div.c" 118 23 first
	  3208      "00000011" // 	NOP;                                                                  ADD r12, r8, r12 /* MW 4 */
	  3209      "11000000" // /* MW 3 */
	  3210      "11001000" // /* MW 2 */
	  3211      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 120 9 first
	  3212      "00000011" // 	NOP;                                                                  OR r9, r6, r9 /* MW 4 */
	  3213      "10010000" // /* MW 3 */
	  3214      "10010110" // /* MW 2 */
	  3215      "00110101" // /* MW 1 */
.src_ref 8 "f32_div.c" 133 13 first
	  3216      "00000011" // 	NOP;                                                                  LSHL r7, r13, r15 /* MW 4 */
	  3217      "01110000" // /* MW 3 */
	  3218      "11111101" // /* MW 2 */
	  3219      "00111110" // /* MW 1 */
.src_ref 8 "f32_div.c" 137 9 first
	  3220      "00000011" // 	NOP;                                                                  LSHL r6, r9, r15 /* MW 4 */
	  3221      "01100000" // /* MW 3 */
	  3222      "11111001" // /* MW 2 */
	  3223      "00111110" // /* MW 1 */
.src_ref 8 "f32_div.c" 132 8 first
.src_ref 8 "f32_div.c" 138 35 first
.no_stack_arguments
	  3224      "11110111" // 	                                                                      ADD r8, r12, #-1;             JAL #4256;                    NOP /* MW 8 */
	  3225      "00000111" // /* MW 7 */
	  3226      "00001010" // /* MW 6 */
	  3227      "00100001" // /* MW 5 */
	  3228      "10100000" // /* MW 4 */
	  3229      "10000000" // /* MW 3 */
	  3230      "11111100" // /* MW 2 */
	  3231      "00100111" // /* MW 1 */
.src_ref 8 "f32_div.c" 131 14 first
.delay_slot
	  3232      "00000011" // 	NOP;                                                                  LTU r0, r13, r9 /* MW 4 */
	  3233      "00000000" // /* MW 3 */
	  3234      "10011101" // /* MW 2 */
	  3235      "00111101" // /* MW 1 */
.src_ref 8 "f32_div.c" 131 4
.src_ref 8 "f32_div.c" 135 13
.delay_slot
	  3236      "01110111" // 	NOP;                                                                  ITE_NEZ r4, r8, r12, r0;      MOV.s8 r14, #7 /* MW 8 */
	  3237      "00001000" // /* MW 7 */
	  3238      "11111001" // /* MW 6 */
	  3239      "10000011" // /* MW 5 */
	  3240      "01111111" // /* MW 4 */
	  3241      "00110000" // /* MW 3 */
	  3242      "00000000" // /* MW 2 */
	  3243      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 135 13 first
.delay_slot
	  3244      "00000011" // 	NOP;                                                                  LSHL r13, r13, r14 /* MW 4 */
	  3245      "11010000" // /* MW 3 */
	  3246      "11101101" // /* MW 2 */
	  3247      "00111110" // /* MW 1 */
.src_ref 8 "f32_div.c" 131 4 first
.delay_slot
	  3248      "10110111" // 	NOP;                                    ST r6, [sp, #-20];            ITE_EQZ r13, r13, r7, r0 /* MW 8 */
	  3249      "11111101" // /* MW 7 */
	  3250      "11101101" // /* MW 6 */
	  3251      "11101010" // /* MW 5 */
	  3252      "00111110" // /* MW 4 */
	  3253      "00001111" // /* MW 3 */
	  3254      "00000000" // /* MW 2 */
	  3255      "00000000" // /* MW 1 */
.delay_slot
	  3256      "11110111" // 	                                        NOP;                                                        ST.SPIL r13, [sp, #-24];      NOP /* MW 8 */
	  3257      "01000111" // /* MW 7 */
	  3258      "11101000" // /* MW 6 */
	  3259      "11111111" // /* MW 5 */
	  3260      "11111101" // /* MW 4 */
	  3261      "00000000" // /* MW 3 */
	  3262      "00000000" // /* MW 2 */
	  3263      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
.src_ref 8 "f32_div.c" 138 33
.src_ref 8 "f32_div.c" 138 33
.src_ref 8 "f32_div.c" 138 33 first
.src_ref 8 "f32_div.c" 147 41
.src_ref 8 "f32_div.c" 147 41
.src_ref 8 "f32_div.c" 147 69
.src_ref 8 "f32_div.c" 147 69
.return_address
	  3264      "10011111" // 	LDA r12, [sp, #-24];MOV.s9 r13, #-16;   NOP;                          ZE.16 r6, r0;                 MOV.s8 r14, #0 /* MW 12 */
	  3265      "00001111" // /* MW 11 */
	  3266      "10110000" // /* MW 10 */
	  3267      "01000001" // /* MW 9 */
	  3268      "01101001" // /* MW 8 */
	  3269      "00000000" // /* MW 7 */
	  3270      "00000000" // /* MW 6 */
	  3271      "00000000" // /* MW 5 */
	  3272      "11111110" // /* MW 4 */
	  3273      "10011101" // /* MW 3 */
	  3274      "11111110" // /* MW 2 */
	  3275      "01111100" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
.src_ref 8 "f32_div.c" 138 33
	  3276      "01110111" // 	NOP;                                                                  ASHL r8, r0, r13;             MOV.s8 r15, #3 /* MW 8 */
	  3277      "00010000" // /* MW 7 */
	  3278      "11111010" // /* MW 6 */
	  3279      "11000111" // /* MW 5 */
	  3280      "00111111" // /* MW 4 */
	  3281      "00110000" // /* MW 3 */
	  3282      "00000000" // /* MW 2 */
	  3283      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3284      "10011101" // 	ZE.16 r9, r8 /* MW 2 */
	  3285      "01011000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3286      "00000011" // 	NOP;                                                                  MUL r8, r0, r14 /* MW 4 */
	  3287      "10000000" // /* MW 3 */
	  3288      "11100000" // /* MW 2 */
	  3289      "00110111" // /* MW 1 */
	  3290      "00000001" // 	NOP /* MW 2 */
	  3291      "00000000" // /* MW 1 */
	  3292      "00000001" // 	NOP /* MW 2 */
	  3293      "00000000" // /* MW 1 */
	  3294      "00000001" // 	NOP /* MW 2 */
	  3295      "00000000" // /* MW 1 */
	  3296      "00000001" // 	NOP /* MW 2 */
	  3297      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3298      "01011101" // 	ZE.16 r5, r12 /* MW 2 */
	  3299      "01011100" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3300      "00000011" // 	NOP;                                                                  MUL r7, r6, r5 /* MW 4 */
	  3301      "01110000" // /* MW 3 */
	  3302      "01010110" // /* MW 2 */
	  3303      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3304      "00000011" // 	NOP;                                                                  ASHL r1, r12, r13 /* MW 4 */
	  3305      "00010000" // /* MW 3 */
	  3306      "11011100" // /* MW 2 */
	  3307      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3308      "00000011" // 	NOP;                                                                  MUL r5, r9, r5 /* MW 4 */
	  3309      "01010000" // /* MW 3 */
	  3310      "01011001" // /* MW 2 */
	  3311      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3312      "00111101" // 	ZE.16 r3, r1 /* MW 2 */
	  3313      "01010001" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3314      "00000011" // 	NOP;                                                                  MUL r6, r6, r3 /* MW 4 */
	  3315      "01100000" // /* MW 3 */
	  3316      "00110110" // /* MW 2 */
	  3317      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3318      "00000011" // 	NOP;                                                                  ASHL r7, r7, r13 /* MW 4 */
	  3319      "01110000" // /* MW 3 */
	  3320      "11010111" // /* MW 2 */
	  3321      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3322      "00000011" // 	NOP;                                                                  MUL r2, r12, r14 /* MW 4 */
	  3323      "00100000" // /* MW 3 */
	  3324      "11101100" // /* MW 2 */
	  3325      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3326      "00001101" // 	ZE.16 r0, r6 /* MW 2 */
	  3327      "01010110" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3328      "00000011" // 	NOP;                                                                  MUL r9, r9, r3 /* MW 4 */
	  3329      "10010000" // /* MW 3 */
	  3330      "00111001" // /* MW 2 */
	  3331      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3332      "00011101" // 	ZE.16 r1, r5 /* MW 2 */
	  3333      "01010101" // /* MW 1 */
	  3334      "00000001" // 	NOP /* MW 2 */
	  3335      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3336      "01111101" // 	ZE.16 r7, r7 /* MW 2 */
	  3337      "01010111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3338      "00000011" // 	NOP;                                                                  ADD r7, r0, r7 /* MW 4 */
	  3339      "01110000" // /* MW 3 */
	  3340      "01110000" // /* MW 2 */
	  3341      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3342      "00000011" // 	NOP;                                                                  ADD r7, r1, r7 /* MW 4 */
	  3343      "01110000" // /* MW 3 */
	  3344      "01110001" // /* MW 2 */
	  3345      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3346      "00000011" // 	NOP;                                                                  ASHL r5, r5, r13 /* MW 4 */
	  3347      "01010000" // /* MW 3 */
	  3348      "11010101" // /* MW 2 */
	  3349      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
.src_ref 8 "f32_div.c" 142 23
	  3350      "01110111" // 	NOP;                                                                  ZE.16 r1, r5;                 MOV.s8 r5, #2 /* MW 8 */
	  3351      "10100010" // /* MW 7 */
	  3352      "01001010" // /* MW 6 */
	  3353      "01000011" // /* MW 5 */
	  3354      "00101101" // /* MW 4 */
	  3355      "00110000" // /* MW 3 */
	  3356      "00000000" // /* MW 2 */
	  3357      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3358      "00000011" // 	NOP;                                                                  ASHL r6, r6, r13 /* MW 4 */
	  3359      "01100000" // /* MW 3 */
	  3360      "11010110" // /* MW 2 */
	  3361      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3362      "01101101" // 	ZE.16 r6, r6 /* MW 2 */
	  3363      "01010110" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3364      "00000011" // 	NOP;                                                                  ASHL r7, r7, r13 /* MW 4 */
	  3365      "01110000" // /* MW 3 */
	  3366      "11010111" // /* MW 2 */
	  3367      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3368      "00000011" // 	NOP;                                                                  ADD r6, r6, r1 /* MW 4 */
	  3369      "01100000" // /* MW 3 */
	  3370      "00010110" // /* MW 2 */
	  3371      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3372      "00000011" // 	NOP;                                                                  AND r15, r7, r15 /* MW 4 */
	  3373      "11110000" // /* MW 3 */
	  3374      "11110111" // /* MW 2 */
	  3375      "00110100" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
.src_ref 8 "f32_div.c" 142 15
	  3376      "01110111" // 	NOP;                                                                  ADD r8, r8, r2;               MOV.s8 r2, #63 /* MW 8 */
	  3377      "00010000" // /* MW 7 */
	  3378      "00000101" // /* MW 6 */
	  3379      "10000110" // /* MW 5 */
	  3380      "11111100" // /* MW 4 */
	  3381      "00110011" // /* MW 3 */
	  3382      "00000000" // /* MW 2 */
	  3383      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3384      "00000011" // 	NOP;                                                                  ADD r15, r6, r15 /* MW 4 */
	  3385      "11110000" // /* MW 3 */
	  3386      "11110110" // /* MW 2 */
	  3387      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3388      "00000011" // 	NOP;                                                                  ADD r15, r9, r15 /* MW 4 */
	  3389      "11110000" // /* MW 3 */
	  3390      "11111001" // /* MW 2 */
	  3391      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 138 33
	  3392      "00000011" // 	NOP;                                                                  ADD r15, r8, r15 /* MW 4 */
	  3393      "11110000" // /* MW 3 */
	  3394      "11111000" // /* MW 2 */
	  3395      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 141 9 first
	  3396      "00000011" // 	NOP;                                                                  ADD r8, r15, #2 /* MW 4 */
	  3397      "10000000" // /* MW 3 */
	  3398      "00101111" // /* MW 2 */
	  3399      "00100000" // /* MW 1 */
.src_ref 8 "f32_div.c" 142 15 first
	  3400      "00000011" // 	NOP;                                                                  AND r15, r8, r2 /* MW 4 */
	  3401      "11110000" // /* MW 3 */
	  3402      "00101000" // /* MW 2 */
	  3403      "00110100" // /* MW 1 */
.src_ref 8 "f32_div.c" 142 23
	  3404      "00000011" // 	NOP;                                                                  GEU r15, r15, r5 /* MW 4 */
	  3405      "11110000" // /* MW 3 */
	  3406      "01011111" // /* MW 2 */
	  3407      "00111100" // /* MW 1 */
.src_ref 8 "f32_div.c" 142 4
	  3408      "11110111" // 	                                        NOP;                                                        BNEZ r15,#3632;               NOP /* MW 8 */
	  3409      "00000111" // /* MW 7 */
	  3410      "11100011" // /* MW 6 */
	  3411      "11100000" // /* MW 5 */
	  3412      "10010001" // /* MW 4 */
	  3413      "00000000" // /* MW 3 */
	  3414      "00000000" // /* MW 2 */
	  3415      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3416      "00000001" // 	NOP /* MW 2 */
	  3417      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3418      "00000001" // 	NOP /* MW 2 */
	  3419      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3420      "00000001" // 	NOP /* MW 2 */
	  3421      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3422      "00000001" // 	NOP /* MW 2 */
	  3423      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3424      "00000001" // 	NOP /* MW 2 */
	  3425      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 143 13
.src_ref 8 "f32_div.c" 147 64
.src_ref 8 "f32_div.c" 147 69
.src_ref 8 "f32_div.c" 152 28
	  3426      "11011111" // 	NOP;                LDB r9, [sp, #-20]; NOP;                          MOV.s12 r6, #-4;              MOV.s8 r15, #1 /* MW 12 */
	  3427      "00011111" // /* MW 11 */
	  3428      "10110000" // /* MW 10 */
	  3429      "11001101" // /* MW 9 */
	  3430      "11111111" // /* MW 8 */
	  3431      "00000001" // /* MW 7 */
	  3432      "00000000" // /* MW 6 */
	  3433      "01100000" // /* MW 5 */
	  3434      "11111111" // /* MW 4 */
	  3435      "00111001" // /* MW 3 */
	  3436      "00000000" // /* MW 2 */
	  3437      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 143 13 first
	  3438      "00000011" // 	NOP;                                                                  AND r8, r8, r6 /* MW 4 */
	  3439      "10000000" // /* MW 3 */
	  3440      "01101000" // /* MW 2 */
	  3441      "00110100" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 64 first
	  3442      "00000011" // 	NOP;                                                                  LSHL r5, r8, r15 /* MW 4 */
	  3443      "01010000" // /* MW 3 */
	  3444      "11111000" // /* MW 2 */
	  3445      "00111110" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3446      "00000011" // 	NOP;                                                                  ASHL r7, r5, r13 /* MW 4 */
	  3447      "01110000" // /* MW 3 */
	  3448      "11010101" // /* MW 2 */
	  3449      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3450      "00000011" // 	NOP;                                                                  MUL r2, r14, r5 /* MW 4 */
	  3451      "00100000" // /* MW 3 */
	  3452      "01011110" // /* MW 2 */
	  3453      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3454      "01101101" // 	ZE.16 r6, r5 /* MW 2 */
	  3455      "01010101" // /* MW 1 */
	  3456      "00000001" // 	NOP /* MW 2 */
	  3457      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3458      "01111101" // 	ZE.16 r7, r7 /* MW 2 */
	  3459      "01010111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3460      "00011101" // 	ZE.16 r1, r9 /* MW 2 */
	  3461      "01011001" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3462      "00000011" // 	NOP;                                                                  MUL r5, r6, r1 /* MW 4 */
	  3463      "01010000" // /* MW 3 */
	  3464      "00010110" // /* MW 2 */
	  3465      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3466      "00000011" // 	NOP;                                                                  ASHL r0, r9, r13 /* MW 4 */
	  3467      "00000000" // /* MW 3 */
	  3468      "11011001" // /* MW 2 */
	  3469      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3470      "00000011" // 	NOP;                                                                  MUL r1, r1, r7 /* MW 4 */
	  3471      "00010000" // /* MW 3 */
	  3472      "01110001" // /* MW 2 */
	  3473      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3474      "00000011" // 	NOP;                                                                  ASHL r3, r5, r13 /* MW 4 */
	  3475      "00110000" // /* MW 3 */
	  3476      "11010101" // /* MW 2 */
	  3477      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3478      "00000011" // 	NOP;                                                                  MUL r9, r14, r9 /* MW 4 */
	  3479      "10010000" // /* MW 3 */
	  3480      "10011110" // /* MW 2 */
	  3481      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3482      "00001101" // 	ZE.16 r0, r0 /* MW 2 */
	  3483      "01010000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3484      "00000011" // 	NOP;                                                                  MUL r6, r0, r6 /* MW 4 */
	  3485      "01100000" // /* MW 3 */
	  3486      "01100000" // /* MW 2 */
	  3487      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3488      "00000011" // 	NOP;                                                                  ADD r9, r2, r9 /* MW 4 */
	  3489      "10010000" // /* MW 3 */
	  3490      "10010010" // /* MW 2 */
	  3491      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3492      "00000011" // 	NOP;                                                                  MUL r7, r0, r7 /* MW 4 */
	  3493      "01110000" // /* MW 3 */
	  3494      "01110000" // /* MW 2 */
	  3495      "00110111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3496      "00101101" // 	ZE.16 r2, r3 /* MW 2 */
	  3497      "01010011" // /* MW 1 */
	  3498      "00000001" // 	NOP /* MW 2 */
	  3499      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3500      "00111101" // 	ZE.16 r3, r1 /* MW 2 */
	  3501      "01010001" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3502      "00001101" // 	ZE.16 r0, r6 /* MW 2 */
	  3503      "01010110" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
.src_ref 8 "f32_div.c" 147 69
	  3504      "01110111" // 	NOP;                                                                  ADD r2, r2, r3;               MOV.s8 r3, #3 /* MW 8 */
	  3505      "01000100" // /* MW 7 */
	  3506      "00000110" // /* MW 6 */
	  3507      "11000110" // /* MW 5 */
	  3508      "00111100" // /* MW 4 */
	  3509      "00110000" // /* MW 3 */
	  3510      "00000000" // /* MW 2 */
	  3511      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3512      "00000011" // 	NOP;                                                                  ASHL r6, r6, r13 /* MW 4 */
	  3513      "01100000" // /* MW 3 */
	  3514      "11010110" // /* MW 2 */
	  3515      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3516      "00000011" // 	NOP;                                                                  ASHL r1, r1, r13 /* MW 4 */
	  3517      "00010000" // /* MW 3 */
	  3518      "11010001" // /* MW 2 */
	  3519      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3520      "11110111" // 	                                                                      ADD r0, r0, r2;               MOV.u20 r2, #0;               NOP /* MW 8 */
	  3521      "00000111" // /* MW 7 */
	  3522      "00000000" // /* MW 6 */
	  3523      "11001000" // /* MW 5 */
	  3524      "01000000" // /* MW 4 */
	  3525      "00000000" // /* MW 3 */
	  3526      "00100000" // /* MW 2 */
	  3527      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3528      "11110111" // 	                                                                      ASHL r13, r0, r13;            MOVT.s12 r2, #-2048;          NOP /* MW 8 */
	  3529      "00000111" // /* MW 7 */
	  3530      "10000000" // /* MW 6 */
	  3531      "01001000" // /* MW 5 */
	  3532      "00000001" // /* MW 4 */
	  3533      "11010000" // /* MW 3 */
	  3534      "11010000" // /* MW 2 */
	  3535      "00111111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
.src_ref 8 "f32_div.c" 147 69
	  3536      "01110111" // 	NOP;                                                                  AND r3, r13, r3;              MOV.s8 r13, #16 /* MW 8 */
	  3537      "10100110" // /* MW 7 */
	  3538      "10000111" // /* MW 6 */
	  3539      "01000110" // /* MW 5 */
	  3540      "00001111" // /* MW 4 */
	  3541      "00110001" // /* MW 3 */
	  3542      "00000000" // /* MW 2 */
	  3543      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3544      "01101101" // 	ZE.16 r6, r6 /* MW 2 */
	  3545      "01010110" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3546      "00011101" // 	ZE.16 r1, r1 /* MW 2 */
	  3547      "01010001" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3548      "00000011" // 	NOP;                                                                  ADD r6, r6, r1 /* MW 4 */
	  3549      "01100000" // /* MW 3 */
	  3550      "00010110" // /* MW 2 */
	  3551      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3552      "00000011" // 	NOP;                                                                  ADD r6, r6, r3 /* MW 4 */
	  3553      "01100000" // /* MW 3 */
	  3554      "00110110" // /* MW 2 */
	  3555      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3556      "00000011" // 	NOP;                                                                  ADD r6, r6, r7 /* MW 4 */
	  3557      "01100000" // /* MW 3 */
	  3558      "01110110" // /* MW 2 */
	  3559      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3560      "01011101" // 	ZE.16 r5, r5 /* MW 2 */
	  3561      "01010101" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3562      "00000011" // 	NOP;                                                                  LSHL r1, r0, r13 /* MW 4 */
	  3563      "00010000" // /* MW 3 */
	  3564      "11010000" // /* MW 2 */
	  3565      "00111110" // /* MW 1 */
.src_ref 8 "f32_div.c" 150 17 first
	  3566      "00000011" // 	NOP;                                                                  ADD r7, r8, #-4 /* MW 4 */
	  3567      "01110000" // /* MW 3 */
	  3568      "11001000" // /* MW 2 */
	  3569      "00100111" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69 first
	  3570      "00000011" // 	NOP;                                                                  OR r5, r1, r5 /* MW 4 */
	  3571      "01010000" // /* MW 3 */
	  3572      "01010001" // /* MW 2 */
	  3573      "00110101" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 69
	  3574      "00000011" // 	NOP;                                                                  ADD r9, r6, r9 /* MW 4 */
	  3575      "10010000" // /* MW 3 */
	  3576      "10010110" // /* MW 2 */
	  3577      "00110000" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 41
	  3578      "00000011" // 	NOP;                                                                  SUB r14, r14, r5 /* MW 4 */
	  3579      "11100000" // /* MW 3 */
	  3580      "01011110" // /* MW 2 */
	  3581      "00110001" // /* MW 1 */
.src_ref 8 "f32_div.c" 147 41
	  3582      "00000011" // 	NOP;                                                                  SBC r12, r12, r9 /* MW 4 */
	  3583      "11000000" // /* MW 3 */
	  3584      "10011100" // /* MW 2 */
	  3585      "00110011" // /* MW 1 */
.src_ref 8 "f32_div.c" 152 12 first
	  3586      "10011101" // 	NEZ r9, r12 /* MW 2 */
	  3587      "01111100" // /* MW 1 */
.src_ref 8 "f32_div.c" 152 12
	  3588      "11101101" // 	NEZ r14, r14 /* MW 2 */
	  3589      "01111110" // /* MW 1 */
.src_ref 8 "f32_div.c" 152 28
	  3590      "00000011" // 	NOP;                                                                  OR r15, r8, r15 /* MW 4 */
	  3591      "11110000" // /* MW 3 */
	  3592      "11111000" // /* MW 2 */
	  3593      "00110101" // /* MW 1 */
.src_ref 8 "f32_div.c" 152 12
	  3594      "11110111" // 	                                                                      OR r0, r14, r9;               J #3648;                      NOP /* MW 8 */
	  3595      "00000111" // /* MW 7 */
	  3596      "11100100" // /* MW 6 */
	  3597      "00000000" // /* MW 5 */
	  3598      "10100000" // /* MW 4 */
	  3599      "00000000" // /* MW 3 */
	  3600      "10011110" // /* MW 2 */
	  3601      "00110101" // /* MW 1 */
.src_ref 8 "f32_div.c" 149 17 first
.delay_slot
	  3602      "00000011" // 	NOP;                                                                  AND r12, r12, r2 /* MW 4 */
	  3603      "11000000" // /* MW 3 */
	  3604      "00101100" // /* MW 2 */
	  3605      "00110100" // /* MW 1 */
.src_ref 8 "f32_div.c" 149 8
.delay_slot
	  3606      "11001101" // 	NEZ r12, r12 /* MW 2 */
	  3607      "01111100" // /* MW 1 */
.src_ref 8 "f32_div.c" 149 8
.src_ref 8 "f32_div.c" 152 12 first
.delay_slot
	  3608      "01110111" // 	NOP;                                                                  ITE_EQZ r14, r8, r15, r0;     MOV.s8 r13, #0 /* MW 8 */
	  3609      "00011100" // /* MW 7 */
	  3610      "11011111" // /* MW 6 */
	  3611      "01000011" // /* MW 5 */
	  3612      "00001111" // /* MW 4 */
	  3613      "00110000" // /* MW 3 */
	  3614      "00000000" // /* MW 2 */
	  3615      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 149 8 first
.delay_slot
	  3616      "00000011" // 	NOP;                                                                  OR r0, r12, r13 /* MW 4 */
	  3617      "00000000" // /* MW 3 */
	  3618      "11011100" // /* MW 2 */
	  3619      "00110101" // /* MW 1 */
.src_ref 8 "f32_div.c" 149 8
.src_ref 8 "f32_div.c" 156 11
.delay_slot
	  3620      "00011111" // 	NOP;                LDB lr, [sp, #-4];  NOP;                          ITE_EQZ r8, r14, r7, r0;      NOP /* MW 12 */
	  3621      "00000000" // /* MW 11 */
	  3622      "00000000" // /* MW 10 */
	  3623      "11111010" // /* MW 9 */
	  3624      "01111001" // /* MW 8 */
	  3625      "00000000" // /* MW 7 */
	  3626      "00000000" // /* MW 6 */
	  3627      "11100000" // /* MW 5 */
	  3628      "01111111" // /* MW 4 */
	  3629      "00101100" // /* MW 3 */
	  3630      "00000000" // /* MW 2 */
	  3631      "00000000" // /* MW 1 */
.label TGT_F_Z7f32_divjj_832
.src_ref 8 "f32_div.c" 156 11
	  3632      "00000010" // 	NOP;                LDB lr, [sp, #-4];  NOP;                          NOP;                          NOP;                          NOP;                                    NOP /* MW 16 */
	  3633      "00000000" // /* MW 15 */
	  3634      "00000000" // /* MW 14 */
	  3635      "00000000" // /* MW 13 */
	  3636      "00000000" // /* MW 12 */
	  3637      "00000000" // /* MW 11 */
	  3638      "00000000" // /* MW 10 */
	  3639      "00000000" // /* MW 9 */
	  3640      "00000000" // /* MW 8 */
	  3641      "00000000" // /* MW 7 */
	  3642      "00000000" // /* MW 6 */
	  3643      "11100000" // /* MW 5 */
	  3644      "01111111" // /* MW 4 */
	  3645      "00101100" // /* MW 3 */
	  3646      "00000000" // /* MW 2 */
	  3647      "00000000" // /* MW 1 */
.label TGT_F_Z7f32_divjj_848
.noswbrkpt
	  3648      "00000011" // 	NOP;                LDB r4, [sp, #-16] /* MW 4 */
	  3649      "00111000" // /* MW 3 */
	  3650      "11111111" // /* MW 2 */
	  3651      "01101001" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  3652      "11110111" // 	                                        NOP;                                                        LDA.SPIL r11, [sp, #-12];     NOP /* MW 8 */
	  3653      "11100111" // /* MW 7 */
	  3654      "11111110" // /* MW 6 */
	  3655      "11101111" // /* MW 5 */
	  3656      "11000111" // /* MW 4 */
	  3657      "00000000" // /* MW 3 */
	  3658      "00000000" // /* MW 2 */
	  3659      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  3660      "11110111" // 	                                        NOP;                                                        LDA.SPIL r10, [sp, #-8];      NOP /* MW 8 */
	  3661      "01100111" // /* MW 7 */
	  3662      "11111111" // /* MW 6 */
	  3663      "11101011" // /* MW 5 */
	  3664      "11000111" // /* MW 4 */
	  3665      "00000000" // /* MW 3 */
	  3666      "00000000" // /* MW 2 */
	  3667      "10000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  3668      "00000001" // 	NOP /* MW 2 */
	  3669      "00000000" // /* MW 1 */
.nohwbrkpt
.noswbrkpt
	  3670      "00000001" // 	NOP /* MW 2 */
	  3671      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 156 11 first
.tail_call
.nohwbrkpt
.noswbrkpt
	  3672      "11110111" // 	                                        NOP;                                                        J #4992;                      NOP /* MW 8 */
	  3673      "00000111" // /* MW 7 */
	  3674      "00111000" // /* MW 6 */
	  3675      "00000001" // /* MW 5 */
	  3676      "10100000" // /* MW 4 */
	  3677      "00000000" // /* MW 3 */
	  3678      "00000000" // /* MW 2 */
	  3679      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 156 11
.delay_slot
.nohwbrkpt
.noswbrkpt
	  3680      "00010101" // 	MOV r1, r4 /* MW 2 */
	  3681      "11010011" // /* MW 1 */
.src_ref 8 "f32_div.c" 156 4
.src_ref 8 "f32_div.c" 156 11
.delay_slot
.nohwbrkpt
.noswbrkpt
	  3682      "01110111" // 	PADDA [sp], #-64;                                                     XOR r6, r10, r11;             MOV r7, r1 /* MW 8 */
	  3683      "01001100" // /* MW 7 */
	  3684      "11010111" // /* MW 6 */
	  3685      "11000110" // /* MW 5 */
	  3686      "00011101" // /* MW 4 */
	  3687      "01000111" // /* MW 3 */
	  3688      "10011111" // /* MW 2 */
	  3689      "00001000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3690      "00000001" // 	NOP /* MW 2 */
	  3691      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3692      "00000001" // 	NOP /* MW 2 */
	  3693      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3694      "00000001" // 	NOP /* MW 2 */
	  3695      "00000000" // /* MW 1 */
.label __ll3__Z7f32_divjj
.src_ref 8 "f32_div.c" 160 10 first
.return_address
.no_stack_arguments
	  3696      "11110111" // 	                                        NOP;                                                        JAL #5360;                    NOP /* MW 8 */
	  3697      "00000111" // /* MW 7 */
	  3698      "01001111" // /* MW 6 */
	  3699      "00100001" // /* MW 5 */
	  3700      "10100000" // /* MW 4 */
	  3701      "00000000" // /* MW 3 */
	  3702      "00000000" // /* MW 2 */
	  3703      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3704      "00000001" // 	NOP /* MW 2 */
	  3705      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3706      "00000001" // 	NOP /* MW 2 */
	  3707      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3708      "00000001" // 	NOP /* MW 2 */
	  3709      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3710      "00000001" // 	NOP /* MW 2 */
	  3711      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3712      "00000010" // 	NOP;                NOP;                NOP;                          NOP;                          NOP;                          NOP;                                    NOP /* MW 16 */
	  3713      "00000000" // /* MW 15 */
	  3714      "00000000" // /* MW 14 */
	  3715      "00000000" // /* MW 13 */
	  3716      "00000000" // /* MW 12 */
	  3717      "00000000" // /* MW 11 */
	  3718      "00000000" // /* MW 10 */
	  3719      "00000000" // /* MW 9 */
	  3720      "00000000" // /* MW 8 */
	  3721      "00000000" // /* MW 7 */
	  3722      "00000000" // /* MW 6 */
	  3723      "00000000" // /* MW 5 */
	  3724      "00000000" // /* MW 4 */
	  3725      "00000000" // /* MW 3 */
	  3726      "00000000" // /* MW 2 */
	  3727      "00000000" // /* MW 1 */
.return_address
	  3728      "11110111" // 	                                        NOP;                                                        J #3936;                      NOP /* MW 8 */
	  3729      "00000111" // /* MW 7 */
	  3730      "11110110" // /* MW 6 */
	  3731      "00000000" // /* MW 5 */
	  3732      "10100000" // /* MW 4 */
	  3733      "00000000" // /* MW 3 */
	  3734      "00000000" // /* MW 2 */
	  3735      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 181 4
.delay_slot
	  3736      "00000011" // 	NOP;                LDB lr, [sp, #-4] /* MW 4 */
	  3737      "11111000" // /* MW 3 */
	  3738      "11111111" // /* MW 2 */
	  3739      "01011000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3740      "00000001" // 	NOP /* MW 2 */
	  3741      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3742      "00000001" // 	NOP /* MW 2 */
	  3743      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3744      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  3745      "00000000" // /* MW 3 */
	  3746      "00000000" // /* MW 2 */
	  3747      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3748      "00011111" // 	NOP;                NOP;                NOP;                          NOP;                          NOP /* MW 12 */
	  3749      "00000000" // /* MW 11 */
	  3750      "00000000" // /* MW 10 */
	  3751      "00000000" // /* MW 9 */
	  3752      "00000000" // /* MW 8 */
	  3753      "00000000" // /* MW 7 */
	  3754      "00000000" // /* MW 6 */
	  3755      "00000000" // /* MW 5 */
	  3756      "00000000" // /* MW 4 */
	  3757      "00000000" // /* MW 3 */
	  3758      "00000000" // /* MW 2 */
	  3759      "00000000" // /* MW 1 */
.label __ll4__Z7f32_divjj
	  3760      "11110111" // 	                                        NOP;                                                        J #3936;                      NOP /* MW 8 */
	  3761      "00000111" // /* MW 7 */
	  3762      "11110110" // /* MW 6 */
	  3763      "00000000" // /* MW 5 */
	  3764      "10100000" // /* MW 4 */
	  3765      "00000000" // /* MW 3 */
	  3766      "00000000" // /* MW 2 */
	  3767      "10000000" // /* MW 1 */
.delay_slot
	  3768      "11110111" // 	                                        NOP;                                                        MOV.u20 r0, #0;               NOP /* MW 8 */
	  3769      "00000111" // /* MW 7 */
	  3770      "00000000" // /* MW 6 */
	  3771      "11000000" // /* MW 5 */
	  3772      "01000000" // /* MW 4 */
	  3773      "00000000" // /* MW 3 */
	  3774      "00000000" // /* MW 2 */
	  3775      "10000000" // /* MW 1 */
.delay_slot
	  3776      "11110111" // 	                                        NOP;                                                        MOVT.s12 r0, #2044;           NOP /* MW 8 */
	  3777      "11000111" // /* MW 7 */
	  3778      "01111111" // /* MW 6 */
	  3779      "01000000" // /* MW 5 */
	  3780      "00000001" // /* MW 4 */
	  3781      "00000000" // /* MW 3 */
	  3782      "00000000" // /* MW 2 */
	  3783      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3784      "00000001" // 	NOP /* MW 2 */
	  3785      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3786      "00000001" // 	NOP /* MW 2 */
	  3787      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3788      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  3789      "00000000" // /* MW 3 */
	  3790      "00000000" // /* MW 2 */
	  3791      "00000000" // /* MW 1 */
.label TGT_F_Z7f32_divjj_992
.src_ref 8 "f32_div.c" 85 8 first
	  3792      "11110111" // 	                                        NOP;                                                        BNEZ r13,#4144;               NOP /* MW 8 */
	  3793      "00000111" // /* MW 7 */
	  3794      "00000011" // /* MW 6 */
	  3795      "10100001" // /* MW 5 */
	  3796      "10010001" // /* MW 4 */
	  3797      "00000000" // /* MW 3 */
	  3798      "00000000" // /* MW 2 */
	  3799      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 87 12
.delay_slot
	  3800      "11110111" // 	                                        NOP;                                                        LDA.SPIL r12, [sp, #-20];     NOP /* MW 8 */
	  3801      "11100111" // /* MW 7 */
	  3802      "11111101" // /* MW 6 */
	  3803      "11110011" // /* MW 5 */
	  3804      "11000111" // /* MW 4 */
	  3805      "00000000" // /* MW 3 */
	  3806      "00000000" // /* MW 2 */
	  3807      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3808      "00000001" // 	NOP /* MW 2 */
	  3809      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3810      "00000001" // 	NOP /* MW 2 */
	  3811      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3812      "00000001" // 	NOP /* MW 2 */
	  3813      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3814      "00000001" // 	NOP /* MW 2 */
	  3815      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 86 8 first
	  3816      "11110111" // 	                                        NOP;                                                        BNEZ r15,#4192;               NOP /* MW 8 */
	  3817      "00000111" // /* MW 7 */
	  3818      "00000110" // /* MW 6 */
	  3819      "11100001" // /* MW 5 */
	  3820      "10010001" // /* MW 4 */
	  3821      "00000000" // /* MW 3 */
	  3822      "00000000" // /* MW 2 */
	  3823      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3824      "00000001" // 	NOP /* MW 2 */
	  3825      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3826      "00000001" // 	NOP /* MW 2 */
	  3827      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3828      "00000001" // 	NOP /* MW 2 */
	  3829      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3830      "00000001" // 	NOP /* MW 2 */
	  3831      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3832      "00110111" // 	NOP;                                    NOP;                          NOP /* MW 8 */
	  3833      "00000000" // /* MW 7 */
	  3834      "00000000" // /* MW 6 */
	  3835      "00000000" // /* MW 5 */
	  3836      "00000000" // /* MW 4 */
	  3837      "00000000" // /* MW 3 */
	  3838      "00000000" // /* MW 2 */
	  3839      "00000000" // /* MW 1 */
.label __ll1__Z7f32_divjj
	  3840      "11110111" // 	                                        NOP;                                                        J #3936;                      NOP /* MW 8 */
	  3841      "00000111" // /* MW 7 */
	  3842      "11110110" // /* MW 6 */
	  3843      "00000000" // /* MW 5 */
	  3844      "10100000" // /* MW 4 */
	  3845      "00000000" // /* MW 3 */
	  3846      "00000000" // /* MW 2 */
	  3847      "10000000" // /* MW 1 */
.delay_slot
	  3848      "11110111" // 	                                        NOP;                                                        LDA.SPIL r11, [sp, #-12];     NOP /* MW 8 */
	  3849      "11100111" // /* MW 7 */
	  3850      "11111110" // /* MW 6 */
	  3851      "11101111" // /* MW 5 */
	  3852      "11000111" // /* MW 4 */
	  3853      "00000000" // /* MW 3 */
	  3854      "00000000" // /* MW 2 */
	  3855      "10000000" // /* MW 1 */
.delay_slot
	  3856      "00111111" // 	LDA r10, [sp, #-8]; NOP;                NOP;                                                        MOV.u20 r12, #0;              NOP /* MW 12 */
	  3857      "00000000" // /* MW 11 */
	  3858      "00000000" // /* MW 10 */
	  3859      "00001111" // /* MW 9 */
	  3860      "00000100" // /* MW 8 */
	  3861      "00000000" // /* MW 7 */
	  3862      "00000000" // /* MW 6 */
	  3863      "00010000" // /* MW 5 */
	  3864      "00000000" // /* MW 4 */
	  3865      "10000000" // /* MW 3 */
	  3866      "11111111" // /* MW 2 */
	  3867      "01111010" // /* MW 1 */
.src_ref 8 "f32_div.c" 181 4
.delay_slot
	  3868      "00111111" // 	NOP;                LDB lr, [sp, #-4];  NOP;                                                        MOVT.s12 r12, #2040;          NOP /* MW 12 */
	  3869      "11111000" // /* MW 11 */
	  3870      "00000111" // /* MW 10 */
	  3871      "00010111" // /* MW 9 */
	  3872      "00000000" // /* MW 8 */
	  3873      "00000000" // /* MW 7 */
	  3874      "00000000" // /* MW 6 */
	  3875      "11110000" // /* MW 5 */
	  3876      "01111111" // /* MW 4 */
	  3877      "00101100" // /* MW 3 */
	  3878      "00000000" // /* MW 2 */
	  3879      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 173 36 first
.delay_slot
	  3880      "00110111" // 	LDA r4, [sp, #-16];                     NOP;                          ADD r0, r4, r12 /* MW 8 */
	  3881      "00000000" // /* MW 7 */
	  3882      "00000000" // /* MW 6 */
	  3883      "00000000" // /* MW 5 */
	  3884      "01100010" // /* MW 4 */
	  3885      "00011000" // /* MW 3 */
	  3886      "11111111" // /* MW 2 */
	  3887      "01110100" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3888      "00000010" // 	NOP;                NOP;                NOP;                          NOP;                          NOP;                          NOP;                                    NOP /* MW 16 */
	  3889      "00000000" // /* MW 15 */
	  3890      "00000000" // /* MW 14 */
	  3891      "00000000" // /* MW 13 */
	  3892      "00000000" // /* MW 12 */
	  3893      "00000000" // /* MW 11 */
	  3894      "00000000" // /* MW 10 */
	  3895      "00000000" // /* MW 9 */
	  3896      "00000000" // /* MW 8 */
	  3897      "00000000" // /* MW 7 */
	  3898      "00000000" // /* MW 6 */
	  3899      "00000000" // /* MW 5 */
	  3900      "00000000" // /* MW 4 */
	  3901      "00000000" // /* MW 3 */
	  3902      "00000000" // /* MW 2 */
	  3903      "00000000" // /* MW 1 */
.label __ll2__Z7f32_divjj
.src_ref 8 "f32_div.c" 181 4
	  3904      "01010111" // 	NOP;                LDB lr, [sp, #-4];                                                              MOV r0, r4 /* MW 8 */
	  3905      "00000000" // /* MW 7 */
	  3906      "10100110" // /* MW 6 */
	  3907      "11100011" // /* MW 5 */
	  3908      "01111111" // /* MW 4 */
	  3909      "00101100" // /* MW 3 */
	  3910      "00000000" // /* MW 2 */
	  3911      "00000000" // /* MW 1 */
	  3912      "11110111" // 	                                        NOP;                                                        LDA.SPIL r11, [sp, #-12];     NOP /* MW 8 */
	  3913      "11100111" // /* MW 7 */
	  3914      "11111110" // /* MW 6 */
	  3915      "11101111" // /* MW 5 */
	  3916      "11000111" // /* MW 4 */
	  3917      "00000000" // /* MW 3 */
	  3918      "00000000" // /* MW 2 */
	  3919      "10000000" // /* MW 1 */
	  3920      "11110111" // 	                                        NOP;                                                        LDA.SPIL r10, [sp, #-8];      NOP /* MW 8 */
	  3921      "01100111" // /* MW 7 */
	  3922      "11111111" // /* MW 6 */
	  3923      "11101011" // /* MW 5 */
	  3924      "11000111" // /* MW 4 */
	  3925      "00000000" // /* MW 3 */
	  3926      "00000000" // /* MW 2 */
	  3927      "10000000" // /* MW 1 */
	  3928      "11110111" // 	                                        NOP;                                                        LDA.SPIL r4, [sp, #-16];      NOP /* MW 8 */
	  3929      "01100111" // /* MW 7 */
	  3930      "11111110" // /* MW 6 */
	  3931      "11010011" // /* MW 5 */
	  3932      "11000111" // /* MW 4 */
	  3933      "00000000" // /* MW 3 */
	  3934      "00000000" // /* MW 2 */
	  3935      "10000000" // /* MW 1 */
.label __ll5__Z7f32_divjj
	  3936      "00000001" // 	NOP /* MW 2 */
	  3937      "00000000" // /* MW 1 */
	  3938      "00000001" // 	NOP /* MW 2 */
	  3939      "00000000" // /* MW 1 */
	  3940      "00000001" // 	NOP /* MW 2 */
	  3941      "00000000" // /* MW 1 */
	  3942      "00000001" // 	NOP /* MW 2 */
	  3943      "00000000" // /* MW 1 */
	  3944      "00000001" // 	NOP /* MW 2 */
	  3945      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 181 4 first
	  3946      "00000001" // 	RET lr /* MW 2 */
	  3947      "00000001" // /* MW 1 */
.src_ref 8 "f32_div.c" 181 4
.delay_slot
	  3948      "00110111" // 	PADDA [sp], #-64;                       NOP;                          NOP /* MW 8 */
	  3949      "00000000" // /* MW 7 */
	  3950      "00000000" // /* MW 6 */
	  3951      "00000000" // /* MW 5 */
	  3952      "00000000" // /* MW 4 */
	  3953      "01000000" // /* MW 3 */
	  3954      "10011111" // /* MW 2 */
	  3955      "00001000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3956      "00000001" // 	NOP /* MW 2 */
	  3957      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3958      "00000001" // 	NOP /* MW 2 */
	  3959      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3960      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  3961      "00000000" // /* MW 3 */
	  3962      "00000000" // /* MW 2 */
	  3963      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3964      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  3965      "00000000" // /* MW 3 */
	  3966      "00000000" // /* MW 2 */
	  3967      "00000000" // /* MW 1 */
.label TGT_F_Z7f32_divjj_1168
.src_ref 8 "f32_div.c" 93 8
	  3968      "11110111" // 	                                        NOP;                                                        LDA.SPIL r12, [sp, #-20];     NOP /* MW 8 */
	  3969      "11100111" // /* MW 7 */
	  3970      "11111101" // /* MW 6 */
	  3971      "11110011" // /* MW 5 */
	  3972      "11000111" // /* MW 4 */
	  3973      "00000000" // /* MW 3 */
	  3974      "00000000" // /* MW 2 */
	  3975      "10000000" // /* MW 1 */
	  3976      "00000001" // 	NOP /* MW 2 */
	  3977      "00000000" // /* MW 1 */
	  3978      "00000001" // 	NOP /* MW 2 */
	  3979      "00000000" // /* MW 1 */
	  3980      "00000001" // 	NOP /* MW 2 */
	  3981      "00000000" // /* MW 1 */
	  3982      "00000001" // 	NOP /* MW 2 */
	  3983      "00000000" // /* MW 1 */
	  3984      "00000001" // 	NOP /* MW 2 */
	  3985      "00000000" // /* MW 1 */
	  3986      "00000001" // 	NOP /* MW 2 */
	  3987      "00000000" // /* MW 1 */
	  3988      "00000001" // 	NOP /* MW 2 */
	  3989      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 93 8 first
	  3990      "11110111" // 	                                        NOP;                                                        BEQZ r12,#3904;               NOP /* MW 8 */
	  3991      "00000111" // /* MW 7 */
	  3992      "11110100" // /* MW 6 */
	  3993      "10000000" // /* MW 5 */
	  3994      "10000001" // /* MW 4 */
	  3995      "00000000" // /* MW 3 */
	  3996      "00000000" // /* MW 2 */
	  3997      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  3998      "00000001" // 	NOP /* MW 2 */
	  3999      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4000      "00000001" // 	NOP /* MW 2 */
	  4001      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4002      "00000001" // 	NOP /* MW 2 */
	  4003      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4004      "00000001" // 	NOP /* MW 2 */
	  4005      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4006      "00000001" // 	NOP /* MW 2 */
	  4007      "00000000" // /* MW 1 */
	  4008      "11110111" // 	                                        NOP;                                                        J #3696;                      NOP /* MW 8 */
	  4009      "00000111" // /* MW 7 */
	  4010      "11100111" // /* MW 6 */
	  4011      "00000000" // /* MW 5 */
	  4012      "10100000" // /* MW 4 */
	  4013      "00000000" // /* MW 3 */
	  4014      "00000000" // /* MW 2 */
	  4015      "10000000" // /* MW 1 */
.delay_slot
	  4016      "11110111" // 	                                        NOP;                                                        LDA.SPIL r4, [sp, #-16];      NOP /* MW 8 */
	  4017      "01100111" // /* MW 7 */
	  4018      "11111110" // /* MW 6 */
	  4019      "11010011" // /* MW 5 */
	  4020      "11000111" // /* MW 4 */
	  4021      "00000000" // /* MW 3 */
	  4022      "00000000" // /* MW 2 */
	  4023      "10000000" // /* MW 1 */
.delay_slot
	  4024      "11110111" // 	                                        NOP;                                                        LDA.SPIL r11, [sp, #-12];     NOP /* MW 8 */
	  4025      "11100111" // /* MW 7 */
	  4026      "11111110" // /* MW 6 */
	  4027      "11101111" // /* MW 5 */
	  4028      "11000111" // /* MW 4 */
	  4029      "00000000" // /* MW 3 */
	  4030      "00000000" // /* MW 2 */
	  4031      "10000000" // /* MW 1 */
.delay_slot
	  4032      "11110111" // 	                                        NOP;                                                        LDA.SPIL r10, [sp, #-8];      NOP /* MW 8 */
	  4033      "01100111" // /* MW 7 */
	  4034      "11111111" // /* MW 6 */
	  4035      "11101011" // /* MW 5 */
	  4036      "11000111" // /* MW 4 */
	  4037      "00000000" // /* MW 3 */
	  4038      "00000000" // /* MW 2 */
	  4039      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4040      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  4041      "00000000" // /* MW 3 */
	  4042      "00000000" // /* MW 2 */
	  4043      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4044      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  4045      "00000000" // /* MW 3 */
	  4046      "00000000" // /* MW 2 */
	  4047      "00000000" // /* MW 1 */
.label TGT_F_Z7f32_divjj_1248
.src_ref 8 "f32_div.c" 100 25
	  4048      "11110111" // 	                                        NOP;                                                        LDA.SPIL r12, [sp, #-24];     NOP /* MW 8 */
	  4049      "01100111" // /* MW 7 */
	  4050      "11111101" // /* MW 6 */
	  4051      "11110011" // /* MW 5 */
	  4052      "11000111" // /* MW 4 */
	  4053      "00000000" // /* MW 3 */
	  4054      "00000000" // /* MW 2 */
	  4055      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 100 25
	  4056      "11110111" // 	                                        NOP;                                                        LDA.SPIL r13, [sp, #-20];     NOP /* MW 8 */
	  4057      "11100111" // /* MW 7 */
	  4058      "11111101" // /* MW 6 */
	  4059      "11110111" // /* MW 5 */
	  4060      "11000111" // /* MW 4 */
	  4061      "00000000" // /* MW 3 */
	  4062      "00000000" // /* MW 2 */
	  4063      "10000000" // /* MW 1 */
	  4064      "00000001" // 	NOP /* MW 2 */
	  4065      "00000000" // /* MW 1 */
	  4066      "00000001" // 	NOP /* MW 2 */
	  4067      "00000000" // /* MW 1 */
	  4068      "00000001" // 	NOP /* MW 2 */
	  4069      "00000000" // /* MW 1 */
	  4070      "00000001" // 	NOP /* MW 2 */
	  4071      "00000000" // /* MW 1 */
	  4072      "00000001" // 	NOP /* MW 2 */
	  4073      "00000000" // /* MW 1 */
	  4074      "00000001" // 	NOP /* MW 2 */
	  4075      "00000000" // /* MW 1 */
	  4076      "00000001" // 	NOP /* MW 2 */
	  4077      "00000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 100 25 first
	  4078      "00000011" // 	NOP;                                                                  OR r12, r12, r13 /* MW 4 */
	  4079      "11000000" // /* MW 3 */
	  4080      "11011100" // /* MW 2 */
	  4081      "00110101" // /* MW 1 */
.src_ref 8 "f32_div.c" 100 12
.src_ref 8 "f32_div.c" 100 17
	  4082      "11110111" // 	                                        NOP;                                                        BNEZ r12,#3840;               NOP /* MW 8 */
	  4083      "00000111" // /* MW 7 */
	  4084      "11110000" // /* MW 6 */
	  4085      "10000000" // /* MW 5 */
	  4086      "10010001" // /* MW 4 */
	  4087      "00000000" // /* MW 3 */
	  4088      "00000000" // /* MW 2 */
	  4089      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4090      "00000001" // 	NOP /* MW 2 */
	  4091      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4092      "00000001" // 	NOP /* MW 2 */
	  4093      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4094      "00000001" // 	NOP /* MW 2 */
	  4095      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4096      "00000001" // 	NOP /* MW 2 */
	  4097      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4098      "00000001" // 	NOP /* MW 2 */
	  4099      "00000000" // /* MW 1 */
	  4100      "11110111" // 	                                        NOP;                                                        J #3760;                      NOP /* MW 8 */
	  4101      "00000111" // /* MW 7 */
	  4102      "11101011" // /* MW 6 */
	  4103      "00000000" // /* MW 5 */
	  4104      "10100000" // /* MW 4 */
	  4105      "00000000" // /* MW 3 */
	  4106      "00000000" // /* MW 2 */
	  4107      "10000000" // /* MW 1 */
.delay_slot
	  4108      "11110111" // 	                                        NOP;                                                        LDA.SPIL r4, [sp, #-16];      NOP /* MW 8 */
	  4109      "01100111" // /* MW 7 */
	  4110      "11111110" // /* MW 6 */
	  4111      "11010011" // /* MW 5 */
	  4112      "11000111" // /* MW 4 */
	  4113      "00000000" // /* MW 3 */
	  4114      "00000000" // /* MW 2 */
	  4115      "10000000" // /* MW 1 */
.delay_slot
	  4116      "11110111" // 	                                        NOP;                                                        LDA.SPIL r11, [sp, #-12];     NOP /* MW 8 */
	  4117      "11100111" // /* MW 7 */
	  4118      "11111110" // /* MW 6 */
	  4119      "11101111" // /* MW 5 */
	  4120      "11000111" // /* MW 4 */
	  4121      "00000000" // /* MW 3 */
	  4122      "00000000" // /* MW 2 */
	  4123      "10000000" // /* MW 1 */
.delay_slot
	  4124      "11110111" // 	                                        NOP;                                                        LDA.SPIL r10, [sp, #-8];      NOP /* MW 8 */
	  4125      "01100111" // /* MW 7 */
	  4126      "11111111" // /* MW 6 */
	  4127      "11101011" // /* MW 5 */
	  4128      "11000111" // /* MW 4 */
	  4129      "00000000" // /* MW 3 */
	  4130      "00000000" // /* MW 2 */
	  4131      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 181 4
.delay_slot
	  4132      "00000011" // 	NOP;                LDB lr, [sp, #-4] /* MW 4 */
	  4133      "11111000" // /* MW 3 */
	  4134      "11111111" // /* MW 2 */
	  4135      "01011000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4136      "00110111" // 	NOP;                                    NOP;                          NOP /* MW 8 */
	  4137      "00000000" // /* MW 7 */
	  4138      "00000000" // /* MW 6 */
	  4139      "00000000" // /* MW 5 */
	  4140      "00000000" // /* MW 4 */
	  4141      "00000000" // /* MW 3 */
	  4142      "00000000" // /* MW 2 */
	  4143      "00000000" // /* MW 1 */
.label TGT_F_Z7f32_divjj_1344
	  4144      "11110111" // 	                                        NOP;                                                        J #3696;                      NOP /* MW 8 */
	  4145      "00000111" // /* MW 7 */
	  4146      "11100111" // /* MW 6 */
	  4147      "00000000" // /* MW 5 */
	  4148      "10100000" // /* MW 4 */
	  4149      "00000000" // /* MW 3 */
	  4150      "00000000" // /* MW 2 */
	  4151      "10000000" // /* MW 1 */
.delay_slot
	  4152      "11110111" // 	                                        NOP;                                                        LDA.SPIL r4, [sp, #-16];      NOP /* MW 8 */
	  4153      "01100111" // /* MW 7 */
	  4154      "11111110" // /* MW 6 */
	  4155      "11010011" // /* MW 5 */
	  4156      "11000111" // /* MW 4 */
	  4157      "00000000" // /* MW 3 */
	  4158      "00000000" // /* MW 2 */
	  4159      "10000000" // /* MW 1 */
.delay_slot
	  4160      "11110111" // 	                                        NOP;                                                        LDA.SPIL r10, [sp, #-8];      NOP /* MW 8 */
	  4161      "01100111" // /* MW 7 */
	  4162      "11111111" // /* MW 6 */
	  4163      "11101011" // /* MW 5 */
	  4164      "11000111" // /* MW 4 */
	  4165      "00000000" // /* MW 3 */
	  4166      "00000000" // /* MW 2 */
	  4167      "10000000" // /* MW 1 */
.delay_slot
	  4168      "11110111" // 	                                        NOP;                                                        LDA.SPIL r11, [sp, #-12];     NOP /* MW 8 */
	  4169      "11100111" // /* MW 7 */
	  4170      "11111110" // /* MW 6 */
	  4171      "11101111" // /* MW 5 */
	  4172      "11000111" // /* MW 4 */
	  4173      "00000000" // /* MW 3 */
	  4174      "00000000" // /* MW 2 */
	  4175      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4176      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  4177      "00000000" // /* MW 3 */
	  4178      "00000000" // /* MW 2 */
	  4179      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4180      "00011111" // 	NOP;                NOP;                NOP;                          NOP;                          NOP /* MW 12 */
	  4181      "00000000" // /* MW 11 */
	  4182      "00000000" // /* MW 10 */
	  4183      "00000000" // /* MW 9 */
	  4184      "00000000" // /* MW 8 */
	  4185      "00000000" // /* MW 7 */
	  4186      "00000000" // /* MW 6 */
	  4187      "00000000" // /* MW 5 */
	  4188      "00000000" // /* MW 4 */
	  4189      "00000000" // /* MW 3 */
	  4190      "00000000" // /* MW 2 */
	  4191      "00000000" // /* MW 1 */
.label TGT_F_Z7f32_divjj_1392
.src_ref 8 "f32_div.c" 87 12 first
	  4192      "11110111" // 	                                        NOP;                                                        BEQZ r12,#3760;               NOP /* MW 8 */
	  4193      "00000111" // /* MW 7 */
	  4194      "11101011" // /* MW 6 */
	  4195      "10000000" // /* MW 5 */
	  4196      "10000001" // /* MW 4 */
	  4197      "00000000" // /* MW 3 */
	  4198      "00000000" // /* MW 2 */
	  4199      "10000000" // /* MW 1 */
.delay_slot
	  4200      "11110111" // 	                                        NOP;                                                        LDA.SPIL r4, [sp, #-16];      NOP /* MW 8 */
	  4201      "01100111" // /* MW 7 */
	  4202      "11111110" // /* MW 6 */
	  4203      "11010011" // /* MW 5 */
	  4204      "11000111" // /* MW 4 */
	  4205      "00000000" // /* MW 3 */
	  4206      "00000000" // /* MW 2 */
	  4207      "10000000" // /* MW 1 */
.delay_slot
	  4208      "11110111" // 	                                        NOP;                                                        LDA.SPIL r10, [sp, #-8];      NOP /* MW 8 */
	  4209      "01100111" // /* MW 7 */
	  4210      "11111111" // /* MW 6 */
	  4211      "11101011" // /* MW 5 */
	  4212      "11000111" // /* MW 4 */
	  4213      "00000000" // /* MW 3 */
	  4214      "00000000" // /* MW 2 */
	  4215      "10000000" // /* MW 1 */
.delay_slot
	  4216      "11110111" // 	                                        NOP;                                                        LDA.SPIL r11, [sp, #-12];     NOP /* MW 8 */
	  4217      "11100111" // /* MW 7 */
	  4218      "11111110" // /* MW 6 */
	  4219      "11101111" // /* MW 5 */
	  4220      "11000111" // /* MW 4 */
	  4221      "00000000" // /* MW 3 */
	  4222      "00000000" // /* MW 2 */
	  4223      "10000000" // /* MW 1 */
.src_ref 8 "f32_div.c" 181 4
.delay_slot
	  4224      "00000011" // 	NOP;                LDB lr, [sp, #-4] /* MW 4 */
	  4225      "11111000" // /* MW 3 */
	  4226      "11111111" // /* MW 2 */
	  4227      "01011000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4228      "00000001" // 	NOP /* MW 2 */
	  4229      "00000000" // /* MW 1 */
	  4230      "11110111" // 	                                        NOP;                                                        J #3696;                      NOP /* MW 8 */
	  4231      "00000111" // /* MW 7 */
	  4232      "11100111" // /* MW 6 */
	  4233      "00000000" // /* MW 5 */
	  4234      "10100000" // /* MW 4 */
	  4235      "00000000" // /* MW 3 */
	  4236      "00000000" // /* MW 2 */
	  4237      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4238      "00000001" // 	NOP /* MW 2 */
	  4239      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4240      "00000001" // 	NOP /* MW 2 */
	  4241      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4242      "00000001" // 	NOP /* MW 2 */
	  4243      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4244      "00000001" // 	NOP /* MW 2 */
	  4245      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4246      "00000001" // 	NOP /* MW 2 */
.label _Z7f32_divjj__end
	  4247      "00000000" // /* MW 1 */
.label _Z25softfloat_approxRecip32_1j
.function softfloat_approxRecip32_1 _Z25softfloat_approxRecip32_1j
.src_ref 8 "s_approxRecip32_1.c" 53 13
.src_ref 8 "s_approxRecip32_1.c" 53 18
.src_ref 8 "s_approxRecip32_1.c" 55 36
.src_ref 8 "s_approxRecip32_1.c" 61 4 first
.function_start
	  4256      "01011111" // 	NOP;                MOV.s9 r8, #-27;    NOP;                          MOV.s12 r9, #15;              MOV.s8 r13, #1 /* MW 12 */
	  4257      "00011111" // /* MW 11 */
	  4258      "01110000" // /* MW 10 */
	  4259      "11111110" // /* MW 9 */
	  4260      "00000000" // /* MW 8 */
	  4261      "00000001" // /* MW 7 */
	  4262      "00000000" // /* MW 6 */
	  4263      "10100000" // /* MW 5 */
	  4264      "11111100" // /* MW 4 */
	  4265      "00011000" // /* MW 3 */
	  4266      "00000000" // /* MW 2 */
	  4267      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 53 13 first
.src_ref 8 "s_approxRecip32_1.c" 56 43
.src_ref 8 "s_approxRecip32_1.c" 56 73
	  4268      "00111111" // 	NOP;                MOV.s9 r14, #-20;                                 LSHL r8, r6, r8;              MOV.u20 p1, #201088;          NOP /* MW 12 */
	  4269      "10000000" // /* MW 11 */
	  4270      "01010001" // /* MW 10 */
	  4271      "11001010" // /* MW 9 */
	  4272      "00000100" // /* MW 8 */
	  4273      "11010000" // /* MW 7 */
	  4274      "11010000" // /* MW 6 */
	  4275      "10000111" // /* MW 5 */
	  4276      "11111101" // /* MW 4 */
	  4277      "00011110" // /* MW 3 */
	  4278      "00000000" // /* MW 2 */
	  4279      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 53 18
.src_ref 8 "s_approxRecip32_1.c" 54 23
.src_ref 8 "s_approxRecip32_1.c" 55 35
	  4280      "00111111" // 	NOP;                MOV.s9 r8, #-11;                                  AND r9, r8, r9;               MOV.u20 p0, #201056;          NOP /* MW 12 */
	  4281      "01100000" // /* MW 11 */
	  4282      "00010001" // /* MW 10 */
	  4283      "11001010" // /* MW 9 */
	  4284      "00000100" // /* MW 8 */
	  4285      "00010010" // /* MW 7 */
	  4286      "10010011" // /* MW 6 */
	  4287      "10100110" // /* MW 5 */
	  4288      "11111110" // /* MW 4 */
	  4289      "00011000" // /* MW 3 */
	  4290      "00000000" // /* MW 2 */
	  4291      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 55 36 first
.src_ref 8 "s_approxRecip32_1.c" 57 35
.src_ref 8 "s_approxRecip32_1.c" 58 40
.src_ref 8 "s_approxRecip32_1.c" 59 40
.src_ref 8 "s_approxRecip32_1.c" 60 23
.src_ref 8 "s_approxRecip32_1.c" 60 51
	  4292      "01110111" // 	NOP;                                                                  LSHL r9, r9, r13;             MOV.s8 r13, #-16 /* MW 8 */
	  4293      "00110010" // /* MW 7 */
	  4294      "11011011" // /* MW 6 */
	  4295      "01000111" // /* MW 5 */
	  4296      "00001111" // /* MW 4 */
	  4297      "00111111" // /* MW 3 */
	  4298      "00000000" // /* MW 2 */
	  4299      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 54 23 first
.src_ref 8 "s_approxRecip32_1.c" 55 35
.src_ref 8 "s_approxRecip32_1.c" 56 43
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4300      "00011111" // 	NOP;                MOV.s9 r9, #0;      NOP;                          LSHL r8, r6, r8;              MOV cs0, r9 /* MW 12 */
	  4301      "10010110" // /* MW 11 */
	  4302      "00000111" // /* MW 10 */
	  4303      "00011010" // /* MW 9 */
	  4304      "11111010" // /* MW 8 */
	  4305      "00000000" // /* MW 7 */
	  4306      "00000000" // /* MW 6 */
	  4307      "00000000" // /* MW 5 */
	  4308      "11000000" // /* MW 4 */
	  4309      "00011001" // /* MW 3 */
	  4310      "00000000" // /* MW 2 */
	  4311      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 54 10
.src_ref 8 "s_approxRecip32_1.c" 57 35
.src_ref 8 "s_approxRecip32_1.c" 58 40
.src_ref 8 "s_approxRecip32_1.c" 59 40
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4312      "01110111" // 	NOP;                                                                  ZE.16 r15, r8;                MOV.s8 r8, #3 /* MW 8 */
	  4313      "00011110" // /* MW 7 */
	  4314      "01001011" // /* MW 6 */
	  4315      "00000011" // /* MW 5 */
	  4316      "00111110" // /* MW 4 */
	  4317      "00110000" // /* MW 3 */
	  4318      "00000000" // /* MW 2 */
	  4319      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 56 43 first
.src_ref 8 "s_approxRecip32_1.c" 57 35 first
	  4320      "00110111" // 	LDA.u16 r2, [p1, cs0];                  NOP;                          ASHL r0, r6, r13 /* MW 8 */
	  4321      "00000000" // /* MW 7 */
	  4322      "00000000" // /* MW 6 */
	  4323      "00000000" // /* MW 5 */
	  4324      "11101011" // /* MW 4 */
	  4325      "01011111" // /* MW 3 */
	  4326      "11000000" // /* MW 2 */
	  4327      "10011010" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 55 35
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4328      "00110111" // 	LDA.u16 r0, [p0, cs0];                  NOP;                          ZE.16 r1, r0 /* MW 8 */
	  4329      "00000000" // /* MW 7 */
	  4330      "00000000" // /* MW 6 */
	  4331      "00001000" // /* MW 5 */
	  4332      "00101000" // /* MW 4 */
	  4333      "00001101" // /* MW 3 */
	  4334      "11000000" // /* MW 2 */
	  4335      "10011000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4336      "11001101" // 	ZE.16 r12, r6 /* MW 2 */
	  4337      "01010110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4338      "00000011" // 	NOP;                                                                  MUL r6, r6, r9 /* MW 4 */
	  4339      "01100000" // /* MW 3 */
	  4340      "10010110" // /* MW 2 */
	  4341      "00110111" // /* MW 1 */
	  4342      "00000001" // 	NOP /* MW 2 */
	  4343      "00000000" // /* MW 1 */
	  4344      "00000001" // 	NOP /* MW 2 */
	  4345      "00000000" // /* MW 1 */
	  4346      "00000001" // 	NOP /* MW 2 */
	  4347      "00000000" // /* MW 1 */
	  4348      "00000001" // 	NOP /* MW 2 */
	  4349      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 56 51
	  4350      "00000011" // 	NOP;                                                                  MUL r15, r2, r15 /* MW 4 */
	  4351      "11110000" // /* MW 3 */
	  4352      "11110010" // /* MW 2 */
	  4353      "00110111" // /* MW 1 */
	  4354      "00000001" // 	NOP /* MW 2 */
	  4355      "00000000" // /* MW 1 */
	  4356      "00000001" // 	NOP /* MW 2 */
	  4357      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 56 73
	  4358      "00000011" // 	NOP;                                                                  LSHL r14, r15, r14 /* MW 4 */
	  4359      "11100000" // /* MW 3 */
	  4360      "11101111" // /* MW 2 */
	  4361      "00111110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 56 13
	  4362      "00000011" // 	NOP;                                                                  SUB r14, r0, r14 /* MW 4 */
	  4363      "11100000" // /* MW 3 */
	  4364      "11100000" // /* MW 2 */
	  4365      "00110001" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 55 7
	  4366      "11101101" // 	ZE.16 r14, r14 /* MW 2 */
	  4367      "01011110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4368      "00000011" // 	NOP;                                                                  MUL r0, r12, r14 /* MW 4 */
	  4369      "00000000" // /* MW 3 */
	  4370      "11101100" // /* MW 2 */
	  4371      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4372      "00000011" // 	NOP;                                                                  ASHL r15, r14, r13 /* MW 4 */
	  4373      "11110000" // /* MW 3 */
	  4374      "11011110" // /* MW 2 */
	  4375      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4376      "00000011" // 	NOP;                                                                  MUL r3, r14, r1 /* MW 4 */
	  4377      "00110000" // /* MW 3 */
	  4378      "00011110" // /* MW 2 */
	  4379      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4380      "11111101" // 	ZE.16 r15, r15 /* MW 2 */
	  4381      "01011111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4382      "00000011" // 	NOP;                                                                  MUL r12, r12, r15 /* MW 4 */
	  4383      "11000000" // /* MW 3 */
	  4384      "11111100" // /* MW 2 */
	  4385      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4386      "00000011" // 	NOP;                                                                  ASHL r2, r0, r13 /* MW 4 */
	  4387      "00100000" // /* MW 3 */
	  4388      "11010000" // /* MW 2 */
	  4389      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4390      "00000011" // 	NOP;                                                                  MUL r1, r1, r15 /* MW 4 */
	  4391      "00010000" // /* MW 3 */
	  4392      "11110001" // /* MW 2 */
	  4393      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4394      "01011101" // 	ZE.16 r5, r12 /* MW 2 */
	  4395      "01011100" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4396      "00000011" // 	NOP;                                                                  MUL r9, r14, r9 /* MW 4 */
	  4397      "10010000" // /* MW 3 */
	  4398      "10011110" // /* MW 2 */
	  4399      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4400      "01111101" // 	ZE.16 r7, r3 /* MW 2 */
	  4401      "01010011" // /* MW 1 */
	  4402      "00000001" // 	NOP /* MW 2 */
	  4403      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4404      "00101101" // 	ZE.16 r2, r2 /* MW 2 */
	  4405      "01010010" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4406      "01110111" // 	NOP;                                                                  ADD r5, r2, r5;               MOV.s8 r2, #16 /* MW 8 */
	  4407      "01001010" // /* MW 7 */
	  4408      "00001010" // /* MW 6 */
	  4409      "10000110" // /* MW 5 */
	  4410      "00001100" // /* MW 4 */
	  4411      "00110001" // /* MW 3 */
	  4412      "00000000" // /* MW 2 */
	  4413      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4414      "00000011" // 	NOP;                                                                  ADD r5, r5, r7 /* MW 4 */
	  4415      "01010000" // /* MW 3 */
	  4416      "01110101" // /* MW 2 */
	  4417      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4418      "00000011" // 	NOP;                                                                  ASHL r7, r5, r13 /* MW 4 */
	  4419      "01110000" // /* MW 3 */
	  4420      "11010101" // /* MW 2 */
	  4421      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4422      "00000011" // 	NOP;                                                                  ASHL r3, r3, r13 /* MW 4 */
	  4423      "00110000" // /* MW 3 */
	  4424      "11010011" // /* MW 2 */
	  4425      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4426      "00000011" // 	NOP;                                                                  ASHL r12, r12, r13 /* MW 4 */
	  4427      "11000000" // /* MW 3 */
	  4428      "11011100" // /* MW 2 */
	  4429      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4430      "00111101" // 	ZE.16 r3, r3 /* MW 2 */
	  4431      "01010011" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4432      "11001101" // 	ZE.16 r12, r12 /* MW 2 */
	  4433      "01011100" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
.src_ref 8 "s_approxRecip32_1.c" 57 55
	  4434      "01110111" // 	NOP;                                                                  ADD r3, r12, r3;              MOV.s8 r12, #25 /* MW 8 */
	  4435      "10000110" // /* MW 7 */
	  4436      "00000111" // /* MW 6 */
	  4437      "00000110" // /* MW 5 */
	  4438      "10011111" // /* MW 4 */
	  4439      "00110001" // /* MW 3 */
	  4440      "00000000" // /* MW 2 */
	  4441      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4442      "00000011" // 	NOP;                                                                  AND r7, r8, r7 /* MW 4 */
	  4443      "01110000" // /* MW 3 */
	  4444      "01111000" // /* MW 2 */
	  4445      "00110100" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4446      "00000011" // 	NOP;                                                                  ADD r3, r3, r7 /* MW 4 */
	  4447      "00110000" // /* MW 3 */
	  4448      "01110011" // /* MW 2 */
	  4449      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4450      "00000011" // 	NOP;                                                                  ADD r1, r1, r3 /* MW 4 */
	  4451      "00010000" // /* MW 3 */
	  4452      "00110001" // /* MW 2 */
	  4453      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
.src_ref 8 "s_approxRecip32_1.c" 57 55
	  4454      "01110111" // 	NOP;                                                                  LSHL r5, r5, r2;              MOV.s8 r2, #-7 /* MW 8 */
	  4455      "10101010" // /* MW 7 */
	  4456      "11000100" // /* MW 6 */
	  4457      "10000111" // /* MW 5 */
	  4458      "10011100" // /* MW 4 */
	  4459      "00111111" // /* MW 3 */
	  4460      "00000000" // /* MW 2 */
	  4461      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4462      "00000011" // 	NOP;                                                                  ADD r6, r6, r9 /* MW 4 */
	  4463      "01100000" // /* MW 3 */
	  4464      "10010110" // /* MW 2 */
	  4465      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4466      "00001101" // 	ZE.16 r0, r0 /* MW 2 */
	  4467      "01010000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 13
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4468      "01110111" // 	NOP;                                                                  OR r3, r0, r5;                MOV.s8 r0, #-1 /* MW 8 */
	  4469      "00000110" // /* MW 7 */
	  4470      "10101010" // /* MW 6 */
	  4471      "00000110" // /* MW 5 */
	  4472      "11111100" // /* MW 4 */
	  4473      "00111111" // /* MW 3 */
	  4474      "00000000" // /* MW 2 */
	  4475      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 35
	  4476      "00000011" // 	NOP;                                                                  ADD r6, r6, r1 /* MW 4 */
	  4477      "01100000" // /* MW 3 */
	  4478      "00010110" // /* MW 2 */
	  4479      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 55
	  4480      "00000011" // 	NOP;                                                                  LSHL r1, r3, r2 /* MW 4 */
	  4481      "00010000" // /* MW 3 */
	  4482      "00100011" // /* MW 2 */
	  4483      "00111110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 55
	  4484      "00000011" // 	NOP;                                                                  LSHL r12, r6, r12 /* MW 4 */
	  4485      "11000000" // /* MW 3 */
	  4486      "11000110" // /* MW 2 */
	  4487      "00111110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 55
	  4488      "00000011" // 	NOP;                                                                  OR r12, r12, r1 /* MW 4 */
	  4489      "11000000" // /* MW 3 */
	  4490      "00011100" // /* MW 2 */
	  4491      "00110101" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 57 13
	  4492      "00000011" // 	NOP;                                                                  XOR r12, r0, r12 /* MW 4 */
	  4493      "11000000" // /* MW 3 */
	  4494      "11000000" // /* MW 2 */
	  4495      "00110110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40 first
	  4496      "01101101" // 	ZE.16 r6, r12 /* MW 2 */
	  4497      "01011100" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4498      "00000011" // 	NOP;                                                                  MUL r1, r6, r15 /* MW 4 */
	  4499      "00010000" // /* MW 3 */
	  4500      "11110110" // /* MW 2 */
	  4501      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4502      "00000011" // 	NOP;                                                                  MUL r2, r6, r14 /* MW 4 */
	  4503      "00100000" // /* MW 3 */
	  4504      "11100110" // /* MW 2 */
	  4505      "00110111" // /* MW 1 */
	  4506      "00000001" // 	NOP /* MW 2 */
	  4507      "00000000" // /* MW 1 */
	  4508      "00000001" // 	NOP /* MW 2 */
	  4509      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4510      "00000011" // 	NOP;                                                                  ASHL r0, r12, r13 /* MW 4 */
	  4511      "00000000" // /* MW 3 */
	  4512      "11011100" // /* MW 2 */
	  4513      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4514      "00000011" // 	NOP;                                                                  ASHL r5, r2, r13 /* MW 4 */
	  4515      "01010000" // /* MW 3 */
	  4516      "11010010" // /* MW 2 */
	  4517      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4518      "01111101" // 	ZE.16 r7, r1 /* MW 2 */
	  4519      "01010001" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4520      "00001101" // 	ZE.16 r0, r0 /* MW 2 */
	  4521      "01010000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4522      "01011101" // 	ZE.16 r5, r5 /* MW 2 */
	  4523      "01010101" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4524      "00000011" // 	NOP;                                                                  MUL r3, r0, r14 /* MW 4 */
	  4525      "00110000" // /* MW 3 */
	  4526      "11100000" // /* MW 2 */
	  4527      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4528      "00000011" // 	NOP;                                                                  ADD r5, r5, r7 /* MW 4 */
	  4529      "01010000" // /* MW 3 */
	  4530      "01110101" // /* MW 2 */
	  4531      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4532      "00000011" // 	NOP;                                                                  MUL r15, r0, r15 /* MW 4 */
	  4533      "11110000" // /* MW 3 */
	  4534      "11110000" // /* MW 2 */
	  4535      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4536      "01111101" // 	ZE.16 r7, r3 /* MW 2 */
	  4537      "01010011" // /* MW 1 */
	  4538      "00000001" // 	NOP /* MW 2 */
	  4539      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4540      "00000011" // 	NOP;                                                                  ASHL r1, r1, r13 /* MW 4 */
	  4541      "00010000" // /* MW 3 */
	  4542      "11010001" // /* MW 2 */
	  4543      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4544      "00000011" // 	NOP;                                                                  ASHL r3, r3, r13 /* MW 4 */
	  4545      "00110000" // /* MW 3 */
	  4546      "11010011" // /* MW 2 */
	  4547      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4548      "00011101" // 	ZE.16 r1, r1 /* MW 2 */
	  4549      "01010001" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4550      "00111101" // 	ZE.16 r3, r3 /* MW 2 */
	  4551      "01010011" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4552      "00000011" // 	NOP;                                                                  ADD r5, r5, r7 /* MW 4 */
	  4553      "01010000" // /* MW 3 */
	  4554      "01110101" // /* MW 2 */
	  4555      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4556      "00000011" // 	NOP;                                                                  ADD r1, r1, r3 /* MW 4 */
	  4557      "00010000" // /* MW 3 */
	  4558      "00110001" // /* MW 2 */
	  4559      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4560      "00000011" // 	NOP;                                                                  ASHL r3, r5, r13 /* MW 4 */
	  4561      "00110000" // /* MW 3 */
	  4562      "11010101" // /* MW 2 */
	  4563      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4564      "00000011" // 	NOP;                                                                  AND r7, r8, r3 /* MW 4 */
	  4565      "01110000" // /* MW 3 */
	  4566      "00111000" // /* MW 2 */
	  4567      "00110100" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
.src_ref 8 "s_approxRecip32_1.c" 58 40
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4568      "01110111" // 	NOP;                                                                  ADD r7, r1, r7;               MOV.s8 r1, #0 /* MW 8 */
	  4569      "00101110" // /* MW 7 */
	  4570      "00001110" // /* MW 6 */
	  4571      "01000110" // /* MW 5 */
	  4572      "00001100" // /* MW 4 */
	  4573      "00110000" // /* MW 3 */
	  4574      "00000000" // /* MW 2 */
	  4575      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4576      "00000011" // 	NOP;                                                                  MUL r12, r12, r1 /* MW 4 */
	  4577      "11000000" // /* MW 3 */
	  4578      "00011100" // /* MW 2 */
	  4579      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40 first
	  4580      "00000011" // 	NOP;                                                                  MUL r3, r0, r6 /* MW 4 */
	  4581      "00110000" // /* MW 3 */
	  4582      "01100000" // /* MW 2 */
	  4583      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4584      "00000011" // 	NOP;                                                                  MUL r6, r6, r6 /* MW 4 */
	  4585      "01100000" // /* MW 3 */
	  4586      "01100110" // /* MW 2 */
	  4587      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4588      "00000011" // 	NOP;                                                                  MUL r0, r0, r0 /* MW 4 */
	  4589      "00000000" // /* MW 3 */
	  4590      "00000000" // /* MW 2 */
	  4591      "00110111" // /* MW 1 */
	  4592      "00000001" // 	NOP /* MW 2 */
	  4593      "00000000" // /* MW 1 */
	  4594      "00000001" // 	NOP /* MW 2 */
	  4595      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40 first
	  4596      "00000011" // 	NOP;                                                                  ADD r9, r12, r9 /* MW 4 */
	  4597      "10010000" // /* MW 3 */
	  4598      "10011100" // /* MW 2 */
	  4599      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
.src_ref 8 "s_approxRecip32_1.c" 58 65
	  4600      "01110111" // 	NOP;                                                                  ADD r7, r7, r15;              MOV.s8 r15, #8 /* MW 8 */
	  4601      "11101110" // /* MW 7 */
	  4602      "00011110" // /* MW 6 */
	  4603      "11000110" // /* MW 5 */
	  4604      "10001111" // /* MW 4 */
	  4605      "00110000" // /* MW 3 */
	  4606      "00000000" // /* MW 2 */
	  4607      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40
	  4608      "00000011" // 	NOP;                                                                  ADD r9, r9, r7 /* MW 4 */
	  4609      "10010000" // /* MW 3 */
	  4610      "01111001" // /* MW 2 */
	  4611      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40 first
	  4612      "01111101" // 	ZE.16 r7, r3 /* MW 2 */
	  4613      "01010011" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4614      "00000011" // 	NOP;                                                                  ASHL r6, r6, r13 /* MW 4 */
	  4615      "01100000" // /* MW 3 */
	  4616      "11010110" // /* MW 2 */
	  4617      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4618      "01101101" // 	ZE.16 r6, r6 /* MW 2 */
	  4619      "01010110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4620      "00000011" // 	NOP;                                                                  ADD r6, r6, r7 /* MW 4 */
	  4621      "01100000" // /* MW 3 */
	  4622      "01110110" // /* MW 2 */
	  4623      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 27
.src_ref 8 "s_approxRecip32_1.c" 58 40
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4624      "01110111" // 	NOP;                                                                  ADD r7, r6, r7;               MOV.s8 r6, #16 /* MW 8 */
	  4625      "11001110" // /* MW 7 */
	  4626      "00001110" // /* MW 6 */
	  4627      "10000110" // /* MW 5 */
	  4628      "00001101" // /* MW 4 */
	  4629      "00110001" // /* MW 3 */
	  4630      "00000000" // /* MW 2 */
	  4631      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4632      "00000011" // 	NOP;                                                                  ASHL r3, r3, r13 /* MW 4 */
	  4633      "00110000" // /* MW 3 */
	  4634      "11010011" // /* MW 2 */
	  4635      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40 first
	  4636      "00101101" // 	ZE.16 r2, r2 /* MW 2 */
	  4637      "01010010" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40 first
	  4638      "00111101" // 	ZE.16 r3, r3 /* MW 2 */
	  4639      "01010011" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4640      "00000011" // 	NOP;                                                                  ASHL r7, r7, r13 /* MW 4 */
	  4641      "01110000" // /* MW 3 */
	  4642      "11010111" // /* MW 2 */
	  4643      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40 first
	  4644      "00000011" // 	NOP;                                                                  LSHL r5, r5, r6 /* MW 4 */
	  4645      "01010000" // /* MW 3 */
	  4646      "01100101" // /* MW 2 */
	  4647      "00111110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 65
.src_ref 8 "s_approxRecip32_1.c" 58 65
	  4648      "01110111" // 	NOP;                                                                  LSHL r9, r9, r15;             MOV.s8 r15, #-24 /* MW 8 */
	  4649      "00110010" // /* MW 7 */
	  4650      "11011111" // /* MW 6 */
	  4651      "11000111" // /* MW 5 */
	  4652      "10001111" // /* MW 4 */
	  4653      "00111110" // /* MW 3 */
	  4654      "00000000" // /* MW 2 */
	  4655      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40 first
	  4656      "00000011" // 	NOP;                                                                  ADD r3, r3, r3 /* MW 4 */
	  4657      "00110000" // /* MW 3 */
	  4658      "00110011" // /* MW 2 */
	  4659      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 40 first
	  4660      "00000011" // 	NOP;                                                                  OR r2, r2, r5 /* MW 4 */
	  4661      "00100000" // /* MW 3 */
	  4662      "01010010" // /* MW 2 */
	  4663      "00110101" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40 first
	  4664      "00000011" // 	NOP;                                                                  AND r7, r8, r7 /* MW 4 */
	  4665      "01110000" // /* MW 3 */
	  4666      "01111000" // /* MW 2 */
	  4667      "00110100" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4668      "00000011" // 	NOP;                                                                  ADD r3, r3, r7 /* MW 4 */
	  4669      "00110000" // /* MW 3 */
	  4670      "01110011" // /* MW 2 */
	  4671      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 65 first
	  4672      "00000011" // 	NOP;                                                                  LSHL r15, r2, r15 /* MW 4 */
	  4673      "11110000" // /* MW 3 */
	  4674      "11110010" // /* MW 2 */
	  4675      "00111110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 27
	  4676      "00000011" // 	NOP;                                                                  LSHL r14, r14, r6 /* MW 4 */
	  4677      "11100000" // /* MW 3 */
	  4678      "01101110" // /* MW 2 */
	  4679      "00111110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40 first
	  4680      "00000011" // 	NOP;                                                                  ADD r12, r12, r12 /* MW 4 */
	  4681      "11000000" // /* MW 3 */
	  4682      "11001100" // /* MW 2 */
	  4683      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40
	  4684      "00000011" // 	NOP;                                                                  ADD r0, r0, r3 /* MW 4 */
	  4685      "00000000" // /* MW 3 */
	  4686      "00110000" // /* MW 2 */
	  4687      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 65 first
	  4688      "00000011" // 	NOP;                                                                  OR r9, r9, r15 /* MW 4 */
	  4689      "10010000" // /* MW 3 */
	  4690      "11111001" // /* MW 2 */
	  4691      "00110101" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 59 40 first
	  4692      "00000011" // 	NOP;                                                                  ADD r12, r0, r12 /* MW 4 */
	  4693      "11000000" // /* MW 3 */
	  4694      "11000000" // /* MW 2 */
	  4695      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 58 33 first
	  4696      "00000011" // 	NOP;                                                                  ADD r9, r14, r9 /* MW 4 */
	  4697      "10010000" // /* MW 3 */
	  4698      "10011110" // /* MW 2 */
	  4699      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23 first
	  4700      "00001101" // 	ZE.16 r0, r12 /* MW 2 */
	  4701      "01011100" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4702      "11101101" // 	ZE.16 r14, r9 /* MW 2 */
	  4703      "01011001" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4704      "00000011" // 	NOP;                                                                  MUL r6, r0, r14 /* MW 4 */
	  4705      "01100000" // /* MW 3 */
	  4706      "11100000" // /* MW 2 */
	  4707      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4708      "00000011" // 	NOP;                                                                  ASHL r3, r12, r13 /* MW 4 */
	  4709      "00110000" // /* MW 3 */
	  4710      "11011100" // /* MW 2 */
	  4711      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4712      "00000011" // 	NOP;                                                                  MUL r12, r12, r1 /* MW 4 */
	  4713      "11000000" // /* MW 3 */
	  4714      "00011100" // /* MW 2 */
	  4715      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4716      "00111101" // 	ZE.16 r3, r3 /* MW 2 */
	  4717      "01010011" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4718      "00000011" // 	NOP;                                                                  MUL r14, r14, r3 /* MW 4 */
	  4719      "11100000" // /* MW 3 */
	  4720      "00111110" // /* MW 2 */
	  4721      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4722      "00000011" // 	NOP;                                                                  ASHL r15, r9, r13 /* MW 4 */
	  4723      "11110000" // /* MW 3 */
	  4724      "11011001" // /* MW 2 */
	  4725      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4726      "00000011" // 	NOP;                                                                  MUL r2, r1, r9 /* MW 4 */
	  4727      "00100000" // /* MW 3 */
	  4728      "10010001" // /* MW 2 */
	  4729      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4730      "11111101" // 	ZE.16 r15, r15 /* MW 2 */
	  4731      "01011111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4732      "00000011" // 	NOP;                                                                  MUL r0, r0, r15 /* MW 4 */
	  4733      "00000000" // /* MW 3 */
	  4734      "11110000" // /* MW 2 */
	  4735      "00110111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4736      "00000011" // 	NOP;                                                                  MUL r15, r3, r15 /* MW 4 */
	  4737      "11110000" // /* MW 3 */
	  4738      "11110011" // /* MW 2 */
	  4739      "00110111" // /* MW 1 */
	  4740      "00000001" // 	NOP /* MW 2 */
	  4741      "00000000" // /* MW 1 */
	  4742      "00000001" // 	NOP /* MW 2 */
	  4743      "00000000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4744      "00111101" // 	ZE.16 r3, r0 /* MW 2 */
	  4745      "01010000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4746      "00011101" // 	ZE.16 r1, r14 /* MW 2 */
	  4747      "01011110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4748      "00000011" // 	NOP;                                                                  ASHL r6, r6, r13 /* MW 4 */
	  4749      "01100000" // /* MW 3 */
	  4750      "11010110" // /* MW 2 */
	  4751      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4752      "01101101" // 	ZE.16 r6, r6 /* MW 2 */
	  4753      "01010110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4754      "00000011" // 	NOP;                                                                  ADD r6, r6, r3 /* MW 4 */
	  4755      "01100000" // /* MW 3 */
	  4756      "00110110" // /* MW 2 */
	  4757      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4758      "00000011" // 	NOP;                                                                  ASHL r0, r0, r13 /* MW 4 */
	  4759      "00000000" // /* MW 3 */
	  4760      "11010000" // /* MW 2 */
	  4761      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4762      "00000011" // 	NOP;                                                                  ASHL r14, r14, r13 /* MW 4 */
	  4763      "11100000" // /* MW 3 */
	  4764      "11011110" // /* MW 2 */
	  4765      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4766      "00000011" // 	NOP;                                                                  ADD r6, r6, r1 /* MW 4 */
	  4767      "01100000" // /* MW 3 */
	  4768      "00010110" // /* MW 2 */
	  4769      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4770      "00001101" // 	ZE.16 r0, r0 /* MW 2 */
	  4771      "01010000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4772      "11101101" // 	ZE.16 r14, r14 /* MW 2 */
	  4773      "01011110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4774      "00000011" // 	NOP;                                                                  ASHL r6, r6, r13 /* MW 4 */
	  4775      "01100000" // /* MW 3 */
	  4776      "11010110" // /* MW 2 */
	  4777      "00111111" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4778      "00000011" // 	NOP;                                                                  ADD r14, r0, r14 /* MW 4 */
	  4779      "11100000" // /* MW 3 */
	  4780      "11100000" // /* MW 2 */
	  4781      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4782      "00000011" // 	NOP;                                                                  AND r8, r8, r6 /* MW 4 */
	  4783      "10000000" // /* MW 3 */
	  4784      "01101000" // /* MW 2 */
	  4785      "00110100" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4786      "00000011" // 	NOP;                                                                  ADD r12, r12, r2 /* MW 4 */
	  4787      "11000000" // /* MW 3 */
	  4788      "00101100" // /* MW 2 */
	  4789      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
	  4790      "00000011" // 	NOP;                                                                  ADD r8, r8, r14 /* MW 4 */
	  4791      "10000000" // /* MW 3 */
	  4792      "11101000" // /* MW 2 */
	  4793      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 61 4 first
	  4794      "00000001" // 	RET lr /* MW 2 */
	  4795      "00000001" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23 first
.delay_slot
	  4796      "00000011" // 	NOP;                                                                  ADD r8, r8, r15 /* MW 4 */
	  4797      "10000000" // /* MW 3 */
	  4798      "11111000" // /* MW 2 */
	  4799      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 23
.delay_slot
	  4800      "00000011" // 	NOP;                                                                  ADD r8, r8, r12 /* MW 4 */
	  4801      "10000000" // /* MW 3 */
	  4802      "11001000" // /* MW 2 */
	  4803      "00110000" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 51
.delay_slot
	  4804      "00000011" // 	NOP;                                                                  LSHL r8, r8, r13 /* MW 4 */
	  4805      "10000000" // /* MW 3 */
	  4806      "11011000" // /* MW 2 */
	  4807      "00111110" // /* MW 1 */
.src_ref 8 "s_approxRecip32_1.c" 60 6
.delay_slot
	  4808      "00000011" // 	NOP;                                                                  ADD r0, r8, r9 /* MW 4 */
	  4809      "00000000" // /* MW 3 */
	  4810      "10011000" // /* MW 2 */
	  4811      "00110000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4812      "00000001" // 	NOP /* MW 2 */
.label _Z25softfloat_approxRecip32_1j__end
	  4813      "00000000" // /* MW 1 */
.label _Z29softfloat_normSubnormalF32Sigj
.function softfloat_normSubnormalF32Sig _Z29softfloat_normSubnormalF32Sigj
.src_ref 8 "s_normSubnormalF32Sig.c" 41 19
.src_ref 8 "s_normSubnormalF32Sig.c" 49 4 first
.src_ref 9 "primitives.h" 139 4
.src_ref 9 "primitives.h" 139 4
.src_ref 9 "primitives.h" 139 11
.src_ref 9 "primitives.h" 141 10
.function_start
	  4816      "00111111" // 	PADDA [sp], #32;    MOV.s9 r1, #0;                                    MOV.s12 r9, #16;              MOV.u20 r8, #65536;           NOP /* MW 12 */
	  4817      "00000000" // /* MW 11 */
	  4818      "00000000" // /* MW 10 */
	  4819      "01001110" // /* MW 9 */
	  4820      "00000100" // /* MW 8 */
	  4821      "01110010" // /* MW 7 */
	  4822      "00001000" // /* MW 6 */
	  4823      "00001000" // /* MW 5 */
	  4824      "11000000" // /* MW 4 */
	  4825      "11010001" // /* MW 3 */
	  4826      "10010000" // /* MW 2 */
	  4827      "00001000" // /* MW 1 */
.src_ref 9 "primitives.h" 139 11 first
.src_ref 9 "primitives.h" 145 10
	  4828      "00111111" // 	NOP;                MOV.s9 r8, #8;                                    LTU r0, r6, r8;               MOV.u20 r14, #0;              NOP /* MW 12 */
	  4829      "00000000" // /* MW 11 */
	  4830      "10000000" // /* MW 10 */
	  4831      "00001111" // /* MW 9 */
	  4832      "00000100" // /* MW 8 */
	  4833      "11000000" // /* MW 7 */
	  4834      "10110000" // /* MW 6 */
	  4835      "00000111" // /* MW 5 */
	  4836      "11000001" // /* MW 4 */
	  4837      "00011000" // /* MW 3 */
	  4838      "00000000" // /* MW 2 */
	  4839      "00000000" // /* MW 1 */
.src_ref 9 "primitives.h" 141 10 first
.src_ref 9 "primitives.h" 147 43
	  4840      "00111111" // 	NOP;                MOV.s9 r13, #-24;                                 LSHL r12, r6, r9;             MOVT.s12 r14, #16;            NOP /* MW 12 */
	  4841      "00010000" // /* MW 11 */
	  4842      "10000000" // /* MW 10 */
	  4843      "00010111" // /* MW 9 */
	  4844      "00000000" // /* MW 8 */
	  4845      "11011000" // /* MW 7 */
	  4846      "11010010" // /* MW 6 */
	  4847      "00000111" // /* MW 5 */
	  4848      "11111101" // /* MW 4 */
	  4849      "00011101" // /* MW 3 */
	  4850      "00000000" // /* MW 2 */
	  4851      "00000000" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 47 14
.src_ref 9 "primitives.h" 139 4 first
.src_ref 9 "primitives.h" 147 41
	  4852      "00111111" // 	NOP;                MOV.s9 r12, #1;                                   ITE_NEZ r15, r12, r6, r0;     MOV.u20 p1, #201120;          NOP /* MW 12 */
	  4853      "10100000" // /* MW 11 */
	  4854      "01010001" // /* MW 10 */
	  4855      "11001010" // /* MW 9 */
	  4856      "00000100" // /* MW 8 */
	  4857      "10011110" // /* MW 7 */
	  4858      "11101101" // /* MW 6 */
	  4859      "00100011" // /* MW 5 */
	  4860      "11000000" // /* MW 4 */
	  4861      "00011100" // /* MW 3 */
	  4862      "00000000" // /* MW 2 */
	  4863      "00000000" // /* MW 1 */
.src_ref 9 "primitives.h" 139 4
	  4864      "00000011" // 	NOP;                                                                  ITE_EQZ r9, r1, r9, r0 /* MW 4 */
	  4865      "10010000" // /* MW 3 */
	  4866      "10010001" // /* MW 2 */
	  4867      "00011110" // /* MW 1 */
.src_ref 9 "primitives.h" 143 11 first
	  4868      "00000011" // 	NOP;                                                                  LTU r0, r15, r14 /* MW 4 */
	  4869      "00000000" // /* MW 3 */
	  4870      "11101111" // /* MW 2 */
	  4871      "00111101" // /* MW 1 */
.src_ref 9 "primitives.h" 145 10 first
	  4872      "00000011" // 	NOP;                                                                  LSHL r8, r15, r8 /* MW 4 */
	  4873      "10000000" // /* MW 3 */
	  4874      "10001111" // /* MW 2 */
	  4875      "00111110" // /* MW 1 */
.src_ref 9 "primitives.h" 143 4 first
	  4876      "00000011" // 	NOP;                                                                  ITE_NEZ r8, r8, r15, r0 /* MW 4 */
	  4877      "10000000" // /* MW 3 */
	  4878      "11111000" // /* MW 2 */
	  4879      "00011111" // /* MW 1 */
.src_ref 9 "primitives.h" 147 43 first
	  4880      "00000011" // 	NOP;                                                                  LSHL r8, r8, r13 /* MW 4 */
	  4881      "10000000" // /* MW 3 */
	  4882      "11011000" // /* MW 2 */
	  4883      "00111110" // /* MW 1 */
.src_ref 9 "primitives.h" 144 14 first
.src_ref 9 "primitives.h" 147 41
	  4884      "01110111" // 	NOP;                                                                  ADD r8, r9, #8;               MOV cs0, r8 /* MW 8 */
	  4885      "00110000" // /* MW 7 */
	  4886      "00010001" // /* MW 6 */
	  4887      "00000100" // /* MW 5 */
	  4888      "10000110" // /* MW 4 */
	  4889      "00000111" // /* MW 3 */
	  4890      "00000000" // /* MW 2 */
	  4891      "00000000" // /* MW 1 */
.src_ref 9 "primitives.h" 143 4 first
	  4892      "00000011" // 	NOP;                                                                  ITE_NEZ r8, r8, r9, r0 /* MW 4 */
	  4893      "10000000" // /* MW 3 */
	  4894      "10011000" // /* MW 2 */
	  4895      "00011111" // /* MW 1 */
.src_ref 9 "primitives.h" 147 41 first
	  4896      "00110111" // 	LDA.u8 r1, [p1, cs0];                   NOP;                          NOP /* MW 8 */
	  4897      "00000000" // /* MW 7 */
	  4898      "00000000" // /* MW 6 */
	  4899      "00000000" // /* MW 5 */
	  4900      "00000000" // /* MW 4 */
	  4901      "01000000" // /* MW 3 */
	  4902      "11000000" // /* MW 2 */
	  4903      "10001001" // /* MW 1 */
	  4904      "00000001" // 	NOP /* MW 2 */
	  4905      "00000000" // /* MW 1 */
	  4906      "00000001" // 	NOP /* MW 2 */
	  4907      "00000000" // /* MW 1 */
	  4908      "00000001" // 	NOP /* MW 2 */
	  4909      "00000000" // /* MW 1 */
	  4910      "00000001" // 	NOP /* MW 2 */
	  4911      "00000000" // /* MW 1 */
	  4912      "00000001" // 	NOP /* MW 2 */
	  4913      "00000000" // /* MW 1 */
	  4914      "00000001" // 	NOP /* MW 2 */
	  4915      "00000000" // /* MW 1 */
	  4916      "00000001" // 	NOP /* MW 2 */
	  4917      "00000000" // /* MW 1 */
.src_ref 9 "primitives.h" 147 10
	  4918      "00000011" // 	NOP;                                                                  ADD r8, r8, r1 /* MW 4 */
	  4919      "10000000" // /* MW 3 */
	  4920      "00011000" // /* MW 2 */
	  4921      "00110000" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 46 53 first
	  4922      "00000011" // 	NOP;                                                                  ADD r8, r8, #-8 /* MW 4 */
	  4923      "10000000" // /* MW 3 */
	  4924      "10001000" // /* MW 2 */
	  4925      "00100111" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 48 15 first
	  4926      "00000011" // 	NOP;                                                                  LSHL r9, r6, r8 /* MW 4 */
	  4927      "10010000" // /* MW 3 */
	  4928      "10000110" // /* MW 2 */
	  4929      "00111110" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 47 14 first
.src_ref 8 "s_normSubnormalF32Sig.c" 48 5
	  4930      "10110111" // 	NOP;                                    ST r9, [sp, #-4];             SUB r8, r12, r8 /* MW 8 */
	  4931      "11111111" // /* MW 7 */
	  4932      "11110011" // /* MW 6 */
	  4933      "01000010" // /* MW 5 */
	  4934      "11000110" // /* MW 4 */
	  4935      "00011000" // /* MW 3 */
	  4936      "00000000" // /* MW 2 */
	  4937      "00000000" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 47 5
	  4938      "11110111" // 	                                        NOP;                                                        ST.SPIL r8, [sp, #-8];        NOP /* MW 8 */
	  4939      "01000111" // /* MW 7 */
	  4940      "11111000" // /* MW 6 */
	  4941      "11111111" // /* MW 5 */
	  4942      "11111000" // /* MW 4 */
	  4943      "00000000" // /* MW 3 */
	  4944      "00000000" // /* MW 2 */
	  4945      "10000000" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 49 11 first
	  4946      "11110111" // 	                                        NOP;                                                        LDA.SPIL cl0, [sp, #-8];      NOP /* MW 8 */
	  4947      "01100111" // /* MW 7 */
	  4948      "11111111" // /* MW 6 */
	  4949      "01100011" // /* MW 5 */
	  4950      "11000111" // /* MW 4 */
	  4951      "00000000" // /* MW 3 */
	  4952      "00000000" // /* MW 2 */
	  4953      "10000000" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 49 11
	  4954      "11110111" // 	                                        NOP;                                                        LDA.SPIL ch0, [sp, #-4];      NOP /* MW 8 */
	  4955      "11100111" // /* MW 7 */
	  4956      "11111111" // /* MW 6 */
	  4957      "01000011" // /* MW 5 */
	  4958      "11000111" // /* MW 4 */
	  4959      "00000000" // /* MW 3 */
	  4960      "00000000" // /* MW 2 */
	  4961      "10000000" // /* MW 1 */
	  4962      "00000001" // 	NOP /* MW 2 */
	  4963      "00000000" // /* MW 1 */
	  4964      "00000001" // 	NOP /* MW 2 */
	  4965      "00000000" // /* MW 1 */
	  4966      "00000001" // 	NOP /* MW 2 */
	  4967      "00000000" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 49 4
	  4968      "00000001" // 	RET lr /* MW 2 */
	  4969      "00000001" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4970      "00000001" // 	NOP /* MW 2 */
	  4971      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4972      "00000001" // 	NOP /* MW 2 */
	  4973      "00000000" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 49 11
.delay_slot
	  4974      "00000011" // 	NOP;                                    ST cl0, [p0], #4 /* MW 4 */
	  4975      "01000000" // /* MW 3 */
	  4976      "00010100" // /* MW 2 */
	  4977      "10101011" // /* MW 1 */
.src_ref 8 "s_normSubnormalF32Sig.c" 49 4
.src_ref 8 "s_normSubnormalF32Sig.c" 49 11
.delay_slot
	  4978      "00110111" // 	PADDA [sp], #-32;                       ST ch0, [p0];                 NOP /* MW 8 */
	  4979      "10100000" // /* MW 7 */
	  4980      "10100001" // /* MW 6 */
	  4981      "00000010" // /* MW 5 */
	  4982      "00000000" // /* MW 4 */
	  4983      "11000000" // /* MW 3 */
	  4984      "10011111" // /* MW 2 */
	  4985      "00001000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  4986      "00000001" // 	NOP /* MW 2 */
.label _Z29softfloat_normSubnormalF32Sigj__end
	  4987      "00000000" // /* MW 1 */
.label _Z24softfloat_roundPackToF32bij
.function softfloat_roundPackToF32 _Z24softfloat_roundPackToF32bij
.src_ref 8 "s_roundPackToF32.c" 43 first
.src_ref 8 "s_roundPackToF32.c" 68 14
.src_ref 8 "s_roundPackToF32.c" 83 26
.function_start
	  4992      "00000011" // 	NOP;                                                                  MOV.s12 r14, #253 /* MW 4 */
	  4993      "11100000" // /* MW 3 */
	  4994      "11110111" // /* MW 2 */
	  4995      "01000011" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 68 14 first
	  4996      "00000011" // 	NOP;                                                                  LTU r15, r7, r14 /* MW 4 */
	  4997      "11110000" // /* MW 3 */
	  4998      "11100111" // /* MW 2 */
	  4999      "00111101" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 68 4
	  5000      "11110111" // 	                                        NOP;                                                        BNEZ r15,#5248;               NOP /* MW 8 */
	  5001      "00000111" // /* MW 7 */
	  5002      "01001000" // /* MW 6 */
	  5003      "11100001" // /* MW 5 */
	  5004      "10010001" // /* MW 4 */
	  5005      "00000000" // /* MW 3 */
	  5006      "00000000" // /* MW 2 */
	  5007      "10000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 90 37
.delay_slot
	  5008      "00000011" // 	NOP;                                                                  MOV.s12 r9, #31 /* MW 4 */
	  5009      "10010000" // /* MW 3 */
	  5010      "01111111" // /* MW 2 */
	  5011      "01000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 65 20
.src_ref 8 "s_roundPackToF32.c" 90 37 first
.delay_slot
	  5012      "01110111" // 	NOP;                                                                  LSHL r9, r6, r9;              MOV.s8 r12, #127 /* MW 8 */
	  5013      "11010010" // /* MW 7 */
	  5014      "11010010" // /* MW 6 */
	  5015      "00000111" // /* MW 5 */
	  5016      "11111111" // /* MW 4 */
	  5017      "00110111" // /* MW 3 */
	  5018      "00000000" // /* MW 2 */
	  5019      "00000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 65 20 first
.src_ref 8 "s_roundPackToF32.c" 69 17
.src_ref 8 "s_roundPackToF32.c" 75 50
.src_ref 8 "s_roundPackToF32.c" 109 4
.src_ref 8 "s_roundPackToF32.c" 109 9
.src_ref 9 "primitives.h" 74 23
.src_ref 9 "primitives.h" 74 49
.delay_slot
	  5020      "01110111" // 	NOP;                                                                  AND r13, r8, r12;             MOV.s8 r12, #0 /* MW 8 */
	  5021      "00011010" // /* MW 7 */
	  5022      "10011001" // /* MW 6 */
	  5023      "00000110" // /* MW 5 */
	  5024      "00001111" // /* MW 4 */
	  5025      "00110000" // /* MW 3 */
	  5026      "00000000" // /* MW 2 */
	  5027      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5028      "00000001" // 	NOP /* MW 2 */
	  5029      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5030      "00000001" // 	NOP /* MW 2 */
	  5031      "00000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 69 17 first
	  5032      "00000011" // 	NOP;                                                                  LT r6, r7, r12 /* MW 4 */
	  5033      "01100000" // /* MW 3 */
	  5034      "11000111" // /* MW 2 */
	  5035      "00111011" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 69 8
	  5036      "11110111" // 	                                        NOP;                                                        BNEZ r6,#5120;                NOP /* MW 8 */
	  5037      "00000111" // /* MW 7 */
	  5038      "01000000" // /* MW 6 */
	  5039      "11000001" // /* MW 5 */
	  5040      "10010000" // /* MW 4 */
	  5041      "00000000" // /* MW 3 */
	  5042      "00000000" // /* MW 2 */
	  5043      "10000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 83 55
.src_ref 8 "s_roundPackToF32.c" 96 15
.src_ref 8 "s_roundPackToF32.c" 108 42
.delay_slot
	  5044      "00000011" // 	NOP;                                                                  MOV.s12 r15, #64 /* MW 4 */
	  5045      "11110000" // /* MW 3 */
	  5046      "00000011" // /* MW 2 */
	  5047      "01000001" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5048      "00000001" // 	NOP /* MW 2 */
	  5049      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5050      "00000001" // 	NOP /* MW 2 */
	  5051      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5052      "00000001" // 	NOP /* MW 2 */
	  5053      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5054      "00000001" // 	NOP /* MW 2 */
	  5055      "00000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 83 55 first
	  5056      "11110111" // 	                                                                      ADD r6, r8, r15;              MOV.u20 r1, #0;               NOP /* MW 8 */
	  5057      "00000111" // /* MW 7 */
	  5058      "00000000" // /* MW 6 */
	  5059      "11000100" // /* MW 5 */
	  5060      "01000000" // /* MW 4 */
	  5061      "01100000" // /* MW 3 */
	  5062      "11111000" // /* MW 2 */
	  5063      "00110000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 83 26
	  5064      "11110111" // 	                                                                      LT r14, r14, r7;              MOVT.s12 r1, #-2048;          NOP /* MW 8 */
	  5065      "00000111" // /* MW 7 */
	  5066      "10000000" // /* MW 6 */
	  5067      "01000100" // /* MW 5 */
	  5068      "00000001" // /* MW 4 */
	  5069      "11100000" // /* MW 3 */
	  5070      "01111110" // /* MW 2 */
	  5071      "00111011" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 83 48
	  5072      "00000011" // 	NOP;                                                                  GEU r6, r6, r1 /* MW 4 */
	  5073      "01100000" // /* MW 3 */
	  5074      "00010110" // /* MW 2 */
	  5075      "00111100" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 83 33
	  5076      "00000011" // 	NOP;                                                                  OR r14, r6, r14 /* MW 4 */
	  5077      "11100000" // /* MW 3 */
	  5078      "11100110" // /* MW 2 */
	  5079      "00110101" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 83 15
	  5080      "11110111" // 	                                        NOP;                                                        BNEZ r14,#5328;               NOP /* MW 8 */
	  5081      "00000111" // /* MW 7 */
	  5082      "01001101" // /* MW 6 */
	  5083      "11000001" // /* MW 5 */
	  5084      "10010001" // /* MW 4 */
	  5085      "00000000" // /* MW 3 */
	  5086      "00000000" // /* MW 2 */
	  5087      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5088      "00000001" // 	NOP /* MW 2 */
	  5089      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5090      "00000001" // 	NOP /* MW 2 */
	  5091      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5092      "00000001" // 	NOP /* MW 2 */
	  5093      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5094      "00000001" // 	NOP /* MW 2 */
	  5095      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5096      "00000001" // 	NOP /* MW 2 */
	  5097      "00000000" // /* MW 1 */
	  5098      "11110111" // 	                                        NOP;                                                        J #5264;                      NOP /* MW 8 */
	  5099      "00000111" // /* MW 7 */
	  5100      "01001001" // /* MW 6 */
	  5101      "00000001" // /* MW 5 */
	  5102      "10100000" // /* MW 4 */
	  5103      "00000000" // /* MW 3 */
	  5104      "00000000" // /* MW 2 */
	  5105      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5106      "00000001" // 	NOP /* MW 2 */
	  5107      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5108      "00000001" // 	NOP /* MW 2 */
	  5109      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5110      "00000001" // 	NOP /* MW 2 */
	  5111      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5112      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  5113      "00000000" // /* MW 3 */
	  5114      "00000000" // /* MW 2 */
	  5115      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5116      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  5117      "00000000" // /* MW 3 */
	  5118      "00000000" // /* MW 2 */
	  5119      "00000000" // /* MW 1 */
.label TGT_F_Z24softfloat_roundPackToF32bij_128
.src_ref 8 "s_roundPackToF32.c" 75 50 first
.src_ref 9 "primitives.h" 74 14
.src_ref 9 "primitives.h" 74 55
	  5120      "01110111" // 	NOP;                                                                  SUB r7, r12, r7;              MOV.s8 r13, #31 /* MW 8 */
	  5121      "10001110" // /* MW 7 */
	  5122      "00101111" // /* MW 6 */
	  5123      "01000110" // /* MW 5 */
	  5124      "11111111" // /* MW 4 */
	  5125      "00110001" // /* MW 3 */
	  5126      "00000000" // /* MW 2 */
	  5127      "00000000" // /* MW 1 */
.src_ref 9 "primitives.h" 74 14 first
	  5128      "00000011" // 	NOP;                                                                  LTU r14, r7, r13 /* MW 4 */
	  5129      "11100000" // /* MW 3 */
	  5130      "11010111" // /* MW 2 */
	  5131      "00111101" // /* MW 1 */
.src_ref 9 "primitives.h" 74 20
	  5132      "11110111" // 	                                        NOP;                                                        BNEZ r14,#5184;               NOP /* MW 8 */
	  5133      "00000111" // /* MW 7 */
	  5134      "01000100" // /* MW 6 */
	  5135      "11000001" // /* MW 5 */
	  5136      "10010001" // /* MW 4 */
	  5137      "00000000" // /* MW 3 */
	  5138      "00000000" // /* MW 2 */
	  5139      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5140      "00000001" // 	NOP /* MW 2 */
	  5141      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5142      "00000001" // 	NOP /* MW 2 */
	  5143      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5144      "00000001" // 	NOP /* MW 2 */
	  5145      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5146      "00000001" // 	NOP /* MW 2 */
	  5147      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5148      "00000001" // 	NOP /* MW 2 */
	  5149      "00000000" // /* MW 1 */
	  5150      "11110111" // 	                                        NOP;                                                        J #5216;                      NOP /* MW 8 */
	  5151      "00000111" // /* MW 7 */
	  5152      "01000110" // /* MW 6 */
	  5153      "00000001" // /* MW 5 */
	  5154      "10100000" // /* MW 4 */
	  5155      "00000000" // /* MW 3 */
	  5156      "00000000" // /* MW 2 */
	  5157      "10000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 77 28
.src_ref 9 "primitives.h" 74 73
.delay_slot
	  5158      "01110111" // 	NOP;                                                                  NEZ r8, r8;                   MOV.s8 r14, #127 /* MW 8 */
	  5159      "00010000" // /* MW 7 */
	  5160      "01001111" // /* MW 6 */
	  5161      "10000011" // /* MW 5 */
	  5162      "11111111" // /* MW 4 */
	  5163      "00110111" // /* MW 3 */
	  5164      "00000000" // /* MW 2 */
	  5165      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5166      "00000001" // 	NOP /* MW 2 */
	  5167      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5168      "00000001" // 	NOP /* MW 2 */
	  5169      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5170      "00000001" // 	NOP /* MW 2 */
	  5171      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5172      "00011111" // 	NOP;                NOP;                NOP;                          NOP;                          NOP /* MW 12 */
	  5173      "00000000" // /* MW 11 */
	  5174      "00000000" // /* MW 10 */
	  5175      "00000000" // /* MW 9 */
	  5176      "00000000" // /* MW 8 */
	  5177      "00000000" // /* MW 7 */
	  5178      "00000000" // /* MW 6 */
	  5179      "00000000" // /* MW 5 */
	  5180      "00000000" // /* MW 4 */
	  5181      "00000000" // /* MW 3 */
	  5182      "00000000" // /* MW 2 */
	  5183      "00000000" // /* MW 1 */
.label TGT_F_Z24softfloat_roundPackToF32bij_192
.src_ref 8 "s_roundPackToF32.c" 77 28
.src_ref 9 "primitives.h" 74 49
	  5184      "01110111" // 	NOP;                                                                  SUB r6, r12, r7;              MOV.s8 r14, #127 /* MW 8 */
	  5185      "10001100" // /* MW 7 */
	  5186      "00101111" // /* MW 6 */
	  5187      "10000110" // /* MW 5 */
	  5188      "11111111" // /* MW 4 */
	  5189      "00110111" // /* MW 3 */
	  5190      "00000000" // /* MW 2 */
	  5191      "00000000" // /* MW 1 */
.src_ref 9 "primitives.h" 74 55
	  5192      "00000011" // 	NOP;                                                                  AND r13, r6, r13 /* MW 4 */
	  5193      "11010000" // /* MW 3 */
	  5194      "11010110" // /* MW 2 */
	  5195      "00110100" // /* MW 1 */
.src_ref 9 "primitives.h" 74 46
	  5196      "00000011" // 	NOP;                                                                  LSHL r13, r8, r13 /* MW 4 */
	  5197      "11010000" // /* MW 3 */
	  5198      "11011000" // /* MW 2 */
	  5199      "00111110" // /* MW 1 */
.src_ref 9 "primitives.h" 74 23
	  5200      "00000011" // 	NOP;                                                                  SUB r7, r12, r7 /* MW 4 */
	  5201      "01110000" // /* MW 3 */
	  5202      "01111100" // /* MW 2 */
	  5203      "00110001" // /* MW 1 */
.src_ref 9 "primitives.h" 74 23
	  5204      "00000011" // 	NOP;                                                                  LSHL r8, r8, r7 /* MW 4 */
	  5205      "10000000" // /* MW 3 */
	  5206      "01111000" // /* MW 2 */
	  5207      "00111110" // /* MW 1 */
.src_ref 9 "primitives.h" 74 62
	  5208      "00000011" // 	NOP;                                                                  NEZ r13, r13 /* MW 4 */
	  5209      "11010000" // /* MW 3 */
	  5210      "01111101" // /* MW 2 */
	  5211      "00011010" // /* MW 1 */
.src_ref 9 "primitives.h" 74 30
	  5212      "00000011" // 	NOP;                                                                  OR r8, r8, r13 /* MW 4 */
	  5213      "10000000" // /* MW 3 */
	  5214      "11011000" // /* MW 2 */
	  5215      "00110101" // /* MW 1 */
.label TGT_F_Z24softfloat_roundPackToF32bij_224
	  5216      "11110111" // 	                                        NOP;                                                        J #5264;                      NOP /* MW 8 */
	  5217      "00000111" // /* MW 7 */
	  5218      "01001001" // /* MW 6 */
	  5219      "00000001" // /* MW 5 */
	  5220      "10100000" // /* MW 4 */
	  5221      "00000000" // /* MW 3 */
	  5222      "00000000" // /* MW 2 */
	  5223      "10000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 77 28 first
.src_ref 8 "s_roundPackToF32.c" 109 4
.src_ref 8 "s_roundPackToF32.c" 109 9
.delay_slot
	  5224      "01110111" // 	NOP;                                                                  AND r13, r8, r14;             MOV.s8 r7, #0 /* MW 8 */
	  5225      "00011010" // /* MW 7 */
	  5226      "10011101" // /* MW 6 */
	  5227      "11000110" // /* MW 5 */
	  5228      "00001101" // /* MW 4 */
	  5229      "00110000" // /* MW 3 */
	  5230      "00000000" // /* MW 2 */
	  5231      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5232      "00000001" // 	NOP /* MW 2 */
	  5233      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5234      "00000001" // 	NOP /* MW 2 */
	  5235      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5236      "00000011" // 	NOP;                                                                  NOP /* MW 4 */
	  5237      "00000000" // /* MW 3 */
	  5238      "00000000" // /* MW 2 */
	  5239      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5240      "00110111" // 	NOP;                                    NOP;                          NOP /* MW 8 */
	  5241      "00000000" // /* MW 7 */
	  5242      "00000000" // /* MW 6 */
	  5243      "00000000" // /* MW 5 */
	  5244      "00000000" // /* MW 4 */
	  5245      "00000000" // /* MW 3 */
	  5246      "00000000" // /* MW 2 */
	  5247      "00000000" // /* MW 1 */
.label TGT_F_Z24softfloat_roundPackToF32bij_256
.src_ref 8 "s_roundPackToF32.c" 96 15
.src_ref 8 "s_roundPackToF32.c" 108 42
	  5248      "00000010" // 	NOP;                NOP;                NOP;                          MOV.s12 r15, #64;             NOP;                          NOP;                                    NOP /* MW 16 */
	  5249      "00000000" // /* MW 15 */
	  5250      "00000000" // /* MW 14 */
	  5251      "11111000" // /* MW 13 */
	  5252      "10000001" // /* MW 12 */
	  5253      "00100000" // /* MW 11 */
	  5254      "00000000" // /* MW 10 */
	  5255      "00000000" // /* MW 9 */
	  5256      "00000000" // /* MW 8 */
	  5257      "00000000" // /* MW 7 */
	  5258      "00000000" // /* MW 6 */
	  5259      "00000000" // /* MW 5 */
	  5260      "00000000" // /* MW 4 */
	  5261      "00000000" // /* MW 3 */
	  5262      "00000000" // /* MW 2 */
	  5263      "00000000" // /* MW 1 */
.label TGT_F_Z24softfloat_roundPackToF32bij_272
.src_ref 8 "s_roundPackToF32.c" 96 32
.src_ref 8 "s_roundPackToF32.c" 108 11
.src_ref 8 "s_roundPackToF32.c" 108 42 first
	  5264      "01011111" // 	NOP;                MOV.s9 r14, #-7;    NOP;                          XOR r6, r13, r15;             MOV.s8 r13, #-1 /* MW 12 */
	  5265      "11111111" // /* MW 11 */
	  5266      "10111111" // /* MW 10 */
	  5267      "11110101" // /* MW 9 */
	  5268      "11011011" // /* MW 8 */
	  5269      "00000000" // /* MW 7 */
	  5270      "00000000" // /* MW 6 */
	  5271      "00100000" // /* MW 5 */
	  5272      "11111111" // /* MW 4 */
	  5273      "00011110" // /* MW 3 */
	  5274      "00000000" // /* MW 2 */
	  5275      "00000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 96 15 first
	  5276      "00000011" // 	NOP;                                                                  ADD r15, r8, r15 /* MW 4 */
	  5277      "11110000" // /* MW 3 */
	  5278      "11111000" // /* MW 2 */
	  5279      "00110000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 108 29 first
	  5280      "01101101" // 	EQZ r6, r6 /* MW 2 */
	  5281      "01100110" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 96 32 first
	  5282      "00000011" // 	NOP;                                                                  LSHL r14, r15, r14 /* MW 4 */
	  5283      "11100000" // /* MW 3 */
	  5284      "11101111" // /* MW 2 */
	  5285      "00111110" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 108 11 first
	  5286      "00000011" // 	NOP;                                                                  XOR r13, r6, r13 /* MW 4 */
	  5287      "11010000" // /* MW 3 */
	  5288      "11010110" // /* MW 2 */
	  5289      "00110110" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 108 8
	  5290      "00000011" // 	NOP;                                                                  AND r0, r14, r13 /* MW 4 */
	  5291      "00000000" // /* MW 3 */
	  5292      "11011110" // /* MW 2 */
	  5293      "00110100" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 116 4 first
	  5294      "00000001" // 	RET lr /* MW 2 */
	  5295      "00000001" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 109 4 first
.src_ref 8 "s_roundPackToF32.c" 109 9 first
.src_ref 8 "s_roundPackToF32.c" 113 54
.delay_slot
	  5296      "01110111" // 	NOP;                                                                  ITE_EQZ r12, r12, r7, r0;     MOV.s8 r8, #23 /* MW 8 */
	  5297      "10011000" // /* MW 7 */
	  5298      "11001111" // /* MW 6 */
	  5299      "00000011" // /* MW 5 */
	  5300      "01111110" // /* MW 4 */
	  5301      "00110001" // /* MW 3 */
	  5302      "00000000" // /* MW 2 */
	  5303      "00000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 113 54 first
.delay_slot
	  5304      "00000011" // 	NOP;                                                                  LSHL r8, r12, r8 /* MW 4 */
	  5305      "10000000" // /* MW 3 */
	  5306      "10001100" // /* MW 2 */
	  5307      "00111110" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 113 35
.delay_slot
	  5308      "00000011" // 	NOP;                                                                  ADD r8, r8, r9 /* MW 4 */
	  5309      "10000000" // /* MW 3 */
	  5310      "10011000" // /* MW 2 */
	  5311      "00110000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 113 60
.delay_slot
	  5312      "00000011" // 	NOP;                                                                  ADD r0, r0, r8 /* MW 4 */
	  5313      "00000000" // /* MW 3 */
	  5314      "10000000" // /* MW 2 */
	  5315      "00110000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5316      "00011111" // 	NOP;                NOP;                NOP;                          NOP;                          NOP /* MW 12 */
	  5317      "00000000" // /* MW 11 */
	  5318      "00000000" // /* MW 10 */
	  5319      "00000000" // /* MW 9 */
	  5320      "00000000" // /* MW 8 */
	  5321      "00000000" // /* MW 7 */
	  5322      "00000000" // /* MW 6 */
	  5323      "00000000" // /* MW 5 */
	  5324      "00000000" // /* MW 4 */
	  5325      "00000000" // /* MW 3 */
	  5326      "00000000" // /* MW 2 */
	  5327      "00000000" // /* MW 1 */
.label TGT_F_Z24softfloat_roundPackToF32bij_336
.src_ref 8 "s_roundPackToF32.c" 116 4 first
	  5328      "00000001" // 	RET lr /* MW 2 */
	  5329      "00000001" // /* MW 1 */
.delay_slot
	  5330      "11110111" // 	                                        NOP;                                                        MOV.u20 r8, #0;               NOP /* MW 8 */
	  5331      "00000111" // /* MW 7 */
	  5332      "00000000" // /* MW 6 */
	  5333      "11100000" // /* MW 5 */
	  5334      "01000000" // /* MW 4 */
	  5335      "00000000" // /* MW 3 */
	  5336      "00000000" // /* MW 2 */
	  5337      "10000000" // /* MW 1 */
.delay_slot
	  5338      "11110111" // 	                                        NOP;                                                        MOVT.s12 r8, #2040;           NOP /* MW 8 */
	  5339      "10000111" // /* MW 7 */
	  5340      "01111111" // /* MW 6 */
	  5341      "01100000" // /* MW 5 */
	  5342      "00000001" // /* MW 4 */
	  5343      "00000000" // /* MW 3 */
	  5344      "00000000" // /* MW 2 */
	  5345      "10000000" // /* MW 1 */
.src_ref 8 "s_roundPackToF32.c" 90 43 first
.delay_slot
	  5346      "00000011" // 	NOP;                                                                  ADD r0, r8, r9 /* MW 4 */
	  5347      "00000000" // /* MW 3 */
	  5348      "10011000" // /* MW 2 */
	  5349      "00110000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5350      "00000001" // 	NOP /* MW 2 */
	  5351      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5352      "00000001" // 	NOP /* MW 2 */
.label _Z24softfloat_roundPackToF32bij__end
	  5353      "00000000" // /* MW 1 */
.label _Z27softfloat_propagateNaNF32UIjj
.function softfloat_propagateNaNF32UI _Z27softfloat_propagateNaNF32UIjj
.src_ref 10 "s_propagateNaNF32UI.c" 56 4 first
.src_ref 10 "s_propagateNaNF32UI.c" 56 4 first
.function_start
	  5360      "00000001" // 	RET lr /* MW 2 */
	  5361      "00000001" // /* MW 1 */
.delay_slot
	  5362      "11110111" // 	                                        NOP;                                                        MOV.u20 r0, #0;               NOP /* MW 8 */
	  5363      "00000111" // /* MW 7 */
	  5364      "00000000" // /* MW 6 */
	  5365      "11000000" // /* MW 5 */
	  5366      "01000000" // /* MW 4 */
	  5367      "00000000" // /* MW 3 */
	  5368      "00000000" // /* MW 2 */
	  5369      "10000000" // /* MW 1 */
.delay_slot
	  5370      "11110111" // 	                                        NOP;                                                        MOVT.s12 r0, #2044;           NOP /* MW 8 */
	  5371      "11000111" // /* MW 7 */
	  5372      "01111111" // /* MW 6 */
	  5373      "01000000" // /* MW 5 */
	  5374      "00000001" // /* MW 4 */
	  5375      "00000000" // /* MW 3 */
	  5376      "00000000" // /* MW 2 */
	  5377      "10000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5378      "00000001" // 	NOP /* MW 2 */
	  5379      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5380      "00000001" // 	NOP /* MW 2 */
	  5381      "00000000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	  5382      "00000001" // 	NOP /* MW 2 */
.label _Z27softfloat_propagateNaNF32UIjj__end
	  5383      "00000000" // /* MW 1 */
.dir 0 "%PROCDIR%"
.dir 1 "%PROCDIR%/runtime/include"
.dir 2 "/home/users/francesco.santambrogio/Downloads/Hpps24-fpga2aie/aie/Work/aie/27_0/src"
.dir 3 "/home/xilinx/software/Vitis/2022.2/aietools/include/aie_api/detail/aie1"
.dir 4 "/home/xilinx/software/Vitis/2022.2/aietools/include/adf/stream/me"
.dir 5 "/home/users/francesco.santambrogio/Downloads/Hpps24-fpga2aie/aie/src"
.dir 6 "/home/xilinx/software/Vitis/2022.2/aietools/include/aie_api/detail"
.dir 7 "%PROCDIR%/runtime/src"
.dir 8 "%PROCDIR%/softfloat/SoftFloat-3e/source"
.dir 9 "%PROCDIR%/softfloat/SoftFloat-3e/source/include"
.dir 10 "%PROCDIR%/softfloat/SoftFloat-3e/source/ARM-VFPv2-defaultNaN"
